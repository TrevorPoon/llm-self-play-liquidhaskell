Task ID: Haskell/0
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (has_close_elements [1.0, 2.0, 3.9, 4.0, 5.0, 2.2] 0.3 == True)
    check (has_close_elements [1.0, 2.0, 3.9, 4.0, 5.0, 2.2] 0.05 == False)
    check (has_close_elements [1.0, 2.0, 5.9, 4.0, 5.0] 0.95 == True)
    check (has_close_elements [1.0, 2.0, 5.9, 4.0, 5.0] 0.8 == False)
    check (has_close_elements [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] 0.1 == True)
    check (has_close_elements [1.1, 2.2, 3.1, 4.1, 5.1] 1.0 == True)
    check (has_close_elements [1.1, 2.2, 3.1, 4.1, 5.1] 0.5 == False)

------------------------------
Task ID: Haskell/1
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (separate_paren_groups "(()()) ((())) () ((())()())" == ["(()())","((()))","()","((())()())"])
    check (separate_paren_groups "() (()) ((())) (((())))"      == ["()","(())","((()))","(((())))"])
    check (separate_paren_groups "(()(())((())))"             == ["(()(())((())))"])
    check (separate_paren_groups "( ) (( )) (( )( ))"           == ["()","(())","(()())"])

------------------------------
Task ID: Haskell/2
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (truncate_number 3.5 == 0.5)
    check (abs (truncate_number 1.33   - 0.33 ) < 1e-6)
    check (abs (truncate_number 123.456 - 0.456) < 1e-6)

------------------------------
Task ID: Haskell/3
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (below_zero []                         == False)
    check (below_zero [1,2,-3,1,2,-3]            == False)
    check (below_zero [1,2,-4,5,6]               == True)
    check (below_zero [1,-1,2,-2,5,-5,4,-4]      == False)
    check (below_zero [1,-1,2,-2,5,-5,4,-5]      == True)
    check (below_zero [1,-2,2,-2,5,-5,4,-4]      == True)

------------------------------
Task ID: Haskell/4
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (abs (mean_absolute_deviation [1.0,2.0,3.0]       - 2.0/3.0) < 1e-6)
    check (abs (mean_absolute_deviation [1.0,2.0,3.0,4.0]   - 1.0     ) < 1e-6)
    check (abs (mean_absolute_deviation [1.0,2.0,3.0,4.0,5.0] - 6.0/5.0) < 1e-6)

------------------------------
Task ID: Haskell/5
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (intersperse []       7 == [])
    check (intersperse [5,6,3,2] 8 == [5,8,6,8,3,8,2])
    check (intersperse [2,2,2]   2 == [2,2,2,2,2])

------------------------------
Task ID: Haskell/6
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (parse_nested_parens "(()()) ((())) () ((())()())" == [2,3,1,3])
    check (parse_nested_parens "() (()) ((())) (((())))"      == [1,2,3,4])
    check (parse_nested_parens "(()(())((())))"             == [4])

------------------------------
Task ID: Haskell/7
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (filter_by_substring []                          "john" == [])
    check (filter_by_substring ["xxx","asd","xxy","john doe","xxxAAA","xxx"] "xxx" == ["xxx","xxxAAA","xxx"])
    check (filter_by_substring ["xxx","asd","aaaxxy","john doe","xxxAAA","xxx"] "xx"  == ["xxx","aaaxxy","xxxAAA","xxx"])
    check (filter_by_substring ["grunt","trumpet","prune","gruesome"]    "run" == ["grunt","prune"])

------------------------------
Task ID: Haskell/8
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sum_product []       == (0,1))
    check (sum_product [1,1,1]  == (3,1))
    check (sum_product [100,0]  == (100,0))
    check (sum_product [3,5,7]  == (15,105))
    check (sum_product [10]     == (10,10))

------------------------------
Task ID: Haskell/9
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (rolling_max [] == [])
    check (rolling_max [1,2,3,4] == [1,2,3,4])
    check (rolling_max [4,3,2,1] == [4,4,4,4])
    check (rolling_max [3,2,3,100,3] == [3,3,3,100,100])

------------------------------
Task ID: Haskell/10
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (make_palindrome "" == "")
    check (make_palindrome "x" == "x")
    check (make_palindrome "xyz" == "xyzyx")
    check (make_palindrome "xyx" == "xyx")
    check (make_palindrome "jerry" == "jerryrrej")
------------------------------
Task ID: Haskell/11
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (string_xor "111000" "101010" == "010010")
    check (string_xor "1" "1" == "0")
    check (string_xor "0101" "0000" == "0101")
------------------------------
Task ID: Haskell/12
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (longest [] == Nothing)
    check (longest ["x","y","z"] == Just "x")
    check (longest ["x","yyy","zzzz","www","kkkk","abc"] == Just "zzzz")
------------------------------
Task ID: Haskell/13
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (greatest_common_divisor 3 7 == 1)
    check (greatest_common_divisor 10 15 == 5)
    check (greatest_common_divisor 49 14 == 7)
    check (greatest_common_divisor 144 60 == 12)
------------------------------
Task ID: Haskell/14
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (all_prefixes "" == [])
    check (all_prefixes "asdfgh" == ["a","as","asd","asdf","asdfg","asdfgh"])
    check (all_prefixes "WWW" == ["W","WW","WWW"])
------------------------------
Task ID: Haskell/15
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (string_sequence 0 == "0")
    check (string_sequence 3 == "0 1 2 3")
    check (string_sequence 10 == "0 1 2 3 4 5 6 7 8 9 10")
------------------------------
Task ID: Haskell/16
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (count_distinct_characters "" == 0)
    check (count_distinct_characters "abcde" == 5)
    check (count_distinct_characters "abcdecadeCADE" == 5)
    check (count_distinct_characters "aaaaAAAAaaaa" == 1)
    check (count_distinct_characters "Jerry jERRY JeRRRY" == 5)
------------------------------
Task ID: Haskell/17
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (parse_music "" == [])
    check (parse_music "o o o o" == [4,4,4,4])
    check (parse_music ".| .| .| .|" == [1,1,1,1])
    check (parse_music "o| o| .| .| o o o o" == [2,2,1,1,4,4,4,4])
    check (parse_music "o| .| o| .| o o| o o|" == [2,1,2,1,4,2,4,2])
------------------------------
Task ID: Haskell/18
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (how_many_times "" "x" == 0)
    check (how_many_times "xyxyxyx" "x" == 4)
    check (how_many_times "cacacacac" "cac" == 4)
    check (how_many_times "john doe" "john" == 1)
------------------------------
Task ID: Haskell/19
Test:
-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sort_numbers "" == "")
    check (sort_numbers "three" == "three")
    check (sort_numbers "three five nine" == "three five nine")
    check (sort_numbers "five zero four seven nine eight" == "zero four five seven eight nine")
    check (sort_numbers "six five four three two one zero" == "zero one two three four five six")
------------------------------
Task ID: Haskell/20
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (find_closest_elements [1.0, 2.0, 3.9, 4.0, 5.0, 2.2] == (3.9, 4.0))
    check (find_closest_elements [1.0, 2.0, 5.9, 4.0, 5.0] == (5.0, 5.9))
    check (find_closest_elements [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] == (2.0, 2.2))
    check (find_closest_elements [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] == (2.0, 2.0))
    check (find_closest_elements [1.1, 2.2, 3.1, 4.1, 5.1] == (2.2, 3.1))

------------------------------
Task ID: Haskell/21
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (rescale_to_unit [2.0, 49.9] == [0.0, 1.0])
    check (rescale_to_unit [100.0, 49.9] == [1.0, 0.0])
    check (rescale_to_unit [1.0, 2.0, 3.0, 4.0, 5.0] == [0.0, 0.25, 0.5, 0.75, 1.0])
    check (rescale_to_unit [2.0, 1.0, 5.0, 3.0, 4.0] == [0.25, 0.0, 1.0, 0.5, 0.75])
    check (rescale_to_unit [12.0, 11.0, 15.0, 13.0, 14.0] == [0.25, 0.0, 1.0, 0.5, 0.75])

------------------------------
Task ID: Haskell/22
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (filter_integers [] == [])
    check (filter_integers ["4", "9"] == [4, 9])
    check (filter_integers ["3", "3", "3"] == [3, 3, 3])

------------------------------
Task ID: Haskell/23
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (strlen "" == 0)
    check (strlen "x" == 1)
    check (strlen "asdasnakj" == 9)

------------------------------
Task ID: Haskell/24
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (largest_divisor 3 == 1)
    check (largest_divisor 7 == 1)
    check (largest_divisor 10 == 5)
    check (largest_divisor 100 == 50)
    check (largest_divisor 49 == 7)

------------------------------
Task ID: Haskell/25
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (factorize 2 == [2])
    check (factorize 4 == [2, 2])
    check (factorize 8 == [2, 2, 2])
    check (factorize (3 * 19) == [3, 19])
    check (factorize (3 * 19 * 3 * 19) == [3, 3, 19, 19])
    check (factorize (3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19])
    check (factorize (3 * 19 * 19 * 19) == [3, 19, 19, 19])
    check (factorize (3 * 2 * 3) == [2, 3, 3])

------------------------------
Task ID: Haskell/26
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (remove_duplicates [] == [])
    check (remove_duplicates [1, 2, 3, 4] == [1, 2, 3, 4])
    check (remove_duplicates [1, 2, 3, 2, 4, 3, 5] == [1, 4, 5])

------------------------------
Task ID: Haskell/27
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (flip_case "" == "")
    check (flip_case "Hello!" == "hELLO!")
    check (flip_case "These violent delights have violent ends" == "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS")

------------------------------
Task ID: Haskell/28
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (concatenate [] == "")
    check (concatenate ["x", "y", "z"] == "xyz")
    check (concatenate ["x", "y", "z", "w", "k"] == "xyzwk")

------------------------------
Task ID: Haskell/29
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (filter_by_prefix [] "john" == [])
    check (filter_by_prefix ["xxx", "asd", "xxy", "john doe", "xxxAAA", "xxx"] "xxx" == ["xxx", "xxxAAA", "xxx"])

------------------------------
Task ID: Haskell/30
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (get_positive [-1, -2, 4, 5, 6] == [4, 5, 6])
    check (get_positive [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10] == [5, 3, 2, 3, 3, 9, 123, 1])
    check (get_positive [-1, -2] == [])
    check (get_positive [] == [])
------------------------------
Task ID: Haskell/31
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_prime 6 == False)
    check (is_prime 101 == True)
    check (is_prime 11 == True)
    check (is_prime 13441 == True)
    check (is_prime 61 == True)
    check (is_prime 4 == False)
    check (is_prime 1 == False)
    check (is_prime 5 == True)
    check (is_prime 11 == True)
    check (is_prime 17 == True)
    check (is_prime (5 * 17) == False)
    check (is_prime (11 * 7) == False)
    check (is_prime (13441 * 19) == False)
------------------------------
Task ID: Haskell/32
Test:


-- Test suite
check :: Bool -> IO ()
check True = return ()
check False = error "Test failed"

import System.Random (StdGen, mkStdGen, randomR)

main :: IO ()
main = do
 let gen0 = mkStdGen 42
 runTests 100 gen0

runTests :: Int -> StdGen -> IO ()
runTests 0 _ = return ()
runTests n gen =
 let (val, gen1) = randomR (1,4 :: Int) gen
 ncoeff = 2 * val
 (coeffs, gen2) = genCoeffs ncoeff gen1
 solution = candidate coeffs
 ok = abs (poly coeffs solution) < 1e-4
 in check ok >> runTests (n-1) gen2

-- generate a list of 'n' coefficients, replacing any 0 with 1
genCoeffs :: Int -> StdGen -> ([Int], StdGen)
genCoeffs 0 gen = ([], gen)
genCoeffs m gen =
 let (c, gen1) = randomR (-10,10 :: Int) gen
 coeff = if c == 0 then 1 else c
 (rest, gen2) = genCoeffs (m-1) gen1
 in (coeff : rest, gen2)

------------------------------
Task ID: Haskell/33
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sort_third [1, 2, 3] == sort_third [1, 2, 3])
    check (sort_third [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10] == sort_third [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    check (sort_third [5, 8, -12, 4, 23, 2, 3, 11, 12, -10] == sort_third [5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
    check (sort_third [5, 6, 3, 4, 8, 9, 2] == [2, 6, 3, 4, 8, 9, 5])
    check (sort_third [5, 8, 3, 4, 6, 9, 2] == [2, 8, 3, 4, 6, 9, 5])
    check (sort_third [5, 6, 9, 4, 8, 3, 2] == [2, 6, 9, 4, 8, 3, 5])
    check (sort_third [5, 6, 3, 4, 8, 9, 2, 1] == [2, 6, 3, 4, 8, 9, 5, 1])
------------------------------
Task ID: Haskell/34
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (unique [5, 3, 5, 2, 3, 3, 9, 0, 123] == [0, 2, 3, 5, 9, 123])
------------------------------
Task ID: Haskell/35
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (max_element [1, 2, 3] == 3)
    check (max_element [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10] == 124)
------------------------------
Task ID: Haskell/36
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (fizz_buzz 50 == 0)
    check (fizz_buzz 78 == 2)
    check (fizz_buzz 79 == 3)
    check (fizz_buzz 100 == 3)
    check (fizz_buzz 200 == 6)
    check (fizz_buzz 4000 == 192)
    check (fizz_buzz 10000 == 639)
    check (fizz_buzz 100000 == 8026)
------------------------------
Task ID: Haskell/37
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sort_even [1, 2, 3] == [1, 2, 3])
    check (sort_even [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10] == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    check (sort_even [5, 8, -12, 4, 23, 2, 3, 11, 12, -10] == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])
------------------------------
Task ID: Haskell/38
Test:
-- Test suite
check :: Bool -> IO ()
check True = return ()
check False = error "Test failed"

main :: IO ()
main = do
 forM_ [1..100] $ \_ -> do
 len <- randomRIO (10, 20)
 str <- replicateM len (randomRIO ('a', 'z'))
 let encodedStr = encodeCyclic str
 check (candidate encodedStr == str)

------------------------------
Task ID: Haskell/39
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (prime_fib 1 == 2)
    check (prime_fib 2 == 3)
    check (prime_fib 3 == 5)
    check (prime_fib 4 == 13)
    check (prime_fib 5 == 89)
    check (prime_fib 6 == 233)
    check (prime_fib 7 == 1597)
    check (prime_fib 8 == 28657)
    check (prime_fib 9 == 514229)
    check (prime_fib 10 == 433494437)
------------------------------
Task ID: Haskell/40
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (triples_sum_to_zero [1, 3, 5, 0] == False)
    check (triples_sum_to_zero [1, 3, 5, -1] == False)
    check (triples_sum_to_zero [1, 3, -2, 1] == True)
    check (triples_sum_to_zero [1, 2, 3, 7] == False)
    check (triples_sum_to_zero [1, 2, 5, 7] == False)
    check (triples_sum_to_zero [2, 4, -5, 3, 9, 7] == True)
    check (triples_sum_to_zero [1] == False)
    check (triples_sum_to_zero [1, 3, 5, -100] == False)
    check (triples_sum_to_zero [100, 3, 5, -100] == False)

------------------------------
Task ID: Haskell/41
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (car_race_collision 2 == 4)
    check (car_race_collision 3 == 9)
    check (car_race_collision 4 == 16)
    check (car_race_collision 8 == 64)
    check (car_race_collision 10 == 100)

------------------------------
Task ID: Haskell/42
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (incr_list [] == [])
    check (incr_list [3, 2, 1] == [4, 3, 2])
    check (incr_list [5, 2, 5, 2, 3, 3, 9, 0, 123] == [6, 3, 6, 3, 4, 4, 10, 1, 124])

------------------------------
Task ID: Haskell/43
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (pairs_sum_to_zero [1, 3, 5, 0] == False)
    check (pairs_sum_to_zero [1, 3, -2, 1] == False)
    check (pairs_sum_to_zero [1, 2, 3, 7] == False)
    check (pairs_sum_to_zero [2, 4, -5, 3, 5, 7] == True)
    check (pairs_sum_to_zero [1] == False)
    check (pairs_sum_to_zero [-3, 9, -1, 3, 2, 30] == True)
    check (pairs_sum_to_zero [-3, 9, -1, 3, 2, 31] == True)
    check (pairs_sum_to_zero [-3, 9, -1, 4, 2, 30] == False)
    check (pairs_sum_to_zero [-3, 9, -1, 4, 2, 31] == False)

------------------------------
Task ID: Haskell/44
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (change_base 8 3 == "22")
    check (change_base 9 3 == "100")
    check (change_base 234 2 == "11101010")
    check (change_base 16 2 == "10000")
    check (change_base 8 2 == "1000")
    check (change_base 7 2 == "111")
    check (change_base 2 3 == "2")
    check (change_base 3 4 == "3")
    check (change_base 4 5 == "4")
    check (change_base 5 6 == "5")
    check (change_base 6 7 == "6")
    check (change_base 7 8 == "7")

------------------------------
Task ID: Haskell/45
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (triangle_area 5 3 == 7.5)
    check (triangle_area 2 2 == 2.0)
    check (triangle_area 10 8 == 40.0)

------------------------------
Task ID: Haskell/46
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (fib4 5 == 4)
    check (fib4 8 == 28)
    check (fib4 10 == 104)
    check (fib4 12 == 386)

------------------------------
Task ID: Haskell/47
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (median [3, 1, 2, 4, 5] == 3)
    check (median [-10, 4, 6, 1000, 10, 20] == 8.0)
    check (median [5] == 5)
    check (median [6, 5] == 5.5)
    check (median [8, 1, 3, 9, 9, 2, 7] == 7)

------------------------------
Task ID: Haskell/48
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_palindrome "" == True)
    check (is_palindrome "aba" == True)
    check (is_palindrome "aaaaa" == True)
    check (is_palindrome "zbcd" == False)
    check (is_palindrome "xywyx" == True)
    check (is_palindrome "xywyz" == False)
    check (is_palindrome "xywzx" == False)

------------------------------
Task ID: Haskell/49
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (modp 3 5 == 3)
    check (modp 1101 101 == 2)
    check (modp 0 101 == 1)
    check (modp 3 11 == 8)
    check (modp 100 101 == 1)
    check (modp 30 5 == 4)
    check (modp 31 5 == 3)

------------------------------
Task ID: Haskell/50
Test:


-- Test suite

check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    let letters = ['a'..'z']
    forM_ [1..100] $ \_ -> do
        len <- randomRIO (10,20)
        str <- replicateM len (randomRIO ('a','z'))
        let encoded = encode_shift str
        check (decode_shift encoded == str)

------------------------------
Task ID: Haskell/51
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (remove_vowels "" == "")
    check (remove_vowels "abcdefghijklm" == "bcdfghjklm")
    check (remove_vowels "fedcba" == "fdcb")
    check (remove_vowels "eeeee" == "")
    check (remove_vowels "acBAA" == "cB")
    check (remove_vowels "EcBOO" == "cB")
    check (remove_vowels "ybcd" == "ybcd")

------------------------------
Task ID: Haskell/52
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (below_threshold [1,2,4,10] 100 == True)
    check (below_threshold [1,20,4,10] 5   == False)
    check (below_threshold [1,20,4,10] 21  == True)
    check (below_threshold [1,20,4,10] 22  == True)
    check (below_threshold [1,8,4,10]  11  == True)
    check (below_threshold [1,8,4,10]  10  == False)

------------------------------
Task ID: Haskell/53
Test:


-- Test suite

check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

 main :: IO ()
main = do
    check (add 0 1 == 1)
    check (add 1 0 == 1)
    check (add 2 3 == 5)
    check (add 5 7 == 12)
    check (add 7 5 == 12)
    forM_ [1..100] $ \_ -> do
        x <- randomRIO (0,1000)
        y <- randomRIO (0,1000)
        check (add x y == x + y)

------------------------------
Task ID: Haskell/54
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (same_chars "eabcdzzzz" "dddzzzzzzzddeddabc" == True)
    check (same_chars "abcd"      "dddddddabc"         == True)
    check (same_chars "dddddddabc" "abcd"              == True)
    check (same_chars "eabcd"     "dddddddabc"         == False)
    check (same_chars "abcd"      "dddddddabcf"        == False)
    check (same_chars "eabcdzzzz" "dddzzzzzzzddddabc"  == False)
    check (same_chars "aabb"      "aaccc"              == False)

------------------------------
Task ID: Haskell/55
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (fib 10 == 55)
    check (fib 1  == 1)
    check (fib 8  == 21)
    check (fib 11 == 89)
    check (fib 12 == 144)

------------------------------
Task ID: Haskell/56
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (correct_bracketing "<>"                       == True)
    check (correct_bracketing "<<><>>"                   == True)
    check (correct_bracketing "<><><<><>><>"            == True)
    check (correct_bracketing "<><><<<><><>><>><<><><<>>>" == True)
    check (correct_bracketing "<<<><>>>>"                == False)
    check (correct_bracketing "><<>"                     == False)
    check (correct_bracketing "<"                        == False)
    check (correct_bracketing "<<<<"                     == False)
    check (correct_bracketing ">"                        == False)
    check (correct_bracketing "<<>"                      == False)
    check (correct_bracketing "<><><<><>><>><<>"         == False)
    check (correct_bracketing "<><><<><>><>>><>"        == False)

------------------------------
Task ID: Haskell/57
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (monotonic [1,2,4,10]       == True)
    check (monotonic [1,2,4,20]       == True)
    check (monotonic [1,20,4,10]      == False)
    check (monotonic [4,1,0,-10]      == True)
    check (monotonic [4,1,1,0]        == True)
    check (monotonic [1,2,3,2,5,60]   == False)
    check (monotonic [1,2,3,4,5,60]   == True)
    check (monotonic [9,9,9,9]        == True)

------------------------------
Task ID: Haskell/58
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (common [1,4,3,34,653,2,5] [5,7,1,5,9,653,121] == [1,5,653])
    check (common [5,3,2,8]           [3,2]               == [2,3])
    check (common [4,3,2,8]           [3,2,4]             == [2,3,4])
    check (common [4,3,2,8]           []                  == [])

------------------------------
Task ID: Haskell/59
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (largest_prime_factor 15    == 5)
    check (largest_prime_factor 27    == 3)
    check (largest_prime_factor 63    == 7)
    check (largest_prime_factor 330   == 11)
    check (largest_prime_factor 13195 == 29)

------------------------------
Task ID: Haskell/60
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sum_to_n 1 == 1)
    check (sum_to_n 6 == 21)
    check (sum_to_n 11 == 66)
    check (sum_to_n 30 == 465)
    check (sum_to_n 100 == 5050)

------------------------------
Task ID: Haskell/61
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (correct_bracketing "()" == True)
    check (correct_bracketing "(()())" == True)
    check (correct_bracketing "()()(()())()" == True)
    check (correct_bracketing "()()((()()())())(()()(()))" == True)
    check (correct_bracketing "((()())))" == False)
    check (correct_bracketing ")(()" == False)
    check (correct_bracketing "(" == False)
    check (correct_bracketing "((((" == False)
    check (correct_bracketing ")" == False)
    check (correct_bracketing "(()" == False)
    check (correct_bracketing "()()(()())())(()" == False)
    check (correct_bracketing "()()(()())()))()" == False)

------------------------------
Task ID: Haskell/62
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (derivative [3, 1, 2, 4, 5] == [1, 4, 12, 20])
    check (derivative [1, 2, 3] == [2, 6])
    check (derivative [3, 2, 1] == [2, 2])
    check (derivative [3, 2, 1, 0, 4] == [2, 2, 0, 16])
    check (derivative [1] == [])

------------------------------
Task ID: Haskell/63
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (fibfib 2 == 1)
    check (fibfib 1 == 0)
    check (fibfib 5 == 4)
    check (fibfib 8 == 24)
    check (fibfib 10 == 81)
    check (fibfib 12 == 274)
    check (fibfib 14 == 927)

------------------------------
Task ID: Haskell/64
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (vowels_count "abcde" == 2)
    check (vowels_count "Alone" == 3)
    check (vowels_count "key" == 2)
    check (vowels_count "bye" == 1)
    check (vowels_count "keY" == 2)
    check (vowels_count "bYe" == 1)
    check (vowels_count "ACEDY" == 3)

------------------------------
Task ID: Haskell/65
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (circular_shift 100 2 == "001")
    check (circular_shift 12 2 == "12")
    check (circular_shift 97 8 == "79")
    check (circular_shift 12 1 == "21")
    check (circular_shift 11 101 == "11")

------------------------------
Task ID: Haskell/66
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (digitSum "" == 0)
    check (digitSum "abAB" == 131)
    check (digitSum "abcCd" == 67)
    check (digitSum "helloE" == 69)
    check (digitSum "woArBld" == 131)
    check (digitSum "aAaaaXa" == 153)
    check (digitSum " How are yOu?" == 151)
    check (digitSum "You arE Very Smart" == 327)

------------------------------
Task ID: Haskell/67
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (fruit_distribution "5 apples and 6 oranges" 19 == 8)
    check (fruit_distribution "5 apples and 6 oranges" 21 == 10)
    check (fruit_distribution "0 apples and 1 oranges" 3 == 2)
    check (fruit_distribution "1 apples and 0 oranges" 3 == 2)
    check (fruit_distribution "2 apples and 3 oranges" 100 == 95)
    check (fruit_distribution "2 apples and 3 oranges" 5 == 0)
    check (fruit_distribution "1 apples and 100 oranges" 120 == 19)

------------------------------
Task ID: Haskell/68
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (pluck [4, 2, 3] == [2, 1])
    check (pluck [1, 2, 3] == [2, 1])
    check (pluck [] == [])
    check (pluck [5, 0, 3, 0, 4, 2] == [0, 1])
    check (pluck [1, 2, 3, 0, 5, 3] == [0, 3])
    check (pluck [5, 4, 8, 4, 8] == [4, 1])
    check (pluck [7, 6, 7, 1] == [6, 1])
    check (pluck [7, 9, 7, 1] == [])

------------------------------
Task ID: Haskell/69
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    -- manually generated tests
    check (search [5, 5, 5, 5, 1] == 1)
    check (search [4, 1, 4, 1, 4, 4] == 4)
    check (search [3, 3] == -1)
    check (search [8, 8, 8, 8, 8, 8, 8, 8] == 8)
    check (search [2, 3, 3, 2, 2] == 2)
    -- automatically generated tests
    check (search [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1] == 1)
    check (search [3, 2, 8, 2] == 2)
    check (search [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10] == 1)
    check (search [8, 8, 3, 6, 5, 6, 4] == -1)
    check (search [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9] == 1)
    check (search [1, 9, 10, 1, 3] == 1)
    check (search [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10] == 5)
    check (search [1] == 1)
    check (search [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5] == 4)
    check (search [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10] == 2)
    check (search [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3] == 1)
    check (search [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4] == 4)
    check (search [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7] == 4)
    check (search [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1] == 2)
    check (search [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8] == -1)
    check (search [10] == -1)
    check (search [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2] == 2)
    check (search [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8] == 1)
    check (search [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6] == 1)
    check (search [3, 10, 10, 9, 2] == -1)

------------------------------
Task ID: Haskell/70
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (strange_sort_list [1, 2, 3, 4] == [1, 4, 2, 3])
    check (strange_sort_list [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7])
    check (strange_sort_list [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3])
    check (strange_sort_list [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7])
    check (strange_sort_list [5, 5, 5, 5] == [5, 5, 5, 5])
    check (strange_sort_list [] == [])
    check (strange_sort_list [1, 2, 3, 4, 5, 6, 7, 8] == [1, 8, 2, 7, 3, 6, 4, 5])
    check (strange_sort_list [0, 2, 2, 2, 5, 5, -5, -5] == [-5, 5, -5, 5, 0, 2, 2, 2])
    check (strange_sort_list [111111] == [111111])

------------------------------
Task ID: Haskell/71
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (triangle_area 3 4 5 == 6.00)
    check (triangle_area 1 2 10 == -1.0)
    check (abs (triangle_area 4 8 5 - 8.18) < 1e-6)
    check (abs (triangle_area 2 2 2 - 1.73) < 1e-6)
    check (triangle_area 1 2 3 == -1.0)
    check (abs (triangle_area 10 5 7 - 16.25) < 1e-6)
    check (triangle_area 2 6 3 == -1.0)
    check (abs (triangle_area 1 1 1 - 0.43) < 1e-6)
    check (triangle_area 2 2 10 == -1.0)

------------------------------
Task ID: Haskell/72
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (will_it_fly [3, 2, 3] 9 == True)
    check (will_it_fly [1, 2] 5 == False)
    check (will_it_fly [3] 5 == True)
    check (will_it_fly [3, 2, 3] 1 == False)
    check (will_it_fly [1, 2, 3] 6 == False)
    check (will_it_fly [5] 5 == True)

------------------------------
Task ID: Haskell/73
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (smallest_change [1, 2, 3, 5, 4, 7, 9, 6] == 4)
    check (smallest_change [1, 2, 3, 4, 3, 2, 2] == 1)
    check (smallest_change [1, 4, 2] == 1)
    check (smallest_change [1, 4, 4, 2] == 1)
    check (smallest_change [1, 2, 3, 2, 1] == 0)
    check (smallest_change [3, 1, 1, 3] == 0)
    check (smallest_change [1] == 0)
    check (smallest_change [0, 1] == 1)

------------------------------
Task ID: Haskell/74
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (total_match [] [] == [])
    check (total_match ["hi", "admin"] ["hi", "hi"] == ["hi", "hi"])
    check (total_match ["hi", "admin"] ["hi", "hi", "admin", "project"] == ["hi", "admin"])
    check (total_match ["4"] ["1", "2", "3", "4", "5"] == ["4"])
    check (total_match ["hi", "admin"] ["hI", "Hi"] == ["hI", "Hi"])
    check (total_match ["hi", "admin"] ["hI", "hi", "hi"] == ["hI", "hi", "hi"])
    check (total_match ["hi", "admin"] ["hI", "hi", "hii"] == ["hi", "admin"])
    check (total_match [] ["this"] == [])
    check (total_match ["this"] [] == [])

------------------------------
Task ID: Haskell/75
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_multiply_prime 5 == False)
    check (is_multiply_prime 30 == True)
    check (is_multiply_prime 8 == True)
    check (is_multiply_prime 10 == False)
    check (is_multiply_prime 125 == True)
    check (is_multiply_prime (3 * 5 * 7) == True)
    check (is_multiply_prime (3 * 6 * 7) == False)
    check (is_multiply_prime (9 * 9 * 9) == False)
    check (is_multiply_prime (11 * 9 * 9) == False)
    check (is_multiply_prime (11 * 13 * 7) == True)

------------------------------
Task ID: Haskell/76
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_simple_power 1 4 == True)
    check (is_simple_power 2 2 == True)
    check (is_simple_power 8 2 == True)
    check (is_simple_power 3 2 == False)
    check (is_simple_power 3 1 == False)
    check (is_simple_power 5 3 == False)
    check (is_simple_power 16 2 == True)
    check (is_simple_power 143214 16 == False)
    check (is_simple_power 4 2 == True)
    check (is_simple_power 9 3 == True)
    check (is_simple_power 16 4 == True)
    check (is_simple_power 24 2 == False)
    check (is_simple_power 128 4 == False)
    check (is_simple_power 12 6 == False)
    check (is_simple_power 1 1 == True)
    check (is_simple_power 1 12 == True)

------------------------------
Task ID: Haskell/77
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (iscube 1 == True)
    check (iscube 2 == False)
    check (iscube (-1) == True)
    check (iscube 64 == True)
    check (iscube 180 == False)
    check (iscube 1000 == True)
    check (iscube 0 == True)
    check (iscube 1729 == False)

------------------------------
Task ID: Haskell/78
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (hex_key "AB" == 1)
    check (hex_key "1077E" == 2)
    check (hex_key "ABED1A33" == 4)
    check (hex_key "2020" == 2)
    check (hex_key "123456789ABCDEF0" == 6)
    check (hex_key "112233445566778899AABBCCDDEEFF00" == 12)
    check (hex_key "" == 0)

------------------------------
Task ID: Haskell/79
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (decimal_to_binary 0 == "db0db")
    check (decimal_to_binary 32 == "db100000db")
    check (decimal_to_binary 103 == "db1100111db")
    check (decimal_to_binary 15 == "db1111db")

------------------------------
Task ID: Haskell/80
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_happy "a" == False)
    check (is_happy "aa" == False)
    check (is_happy "abcd" == True)
    check (is_happy "aabb" == False)
    check (is_happy "adb" == True)
    check (is_happy "xyy" == False)
    check (is_happy "iopaxpoi" == True)
    check (is_happy "iopaxioi" == False)

------------------------------
Task ID: Haskell/81
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (numerical_letter_grade [4.0, 3, 1.7, 2, 3.5] == ["A+", "B", "C-", "C", "A-"])
    check (numerical_letter_grade [1.2] == ["D+"])
    check (numerical_letter_grade [0.5] == ["D-"])
    check (numerical_letter_grade [0.0] == ["E"])
    check (numerical_letter_grade [1, 0.3, 1.5, 2.8, 3.3] == ["D", "D-", "C-", "B", "B+"])
    check (numerical_letter_grade [0, 0.7] == ["E", "D-"])

------------------------------
Task ID: Haskell/82
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (prime_length "Hello" == True)
    check (prime_length "abcdcba" == True)
    check (prime_length "kittens" == True)
    check (prime_length "orange" == False)
    check (prime_length "wow" == True)
    check (prime_length "world" == True)
    check (prime_length "MadaM" == True)
    check (prime_length "Wow" == True)
    check (prime_length "" == False)
    check (prime_length "HI" == True)
    check (prime_length "go" == True)
    check (prime_length "gogo" == False)
    check (prime_length "aaaaaaaaaaaaaaa" == False)
    check (prime_length "Madam" == True)
    check (prime_length "M" == False)
    check (prime_length "0" == False)

------------------------------
Task ID: Haskell/83
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (starts_one_ends 1 == 1)
    check (starts_one_ends 2 == 18)
    check (starts_one_ends 3 == 180)
    check (starts_one_ends 4 == 1800)
    check (starts_one_ends 5 == 18000)

------------------------------
Task ID: Haskell/84
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (solve 1000 == "1")
    check (solve 150 == "110")
    check (solve 147 == "1100")
    check (solve 333 == "1001")
    check (solve 963 == "10010")

------------------------------
Task ID: Haskell/85
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (add [4, 88] == 88)
    check (add [4, 5, 6, 7, 2, 122] == 122)
    check (add [4, 0, 6, 7] == 0)
    check (add [4, 4, 6, 8] == 12)

------------------------------
Task ID: Haskell/86
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (anti_shuffle "Hi" == "Hi")
    check (anti_shuffle "hello" == "ehllo")
    check (anti_shuffle "number" == "bemnru")
    check (anti_shuffle "abcd" == "abcd")
    check (anti_shuffle "Hello World!!!" == "Hello !!!Wdlor")
    check (anti_shuffle "" == "")
    check (anti_shuffle "Hi. My name is Mister Robot. How are you?" == ".Hi My aemn is Meirst .Rboot How aer ?ouy")

------------------------------
Task ID: Haskell/87
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (get_row [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]] 1 == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])
    check (get_row [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] 2 == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])
    check (get_row [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]] 1 == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])
    check (get_row [] 1 == [])
    check (get_row [[1]] 2 == [])
    check (get_row [[], [1], [1, 2, 3]] 3 == [(2, 2)])

------------------------------
Task ID: Haskell/88
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sort_array [] == [])
    check (sort_array [5] == [5])
    check (sort_array [2, 4, 3, 0, 1, 5] == [0, 1, 2, 3, 4, 5])
    check (sort_array [2, 4, 3, 0, 1, 5, 6] == [6, 5, 4, 3, 2, 1, 0])
    check (sort_array [2, 1] == [1, 2])
    check (sort_array [15, 42, 87, 32, 11, 0] == [0, 11, 15, 32, 42, 87])
    check (sort_array [21, 14, 23, 11] == [23, 21, 14, 11])

------------------------------
Task ID: Haskell/89
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (encrypt "hi" == "lm")
    check (encrypt "asdfghjkl" == "ewhjklnop")
    check (encrypt "gf" == "kj")
    check (encrypt "et" == "ix")
    check (encrypt "faewfawefaewg" == "jeiajeaijeiak")
    check (encrypt "hellomyfriend" == "lippsqcjvmirh")
    check (encrypt "dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh" == "hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl")
    check (encrypt "a" == "e")

------------------------------
Task ID: Haskell/90
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (next_smallest [1, 2, 3, 4, 5]       == Just 2)
    check (next_smallest [5, 1, 4, 3, 2]       == Just 2)
    check (next_smallest []                    == Nothing)
    check (next_smallest [1, 1]                == Nothing)
    check (next_smallest [1, 1, 1, 1, 0]       == Just 1)
    check (next_smallest [1, 1]                == Nothing)
    check (next_smallest [-35, 34, 12, -45]    == Just (-35))

------------------------------
Task ID: Haskell/91
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_bored "Hello world"                                                        == 0)
    check (is_bored "Is the sky blue?"                                                   == 0)
    check (is_bored "I love It !"                                                        == 1)
    check (is_bored "bIt"                                                               == 0)
    check (is_bored "I feel good today. I will be productive. will kill It"               == 2)
    check (is_bored "You and I are going for a walk"                                     == 0)

------------------------------
Task ID: Haskell/92
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (any_int 2    3   1   == True)
    check (any_int 2.5  2   3   == False)
    check (any_int 1.5  5   3.5 == False)
    check (any_int 2    6   2   == False)
    check (any_int 4    2   2   == True)
    check (any_int 2.2  2.2 2.2 == False)
    check (any_int (-4) 6   2   == True)
    check (any_int 2    1   1   == True)
    check (any_int 3    4   7   == True)
    check (any_int 3.0  4   7   == False)

------------------------------
Task ID: Haskell/93
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (encode "TEST"                       == "tgst")
    check (encode "Mudasir"                    == "mWDCSKR")
    check (encode "YES"                        == "ygs")
    check (encode "This is a message"          == "tHKS KS C MGSSCGG")
    check (encode "I DoNt KnOw WhAt tO WrItE"  == "k dQnT kNqW wHcT Tq wRkTg")

------------------------------
Task ID: Haskell/94
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (skjkasdkd [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3] == 10)
    check (skjkasdkd [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]             == 25)
    check (skjkasdkd [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]     == 13)
    check (skjkasdkd [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]                       == 11)
    check (skjkasdkd [0, 81, 12, 3, 1, 21]                                                    == 3)
    check (skjkasdkd [0, 8, 1, 2, 1, 7]                                                      == 7)
    check (skjkasdkd [8191]                                                                  == 19)
    check (skjkasdkd [8191, 123456, 127, 7]                                                  == 19)
    check (skjkasdkd [127, 97, 8192]                                                         == 10)

------------------------------
Task ID: Haskell/95
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (check_dict_case [("p","pineapple"), ("b","banana")]                                       == True)
    check (check_dict_case [("p","pineapple"), ("A","banana"), ("B","banana")]                     == False)
    check (check_dict_case [("p","pineapple"), ("5","banana"), ("a","apple")]                    == False)
    check (check_dict_case [("Name","John"), ("Age","36"), ("City","Houston")]                   == False)
    check (check_dict_case [("STATE","NC"), ("ZIP","12345")]                                         == True)
    check (check_dict_case [("fruit","Orange"), ("taste","Sweet")]                                    == True)
    check (check_dict_case []                                                                              == False)

------------------------------
Task ID: Haskell/96
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (count_up_to 5   == [2,3])
    check (count_up_to 6   == [2,3,5])
    check (count_up_to 7   == [2,3,5])
    check (count_up_to 10  == [2,3,5,7])
    check (count_up_to 0   == [])
    check (count_up_to 22  == [2,3,5,7,11,13,17,19])
    check (count_up_to 1   == [])
    check (count_up_to 18  == [2,3,5,7,11,13,17])
    check (count_up_to 47  == [2,3,5,7,11,13,17,19,23,29,31,37,41,43])
    check (count_up_to 101 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])

------------------------------
Task ID: Haskell/97
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (multiply 148   412  == 16)
    check (multiply 19    28   == 72)
    check (multiply 2020  1851 == 0)
    check (multiply 14   (-15) == 20)
    check (multiply 76    67   == 42)
    check (multiply 17    27   == 49)
    check (multiply 0     1    == 0)
    check (multiply 0     0    == 0)

------------------------------
Task ID: Haskell/98
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (count_upper "aBCdEf" == 1)
    check (count_upper "abcdefg"== 0)
    check (count_upper "dBBE"   == 0)
    check (count_upper "B"      == 0)
    check (count_upper "U"      == 1)
    check (count_upper ""       == 0)
    check (count_upper "EEEE"   == 2)

------------------------------
Task ID: Haskell/99
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (closest_integer "10"   == 10)
    check (closest_integer "14.5" == 15)
    check (closest_integer "-15.5"== -16)
    check (closest_integer "15.3" == 15)
    check (closest_integer "0"    == 0)

------------------------------
Task ID: Haskell/100
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (make_a_pile 3 == [3,5,7])
    check (make_a_pile 4 == [4,6,8,10])
    check (make_a_pile 5 == [5,7,9,11,13])
    check (make_a_pile 6 == [6,8,10,12,14,16])
    check (make_a_pile 8 == [8,10,12,14,16,18,20,22])
------------------------------
Task ID: Haskell/101
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (words_string "Hi, my name is John" == ["Hi","my","name","is","John"])
    check (words_string "One, two, three, four, five, six" == ["One","two","three","four","five","six"])
    check (words_string "Hi, my name" == ["Hi","my","name"])
    check (words_string "One,, two, three, four, five, six," == ["One","two","three","four","five","six"])
    check (words_string "" == [])
    check (words_string "ahmed     , gamal" == ["ahmed","gamal"])
------------------------------
Task ID: Haskell/102
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (choose_num 12 15 == 14)
    check (choose_num 13 12 == -1)
    check (choose_num 33 12354 == 12354)
    check (choose_num 5234 5233 == -1)
    check (choose_num 6 29 == 28)
    check (choose_num 27 10 == -1)
    check (choose_num 7 7 == -1)
    check (choose_num 546 546 == 546)
------------------------------
Task ID: Haskell/103
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (rounded_avg 1 5 == "0b11")
    check (rounded_avg 7 13 == "0b1010")
    check (rounded_avg 964 977 == "0b1111001010")
    check (rounded_avg 996 997 == "0b1111100100")
    check (rounded_avg 560 851 == "0b1011000010")
    check (rounded_avg 185 546 == "0b101101110")
    check (rounded_avg 362 496 == "0b110101101")
    check (rounded_avg 350 902 == "0b1001110010")
    check (rounded_avg 197 233 == "0b11010111")
    check (rounded_avg 7 5 == -1)
    check (rounded_avg 5 1 == -1)
    check (rounded_avg 5 5 == "0b101")
------------------------------
Task ID: Haskell/104
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (unique_digits [15,33,1422,1] == [1,15,33])
    check (unique_digits [152,323,1422,10] == [])
    check (unique_digits [12345,2033,111,151] == [111,151])
    check (unique_digits [135,103,31] == [31,135])
------------------------------
Task ID: Haskell/105
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (by_length [2,1,1,4,5,8,2,3] == ["Eight","Five","Four","Three","Two","Two","One","One"])
    check (by_length [] == [])
    check (by_length [1,-1,55] == ["One"])
    check (by_length [1,-1,3,2] == ["Three","Two","One"])
    check (by_length [9,4,8] == ["Nine","Eight","Four"])
------------------------------
Task ID: Haskell/106
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (f 5 == [1,2,6,24,15])
    check (f 7 == [1,2,6,24,15,720,28])
    check (f 1 == [1])
    check (f 3 == [1,2,6])
------------------------------
Task ID: Haskell/107
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (even_odd_palindrome 123 == (8,13))
    check (even_odd_palindrome 12 == (4,6))
    check (even_odd_palindrome 3 == (1,2))
    check (even_odd_palindrome 63 == (6,8))
    check (even_odd_palindrome 25 == (5,6))
    check (even_odd_palindrome 19 == (4,6))
    check (even_odd_palindrome 9 == (4,5))
    check (even_odd_palindrome 1 == (0,1))
------------------------------
Task ID: Haskell/108
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (count_nums [] == 0)
    check (count_nums [-1,-2,0] == 0)
    check (count_nums [1,1,2,-2,3,4,5] == 6)
    check (count_nums [1,6,9,-6,0,1,5] == 5)
    check (count_nums [1,100,98,-7,1,-1] == 4)
    check (count_nums [12,23,34,-45,-56,0] == 5)
    check (count_nums [0,1] == 1)
    check (count_nums [1] == 1)
------------------------------
Task ID: Haskell/109
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (move_one_ball [3,4,5,1,2] == True)
    check (move_one_ball [3,5,10,1,2] == True)
    check (move_one_ball [4,3,1,2] == False)
    check (move_one_ball [3,5,4,1,2] == False)
    check (move_one_ball [] == True)
------------------------------
Task ID: Haskell/110
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (exchange [1, 2, 3, 4] [1, 2, 3, 4] == "YES")
    check (exchange [1, 2, 3, 4] [1, 5, 3, 4] == "NO")
    check (exchange [1, 2, 3, 4] [2, 1, 4, 3] == "YES")
    check (exchange [5, 7, 3] [2, 6, 4] == "YES")
    check (exchange [5, 7, 3] [2, 6, 3] == "NO")
    check (exchange [3, 2, 6, 1, 8, 9] [3, 5, 5, 1, 1, 1] == "NO")
    check (exchange [100, 200] [200, 200] == "YES")

------------------------------
Task ID: Haskell/111
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (histogram "a b b a" == [('a',2),('b',2)])
    check (histogram "a b c a b" == [('a',2),('b',2)])
    check (histogram "a b c d g" == [('a',1),('b',1),('c',1),('d',1),('g',1)])
    check (histogram "r t g" == [('r',1),('t',1),('g',1)])
    check (histogram "b b b b a" == [('b',4)])
    check (histogram "r t g" == [('r',1),('t',1),('g',1)])
    check (histogram "" == [])
    check (histogram "a" == [('a',1)])

------------------------------
Task ID: Haskell/112
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (reverse_delete "abcde" "ae" == ("bcd",False))
    check (reverse_delete "abcdef" "b" == ("acdef",False))
    check (reverse_delete "abcdedcba" "ab" == ("cdedc",True))
    check (reverse_delete "dwik" "w" == ("dik",False))
    check (reverse_delete "a" "a" == ("",True))
    check (reverse_delete "abcdedcba" "" == ("abcdedcba",True))
    check (reverse_delete "abcdedcba" "v" == ("abcdedcba",True))
    check (reverse_delete "vabba" "v" == ("abba",True))
    check (reverse_delete "mamma" "mia" == ("",True))

------------------------------
Task ID: Haskell/113
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (odd_count ["1234567"] == ["the number of odd elements 4n the str4ng 4 of the 4nput."])
    check (odd_count ["3", "11111111"] == ["the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 8n the str8ng 8 of the 8nput."])
    check (odd_count ["271", "137", "314"] == ["the number of odd elements 2n the str2ng 2 of the 2nput.", "the number of odd elements 3n the str3ng 3 of the 3nput.", "the number of odd elements 2n the str2ng 2 of the 2nput."])
    check True

------------------------------
Task ID: Haskell/114
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (minSubArraySum [2, 3, 4, 1, 2, 4] == 1)
    check (minSubArraySum [-1, -2, -3] == -6)
    check (minSubArraySum [-1, -2, -3, 2, -10] == -14)
    check (minSubArraySum [-9999999999999999] == -9999999999999999)
    check (minSubArraySum [0, 10, 20, 1000000] == 0)
    check (minSubArraySum [-1, -2, -3, 10, -5] == -6)
    check (minSubArraySum [100, -1, -2, -3, 10, -5] == -6)
    check (minSubArraySum [10, 11, 13, 8, 3, 4] == 3)
    check (minSubArraySum [100, -33, 32, -1, 0, -2] == -33)
    check (minSubArraySum [-10] == -10)
    check (minSubArraySum [7] == 7)
    check (minSubArraySum [1, -1] == -1)

------------------------------
Task ID: Haskell/115
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (max_fill [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]] 1 == 6)
    check (max_fill [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]] 2 == 5)
    check (max_fill [[0, 0, 0], [0, 0, 0]] 5 == 0)
    check (max_fill [[1, 1, 1, 1], [1, 1, 1, 1]] 2 == 4)
    check (max_fill [[1, 1, 1, 1], [1, 1, 1, 1]] 9 == 2)

------------------------------
Task ID: Haskell/116
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sort_array [1, 5, 2, 3, 4] == [1, 2, 4, 3, 5])
    check (sort_array [-2, -3, -4, -5, -6] == [-4, -2, -6, -5, -3])
    check (sort_array [1, 0, 2, 3, 4] == [0, 1, 2, 4, 3])
    check (sort_array [] == [])
    check (sort_array [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4] == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])
    check (sort_array [3, 6, 44, 12, 32, 5] == [32, 3, 5, 6, 12, 44])
    check (sort_array [2, 4, 8, 16, 32] == [2, 4, 8, 16, 32])
    check (sort_array [2, 4, 8, 16, 32] == [2, 4, 8, 16, 32])

------------------------------
Task ID: Haskell/117
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (select_words "Mary had a little lamb" 4 == ["little"])
    check (select_words "Mary had a little lamb" 3 == ["Mary", "lamb"])
    check (select_words "simple white space" 2 == [])
    check (select_words "Hello world" 4 == ["world"])
    check (select_words "Uncle sam" 3 == ["Uncle"])
    check (select_words "" 4 == [])
    check (select_words "a b c d e f" 1 == ["b", "c", "d", "f"])

------------------------------
Task ID: Haskell/118
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (get_closest_vowel "yogurt" == "u")
    check (get_closest_vowel "full" == "u")
    check (get_closest_vowel "easy" == "")
    check (get_closest_vowel "eAsy" == "")
    check (get_closest_vowel "ali" == "")
    check (get_closest_vowel "bad" == "a")
    check (get_closest_vowel "most" == "o")
    check (get_closest_vowel "ab" == "")
    check (get_closest_vowel "ba" == "")
    check (get_closest_vowel "quick" == "")
    check (get_closest_vowel "anime" == "i")
    check (get_closest_vowel "Asia" == "")
    check (get_closest_vowel "Above" == "o")

------------------------------
Task ID: Haskell/119
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (match_parens ["()(", ")"] == "Yes")
    check (match_parens [")", ")"] == "No")
    check (match_parens ["(()(())", "())())"] == "No")
    check (match_parens [")())", "(()()("] == "Yes")
    check (match_parens ["(())))", "(()())(("] == "Yes")
    check (match_parens ["()", "())"] == "No")
    check (match_parens ["(()(", "()))()"] == "Yes")
    check (match_parens ["((( (?), placeholder"] == "No")
    check (match_parens [")(()", "(()("] == "No")
    check (match_parens [")(", ")("] == "No")
    check (match_parens ["(", ")"] == "Yes")
    check (match_parens [")", "("] == "Yes")

------------------------------
Task ID: Haskell/120
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (maximum [-3, -4, 5] 3 == [-4, -3, 5])
    check (maximum [4, -4, 4] 2 == [4, 4])
    check (maximum [-3, 2, 1, 2, -1, -2, 1] 1 == [2])
    check (maximum [123, -123, 20, 0, 1, 2, -3] 3 == [2, 20, 123])
    check (maximum [-123, 20, 0, 1, 2, -3] 4 == [0, 1, 2, 20])
    check (maximum [5, 15, 0, 3, -13, -8, 0] 7 == [-13, -8, 0, 0, 3, 5, 15])
    check (maximum [-1, 0, 2, 5, 3, -10] 2 == [3, 5])
    check (maximum [1, 0, 5, -7] 1 == [5])
    check (maximum [4, -4] 2 == [-4, 4])
    check (maximum [-10, 10] 2 == [-10, 10])
    check (maximum [1, 2, 3, -23, 243, -400, 0] 0 == [])

------------------------------
Task ID: Haskell/121
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (solution [5, 8, 7, 1] == 12)
    check (solution [3, 3, 3, 3, 3] == 9)
    check (solution [30, 13, 24, 321] == 0)
    check (solution [5, 9] == 5)
    check (solution [2, 4, 8] == 0)
    check (solution [30, 13, 23, 32] == 23)
    check (solution [3, 13, 2, 9] == 3)

------------------------------
Task ID: Haskell/122
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (add_elements [1, -2, -3, 41, 57, 76, 87, 88, 99] 3 == -4)
    check (add_elements [111, 121, 3, 4000, 5, 6] 2 == 0)
    check (add_elements [11, 21, 3, 90, 5, 6, 7, 8, 9] 4 == 125)
    check (add_elements [111, 21, 3, 4000, 5, 6, 7, 8, 9] 4 == 24)
    check (add_elements [1] 1 == 1)

------------------------------
Task ID: Haskell/123
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (get_odd_collatz 14 == [1, 5, 7, 11, 13, 17])
    check (get_odd_collatz 5 == [1, 5])
    check (get_odd_collatz 12 == [1, 3, 5])
    check (get_odd_collatz 1 == [1])

------------------------------
Task ID: Haskell/124
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (valid_date "03-11-2000" == True)
    check (valid_date "15-01-2012" == False)
    check (valid_date "04-0-2040" == False)
    check (valid_date "06-04-2020" == True)
    check (valid_date "01-01-2007" == True)
    check (valid_date "03-32-2011" == False)
    check (valid_date "" == False)
    check (valid_date "04-31-3000" == False)
    check (valid_date "06-06-2005" == True)
    check (valid_date "21-31-2000" == False)
    check (valid_date "04-12-2003" == True)
    check (valid_date "04122003" == False)
    check (valid_date "20030412" == False)
    check (valid_date "2003-04" == False)
    check (valid_date "2003-04-12" == False)
    check (valid_date "04-2003" == False)

------------------------------
Task ID: Haskell/125
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (split_words "Hello world!" == ["Hello", "world!"])
    check (split_words "Hello,world!" == ["Hello", "world!"])
    check (split_words "Hello world,!" == ["Hello", "world,!"])
    check (split_words "Hello,Hello,world !" == ["Hello,Hello,world", "!"])
    check (split_words "abcdef" == 3)
    check (split_words "aaabb" == 2)
    check (split_words "aaaBb" == 1)
    check (split_words "" == 0)

------------------------------
Task ID: Haskell/126
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_sorted [5] == True)
    check (is_sorted [1, 2, 3, 4, 5] == True)
    check (is_sorted [1, 3, 2, 4, 5] == False)
    check (is_sorted [1, 2, 3, 4, 5, 6] == True)
    check (is_sorted [1, 2, 3, 4, 5, 6, 7] == True)
    check (is_sorted [1, 3, 2, 4, 5, 6, 7] == False)
    check (is_sorted [] == True)
    check (is_sorted [1] == True)
    check (is_sorted [3, 2, 1] == False)
    check (is_sorted [1, 2, 2, 2, 3, 4] == False)
    check (is_sorted [1, 2, 3, 3, 3, 4] == False)
    check (is_sorted [1, 2, 2, 3, 3, 4] == True)
    check (is_sorted [1, 2, 3, 4] == True)

------------------------------
Task ID: Haskell/127
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (intersection (1, 2) (2, 3) == "NO")
    check (intersection (-1, 1) (0, 4) == "NO")
    check (intersection (-3, -1) (-5, 5) == "YES")
    check (intersection (-2, 2) (-4, 0) == "YES")
    check (intersection (-11, 2) (-1, -1) == "NO")
    check (intersection (1, 2) (3, 5) == "NO")
    check (intersection (1, 2) (1, 2) == "NO")
    check (intersection (-2, -2) (-3, -2) == "NO")

------------------------------
Task ID: Haskell/128
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check True
    check (prod_signs [1, 2, 2, -4] == -9)
    check (prod_signs [0, 1] == 0)
    check (prod_signs [1, 1, 1, 2, 3, -1, 1] == -10)
    check (prod_signs [] == Nothing)
    check (prod_signs [2, 4, 1, 2, -1, -1, 9] == 20)
    check (prod_signs [-1, 1, -1, 1] == 4)
    check (prod_signs [-1, 1, 1, 1] == -4)
    check (prod_signs [-1, 1, 1, 0] == 0)
    check True

------------------------------
Task ID: Haskell/129
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (minPath [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 3 == [1, 2, 1])
    check (minPath [[5, 9, 3], [4, 1, 6], [7, 8, 2]] 1 == [1])
    check (minPath [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] 4 == [1, 2, 1, 2])
    check (minPath [[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]] 7 == [1, 10, 1, 10, 1, 10, 1])
    check (minPath [[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]] 5 == [1, 7, 1, 7, 1])
    check (minPath [[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]] 9 == [1, 6, 1, 6, 1, 6, 1, 6, 1])
    check (minPath [[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]] 12 == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])
    check (minPath [[2, 7, 4], [3, 1, 5], [6, 8, 9]] 8 == [1, 3, 1, 3, 1, 3, 1, 3])
    check (minPath [[6, 1, 5], [3, 8, 9], [2, 7, 4]] 8 == [1, 5, 1, 5, 1, 5, 1, 5])
    check (minPath [[1, 2], [3, 4]] 10 == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
    check (minPath [[1, 3], [3, 2]] 10 == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])

------------------------------
Task ID: Haskell/130
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (tri 3 == [1, 3, 2.0, 8.0])
    check (tri 4 == [1, 3, 2.0, 8.0, 3.0])
    check (tri 5 == [1, 3, 2.0, 8.0, 3.0, 15.0])
    check (tri 6 == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])
    check (tri 7 == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])
    check (tri 8 == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])
    check (tri 9 == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])
    check (tri 20 == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0])
    check (tri 0 == [1])
    check (tri 1 == [1, 3])

------------------------------
Task ID: Haskell/131
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (digits 5 == 5)
    check (digits 54 == 5)
    check (digits 120 == 1)
    check (digits 5014 == 5)
    check (digits 98765 == 315)
    check (digits 5576543 == 2625)
    check (digits 2468 == 0)

------------------------------
Task ID: Haskell/132
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_nested "[[]]" == True)
    check (is_nested "[]]]]]]][[[[[]" == False)
    check (is_nested "[][]" == False)
    check (is_nested "[]" == False)
    check (is_nested "[[[[]]]]" == True)
    check (is_nested "[]]]]]]]]]" == False)
    check (is_nested "[][][[]]" == True)
    check (is_nested "[[]" == False)
    check (is_nested "[]]" == False)
    check (is_nested "[[]][[" == True)
    check (is_nested "[[][]]" == True)
    check (is_nested "" == False)
    check (is_nested "[[[[[[[[" == False)
    check (is_nested "]]]]]]]]" == False)

------------------------------
Task ID: Haskell/133
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sum_squares [1, 2, 3] == 14)
    check (sum_squares [1.0, 2, 3] == 14)
    check (sum_squares [1, 3, 5, 7] == 84)
    check (sum_squares [1.4, 4.2, 0] == 29)
    check (sum_squares [-2.4, 1, 1] == 6)
    check (sum_squares [100, 1, 15, 2] == 10230)
    check (sum_squares [10000, 10000] == 200000000)
    check (sum_squares [-1.4, 4.6, 6.3] == 75)
    check (sum_squares [-1.4, 17.9, 18.9, 19.9] == 1086)
    check (sum_squares [0] == 0)
    check (sum_squares [-1] == 1)
    check (sum_squares [-1, 1, 0] == 2)

------------------------------
Task ID: Haskell/134
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (check_if_last_char_is_a_letter "apple" == False)
    check (check_if_last_char_is_a_letter "apple pi e" == True)
    check (check_if_last_char_is_a_letter "eeeee" == False)
    check (check_if_last_char_is_a_letter "A" == True)
    check (check_if_last_char_is_a_letter "Pumpkin pie " == False)
    check (check_if_last_char_is_a_letter "Pumpkin pie 1" == False)
    check (check_if_last_char_is_a_letter "" == False)
    check (check_if_last_char_is_a_letter "eeeee e " == False)
    check (check_if_last_char_is_a_letter "apple pie" == False)
    check (check_if_last_char_is_a_letter "apple pi e " == False)

------------------------------
Task ID: Haskell/135
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (can_arrange [1, 2, 4, 3, 5] == 3)
    check (can_arrange [1, 2, 4, 5] == -1)
    check (can_arrange [1, 4, 2, 5, 6, 7, 8, 9, 10] == 2)
    check (can_arrange [4, 8, 5, 7, 3] == 4)
    check (can_arrange [] == -1)

------------------------------
Task ID: Haskell/136
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (largest_smallest_integers [2, 4, 1, 3, 5, 7] == (Nothing, Just 1))
    check (largest_smallest_integers [2, 4, 1, 3, 5, 7, 0] == (Nothing, Just 1))
    check (largest_smallest_integers [1, 3, 2, 4, 5, 6, -2] == (Just (-2), Just 1))
    check (largest_smallest_integers [4, 5, 3, 6, 2, 7, -7] == (Just (-7), Just 2))
    check (largest_smallest_integers [7, 3, 8, 4, 9, 2, 5, -9] == (Just (-9), Just 2))
    check (largest_smallest_integers [] == (Nothing, Nothing))
    check (largest_smallest_integers [0] == (Nothing, Nothing))
    check (largest_smallest_integers [-1, -3, -5, -6] == (Just (-1), Nothing))
    check (largest_smallest_integers [-1, -3, -5, -6, 0] == (Just (-1), Nothing))
    check (largest_smallest_integers [-6, -4, -4, -3, 1] == (Just (-3), Just 1))
    check (largest_smallest_integers [-6, -4, -4, -3, -100, 1] == (Just (-3), Just 1))

------------------------------
Task ID: Haskell/137
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (compare_one 1 2 == Just 2)
    check (compare_one 1 2.5 == Just 2.5)
    check (compare_one 2 3 == Just 3)
    check (compare_one 5 6 == Just 6)
    check (compare_one 1 "2,3" == Just "2,3")
    check (compare_one "5,1" "6" == Just "6")
    check (compare_one "1" "2" == Just "2")
    check (compare_one "1" 1 == Nothing)

------------------------------
Task ID: Haskell/138
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (is_equal_to_sum_even 4 == False)
    check (is_equal_to_sum_even 6 == False)
    check (is_equal_to_sum_even 8 == True)
    check (is_equal_to_sum_even 10 == True)
    check (is_equal_to_sum_even 11 == False)
    check (is_equal_to_sum_even 12 == True)
    check (is_equal_to_sum_even 13 == False)
    check (is_equal_to_sum_even 16 == True)

------------------------------
Task ID: Haskell/139
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (special_factorial 4 == 288)
    check (special_factorial 5 == 34560)
    check (special_factorial 7 == 125411328000)
    check (special_factorial 1 == 1)

------------------------------
Task ID: Haskell/140
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (fix_spaces "Example" == "Example")
    check (fix_spaces "Mudasir Hanif " == "Mudasir_Hanif_")
    check (fix_spaces "Yellow Yellow  Dirty  Fellow" == "Yellow_Yellow__Dirty__Fellow")
    check (fix_spaces "Exa   mple" == "Exa-mple")
    check (fix_spaces "   Exa 1 2 2 mple" == "-Exa_1_2_2_mple")

------------------------------
Task ID: Haskell/141
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (file_name_check "example.txt" == "Yes")
    check (file_name_check "1example.dll" == "No")
    check (file_name_check "s1sdf3.asd" == "No")
    check (file_name_check "K.dll" == "Yes")
    check (file_name_check "MY16FILE3.exe" == "Yes")
    check (file_name_check "His12FILE94.exe" == "No")
    check (file_name_check "_Y.txt" == "No")
    check (file_name_check "?aREYA.exe" == "No")
    check (file_name_check "/this_is_valid.dll" == "No")
    check (file_name_check "this_is_valid.wow" == "No")
    check (file_name_check "this_is_valid.txt" == "Yes")
    check (file_name_check "this_is_valid.txtexe" == "No")
    check (file_name_check "#this2_i4s_5valid.ten" == "No")
    check (file_name_check "@this1_is6_valid.exe" == "No")
    check (file_name_check "this_is_12valid.6exe4.txt" == "No")
    check (file_name_check "all.exe.txt" == "No")
    check (file_name_check "I563_No.exe" == "Yes")
    check (file_name_check "Is3youfault.txt" == "Yes")
    check (file_name_check "no_one#knows.dll" == "Yes")
    check (file_name_check "1I563_Yes3.exe" == "No")
    check (file_name_check "I563_Yes3.txtt" == "No")
    check (file_name_check "final..txt" == "No")
    check (file_name_check "final132" == "No")
    check (file_name_check ".txt" == "No")
    check (file_name_check "s." == "No")

------------------------------
Task ID: Haskell/142
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sum_squares [1, 2, 3] == 6)
    check (sum_squares [1, 4, 9] == 14)
    check (sum_squares [] == 0)
    check (sum_squares [1, 1, 1, 1, 1, 1, 1, 1, 1] == 9)
    check (sum_squares [-1, -1, -1, -1, -1, -1, -1, -1, -1] == -3)
    check (sum_squares [0] == 0)
    check (sum_squares [-1, -5, 2, -1, -5] == -126)
    check (sum_squares [-56, -99, 1, 0, -2] == 3030)
    check (sum_squares [-1, 0, 0, 0, 0, 0, 0, 0, -1] == 0)
    check (sum_squares [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37] == -14196)
    check (sum_squares [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10] == -1448)

------------------------------
Task ID: Haskell/143
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (words_in_sentence "This is a test" == "is")
    check (words_in_sentence "lets go for swimming" == "go for")
    check (words_in_sentence "there is no place available here" == "there is no place")
    check (words_in_sentence "Hi I am Hussein" == "Hi am Hussein")
    check (words_in_sentence "go for it" == "go for it")
    check (words_in_sentence "here" == "")
    check (words_in_sentence "here is" == "is")

------------------------------
Task ID: Haskell/144
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (simplify "1/5" "5/1" == True)
    check (simplify "1/6" "2/1" == False)
    check (simplify "5/1" "3/1" == True)
    check (simplify "7/10" "10/2" == False)
    check (simplify "2/10" "50/10" == True)
    check (simplify "7/2" "4/2" == True)
    check (simplify "11/6" "6/1" == True)
    check (simplify "2/3" "5/2" == False)
    check (simplify "5/2" "3/5" == False)
    check (simplify "2/4" "8/4" == True)
    check (simplify "2/4" "4/2" == True)
    check (simplify "1/5" "5/1" == True)
    check (simplify "1/5" "1/5" == False)

------------------------------
Task ID: Haskell/145
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (order_by_points [1, 11, -1, -11, -12] == [-1, -11, 1, -12, 11])
    check (order_by_points [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])
    check (order_by_points [] == [])
    check (order_by_points [1, -11, -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54])
    check (order_by_points [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])
    check (order_by_points [0, 6, 6, -76, -21, 23, 4] == [-76, -21, 0, 4, 23, 6, 6])
    check (True == True)

------------------------------
Task ID: Haskell/146
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (specialFilter [5, -2, 1, -5] == 0)
    check (specialFilter [15, -73, 14, -15] == 1)
    check (specialFilter [33, -2, -3, 45, 21, 109] == 2)
    check (specialFilter [43, -12, 93, 125, 121, 109] == 4)
    check (specialFilter [71, -2, -33, 75, 21, 19] == 3)
    check (specialFilter [1] == 0)
    check (specialFilter [] == 0)

------------------------------
Task ID: Haskell/147
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (get_max_triples 5 == 1)
    check (get_max_triples 6 == 4)
    check (get_max_triples 10 == 36)
    check (get_max_triples 100 == 53361)

------------------------------
Task ID: Haskell/148
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (bf "Jupiter" "Neptune" == ["Saturn", "Uranus"])
    check (bf "Earth" "Mercury" == ["Venus"])
    check (bf "Mercury" "Uranus" == ["Venus", "Earth", "Mars", "Jupiter", "Saturn"])
    check (bf "Neptune" "Venus" == ["Earth", "Mars", "Jupiter", "Saturn", "Uranus"])
    check (bf "Earth" "Earth" == [])
    check (bf "Mars" "Earth" == [])
    check (bf "Jupiter" "Makemake" == [])

------------------------------
Task ID: Haskell/149
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (sorted_list_sum ["aa", "a", "aaa"] == ["aa"])
    check (sorted_list_sum ["school", "AI", "asdf", "b"] == ["AI", "asdf", "school"])
    check (sorted_list_sum ["d", "b", "c", "a"] == [])
    check (sorted_list_sum ["d", "dcba", "abcd", "a"] == ["abcd", "dcba"])
    check (sorted_list_sum ["AI", "ai", "au"] == ["AI", "ai", "au"])
    check (sorted_list_sum ["a", "b", "b", "c", "c", "a"] == [])
    check (sorted_list_sum ["aaaa", "bbbb", "dd", "cc"] == ["cc", "dd", "aaaa", "bbbb"])

------------------------------
Task ID: Haskell/150
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (x_or_y 7 34 12 == 34)
    check (x_or_y 15 8 5 == 5)
    check (x_or_y 3 33 5212 == 33)
    check (x_or_y 1259 3 52 == 3)
    check (x_or_y 7919 (-1) 12 == -1)
    check (x_or_y 3609 1245 583 == 583)
    check (x_or_y 91 56 129 == 129)
    check (x_or_y 6 34 1234 == 1234)
    check (x_or_y 1 2 0 == 0)
    check (x_or_y 2 2 0 == 2)
------------------------------
Task ID: Haskell/151
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (double_the_difference [] == 0)
    check (double_the_difference [5,4] == 25)
    check (double_the_difference [0.1,0.2,0.3] == 0)
    check (double_the_difference [-10,-20,-30] == 0)
    check (double_the_difference [-1,-2,8] == 0)
    check (double_the_difference [0.2,3,5] == 34)
    let lst = [-99,-97 .. 99]
        oddSum = sum [i^2 | i <- lst, odd i, i > 0]
    check (double_the_difference lst == oddSum)
------------------------------
Task ID: Haskell/152
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (compare [1,2,3,4,5,1] [1,2,3,4,2,-2] == [0,0,0,0,3,3])
    check (compare [0,5,0,0,0,4] [4,1,1,0,0,-2] == [4,4,1,0,0,6])
    check (compare [1,2,3,4,5,1] [1,2,3,4,2,-2] == [0,0,0,0,3,3])
    check (compare [0,0,0,0,0,0] [0,0,0,0,0,0] == [0,0,0,0,0,0])
    check (compare [1,2,3] [-1,-2,-3] == [2,4,6])
    check (compare [1,2,3,5] [-1,2,3,4] == [2,0,0,1])
------------------------------
Task ID: Haskell/153
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (Strongest_Extension "Watashi" ["tEN","niNE","eIGHt8OKe"] == "Watashi.eIGHt8OKe")
    check (Strongest_Extension "Boku123" ["nani","NazeDa","YEs.WeCaNe","32145tggg"] == "Boku123.YEs.WeCaNe")
    check (Strongest_Extension "**YESIMHERE" ["t","eMptY","nothing","zeR00","NuLl**","123NoooneB321"] == "**YESIMHERE.NuLl**")
    check (Strongest_Extension "K" ["Ta","TAR","t234An","cosSo"] == "K.TAR")
    check (Strongest_Extension "__HAHA" ["Tab","123","781345","-*-"] == "__HAHA.123")
    check (Strongest_Extension "YameRore" ["HhAas","okIWILL123","WorkOut","Fails","-*-"] == "YameRore.okIWILL123")
    check (Strongest_Extension "finNNalLLly" ["Die","NowW","Wow","WoW"] == "finNNalLLly.WoW")
    check (Strongest_Extension "*" ["Bb","91245"] == "*.Bb")
    check (Strongest_Extension "Sp" ["671235","Bb"] == "Sp.671235")
------------------------------
Task ID: Haskell/154
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (cycpattern_check "xyzw" "xyw" == False)
    check (cycpattern_check "yello" "ell" == True)
    check (cycpattern_check "whattup" "ptut" == False)
    check (cycpattern_check "efef" "fee" == True)
    check (cycpattern_check "abab" "aabb" == False)
    check (cycpattern_check "winemtt" "tinem" == True)
------------------------------
Task ID: Haskell/155
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (even_odd_count 7 == (0,1))
    check (even_odd_count (-78) == (1,1))
    check (even_odd_count 3452 == (2,2))
    check (even_odd_count 346211 == (3,3))
    check (even_odd_count (-345821) == (3,3))
    check (even_odd_count (-2) == (1,0))
    check (even_odd_count (-45347) == (2,3))
    check (even_odd_count 0 == (1,0))
------------------------------
Task ID: Haskell/156
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (int_to_mini_roman 19 == "xix")
    check (int_to_mini_roman 152 == "clii")
    check (int_to_mini_roman 251 == "ccli")
    check (int_to_mini_roman 426 == "cdxxvi")
    check (int_to_mini_roman 500 == "d")
    check (int_to_mini_roman 1 == "i")
    check (int_to_mini_roman 4 == "iv")
    check (int_to_mini_roman 43 == "xliii")
    check (int_to_mini_roman 90 == "xc")
    check (int_to_mini_roman 94 == "xciv")
    check (int_to_mini_roman 532 == "dxxxii")
    check (int_to_mini_roman 900 == "cm")
    check (int_to_mini_roman 994 == "cmxciv")
    check (int_to_mini_roman 1000 == "m")
------------------------------
Task ID: Haskell/157
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (right_angle_triangle 3 4 5 == True)
    check (right_angle_triangle 1 2 3 == False)
    check (right_angle_triangle 10 6 8 == True)
    check (right_angle_triangle 2 2 2 == False)
    check (right_angle_triangle 7 24 25 == True)
    check (right_angle_triangle 10 5 7 == False)
    check (right_angle_triangle 5 12 13 == True)
    check (right_angle_triangle 15 8 17 == True)
    check (right_angle_triangle 48 55 73 == True)
    check (right_angle_triangle 1 1 1 == False)
    check (right_angle_triangle 2 2 10 == False)
------------------------------
Task ID: Haskell/158
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (find_max ["name","of","string"] == "string")
    check (find_max ["name","enam","game"] == "enam")
    check (find_max ["aaaaaaa","bb","cc"] == "aaaaaaa")
    check (find_max ["abc","cba"] == "abc")
    check (find_max ["play","this","game","of","footbott"] == "footbott")
    check (find_max ["we","are","gonna","rock"] == "gonna")
    check (find_max ["we","are","a","mad","nation"] == "nation")
    check (find_max ["this","is","a","prrk"] == "this")
    check (find_max ["b"] == "b")
    check (find_max ["play","play","play"] == "play")
------------------------------
Task ID: Haskell/159
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (eat 5 6 10 == [11,4])
    check (eat 4 8 9 == [12,1])
    check (eat 1 10 10 == [11,0])
    check (eat 2 11 5 == [7,0])
    check (eat 4 5 7 == [9,2])
    check (eat 4 5 1 == [5,0])
------------------------------
Task ID: Haskell/160
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (do_algebra ["**","*","+"] [2,3,4,5] == 37)
    check (do_algebra ["+","*","-"] [2,3,4,5] == 9)
    check (do_algebra ["//","*"] [7,3,4] == 8)
------------------------------
Task ID: Haskell/161
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (solve "AsDf" == "aSdF")
    check (solve "1234" == "4321")
    check (solve "ab" == "AB")
    check (solve "#a@C" == "#A@c")
    check (solve "#AsdfW^45" == "#aSDFw^45")
    check (solve "#6@2" == "2@6#")
    check (solve "#$a^D" == "#$A^d")
    check (solve "#ccc" == "#CCC")
------------------------------
Task ID: Haskell/162
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (string_to_md5 "Hello world" == Just "3e25960a79dbc69b674cd4ec67a72c62")
    check (string_to_md5 "" == Nothing)
    check (string_to_md5 "A B C" == Just "0ef78513b0cb8cef12743f5aeb35f888")
    check (string_to_md5 "password" == Just "5f4dcc3b5aa765d61d8327deb882cf99")
------------------------------
Task ID: Haskell/163
Test:


-- Test suite
check :: Bool -> IO ()
check True  = return ()
check False = error "Test failed"

main :: IO ()
main = do
    check (generate_integers 2 10 == [2,4,6,8])
    check (generate_integers 10 2 == [2,4,6,8])
    check (generate_integers 132 2 == [2,4,6,8])
    check (generate_integers 17 89 == [])
------------------------------
