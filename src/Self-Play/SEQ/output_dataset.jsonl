{"id": "4d61a897c0f86467f5c504a62a5f7282", "input": "You are given a list of `n` tasks, each represented as a tuple `(start, end)`, indicating the start and end times of the task. The tasks are sorted by their start times. Your goal is to determine the maximum number of non-overlapping tasks that can be selected. Two tasks are considered non-overlapping if the start time of one task is greater than or equal to the end time of the other.\n\n**Input:**\n- An integer `n` representing the number of tasks.\n- A list of `n` tuples, where each tuple `(start, end)` represents the start and end times of a task.\n\n**Output:**\n- An integer representing the maximum number of non-overlapping tasks that can be selected.\n\n**Constraints:**\n- `1 <= n <= 10^5`\n- `0 <= start < end <= 10^9`\n\n**Sample Input:**\n```\n3\n1 3\n2 5\n4 6\n```\n\n**Sample Output:**\n```\n2\n```", "output": "```python\ndef max_non_overlapping_tasks(tasks):\n    \"\"\"\n    Returns the maximum number of non-overlapping tasks that can be selected from a list of tasks.\n    \n    :param tasks: List of tuples, where each tuple (start, end) represents the start and end times of a task.\n    :return: Integer representing the maximum number of non-overlapping tasks.\n    \"\"\"\n    if not tasks:\n        return 0\n\n    count = 1\n    last_end = tasks[0][1]\n\n    for i in range(1, len(tasks)):\n        current_start, current_end = tasks[i]\n        if current_start >= last_end:\n            count += 1\n            last_end = current_end\n\n    return count\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by correctly implementing a function to find the maximum number of non-overlapping tasks from a sorted list of tasks.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It efficiently iterates through the tasks and selects non-overlapping tasks based on their start and end times.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases, including an empty list of tasks, tasks with the same start and end times, and tasks that are completely non-overlapping.\"}}", "unit_tests": "[\"\\nassert max_non_overlapping_tasks([(1, 3), (2, 4), (3, 5)]) == 2\\n\", \"\\nassert max_non_overlapping_tasks([(1, 2), (3, 4), (5, 6)]) == 3\\n\", \"\\nassert max_non_overlapping_tasks([(1, 5), (2, 3), (4, 6)]) == 2\\n\", \"\\nassert max_non_overlapping_tasks([(1, 3), (4, 6), (7, 9), (10, 12)]) == 4\\n\", \"\\nassert max_non_overlapping_tasks([(1, 2)]) == 1\\n\", \"\\nassert max_non_overlapping_tasks([]) == 0\\n\", \"\\nassert max_non_overlapping_tasks([(1, 10), (10, 20), (20, 30)]) == 3\\n\", \"\\nassert max_non_overlapping_tasks([(1, 2), (2, 3), (3, 4), (4, 5)]) == 4\\n\", \"\\nassert max_non_overlapping_tasks([(1, 100), (50, 150), (100, 200)]) == 2\\n\", \"\\nassert max_non_overlapping_tasks([(1, 2), (1, 3), (1, 4)]) == 1\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "bb50ad7bafcd795247a70ecbd7b93512", "input": "You are given a string `expression` consisting of characters including parentheses `()`, square brackets `[]`, and curly braces `{}`. Your task is to determine if the brackets in the expression are balanced. A string with balanced brackets means that each opening bracket has a corresponding closing bracket of the same type and they are correctly nested.\n\n**Input:**\n- A single string `expression` (1 \u2264 |expression| \u2264 10^3) containing characters from the set `{(), [], {}}` and possibly other non-bracket characters.\n\n**Output:**\n- Return `True` if the brackets in the expression are balanced, otherwise return `False`.\n\n**Sample Input:**\n```\n\"()\"\n\"([])\"\n\"{[()]}\"\n\"{[(])}\"\n\"([)]\"\n\"((()))\"\n\"(()\"\n```\n\n**Sample Output:**\n```\nTrue\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\n```", "output": "```python\ndef is_balanced_brackets(expression):\n    \"\"\"\n    Checks if all the brackets in the given expression are balanced.\n    \n    :param expression: A string containing characters including parentheses, square brackets, and curly braces.\n    :return: True if the brackets are balanced, False otherwise.\n    \"\"\"\n    stack = []\n    bracket_map = {')': '(', ']': '[', '}': '{'}\n    \n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n    \n    return not stack\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by checking if all types of brackets in the expression are balanced and returning the correct boolean value.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It uses a stack to keep track of opening brackets and checks for matching closing brackets efficiently.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including expressions with no brackets, only opening brackets, only closing brackets, and mixed characters with non-bracket characters being ignored.\"}}", "unit_tests": "[\"\\nassert is_balanced_brackets(\\\"()\\\") == True\\n\", \"\\nassert is_balanced_brackets(\\\"([])\\\") == True\\n\", \"\\nassert is_balanced_brackets(\\\"{[()]}\\\") == True\\n\", \"\\nassert is_balanced_brackets(\\\"{[(])}\\\") == False\\n\", \"\\nassert is_balanced_brackets(\\\"([)]\\\") == False\\n\", \"\\nassert is_balanced_brackets(\\\"((()))\\\") == True\\n\", \"\\nassert is_balanced_brackets(\\\"(()\\\") == False\\n\", \"\\nassert is_balanced_brackets(\\\"\\\") == True\\n\", \"\\nassert is_balanced_brackets(\\\"{[}]\\\") == False\\n\", \"\\nassert is_balanced_brackets(\\\"a(b)c[d]{e}\\\") == True\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "8d0437dda41d2a6e554810be6d598c4a", "input": "You are given a string `text` consisting of lowercase letters and spaces. Your task is to implement a function `count_words` that returns a dictionary with the frequency of each word in the string, excluding common stop words: 'the', 'and', 'a', 'an', 'in', 'on', 'at', 'by', 'for', and 'with'. Assume that the input string is preprocessed to contain only lowercase letters and spaces.\n\n**Sample Input:**\n```\n\"the quick brown fox jumps over the lazy dog\"\n```\n\n**Sample Output:**\n```\n{'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}\n```", "output": "```python\ndef count_words(text):\n    \"\"\"\n    Returns a dictionary with the frequency of each word in the input string,\n    excluding common stop words.\n\n    :param text: A string consisting of lowercase letters and spaces.\n    :return: A dictionary with words as keys and their frequencies as values.\n    \"\"\"\n    # List of stop words to ignore\n    stop_words = {'the', 'and', 'a', 'an', 'in', 'on', 'at', 'by', 'for', 'with'}\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Dictionary to store the frequency of each word\n    word_count = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # If the word is not a stop word\n        if word not in stop_words:\n            # Increment the word count\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    \n    return word_count\n\n# Test the function with the given example\ntext = \"the quick brown fox jumps over the lazy dog\"\nprint(count_words(text))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all the specified requirements. It takes a string input, returns a dictionary with word frequencies, and ignores the specified stop words.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The function correctly splits the text into words, checks if each word is a stop word, and updates the word count dictionary accordingly.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles most edge cases, such as empty strings and strings with only stop words, by returning an empty dictionary. However, it does not handle punctuation or mixed case input, which are not specified in the requirements but could be considered for robustness.\"}}", "unit_tests": "[\"\\nassert count_words(\\\"the quick brown fox jumps over the lazy dog\\\") == {'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}\\n\", \"\\nassert count_words(\\\"a quick brown fox jumps over the lazy dog\\\") == {'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}\\n\", \"\\nassert count_words(\\\"the the the the\\\") == {}\\n\", \"\\nassert count_words(\\\"hello world hello\\\") == {'hello': 2, 'world': 1}\\n\", \"\\nassert count_words(\\\"with the and for in on at by\\\") == {}\\n\", \"\\nassert count_words(\\\"python is great and python is fun\\\") == {'python': 2, 'is': 2, 'great': 1, 'fun': 1}\\n\", \"\\nassert count_words(\\\"this is a test\\\") == {'this': 1, 'test': 1}\\n\", \"\\nassert count_words(\\\"an example with some stop words\\\") == {'example': 1, 'with': 1, 'some': 1, 'stop': 1, 'words': 1}\\n\", \"\\nassert count_words(\\\"one two three four five six seven eight nine ten\\\") == {'one': 1, 'two': 1, 'three': 1, 'four': 1, 'five': 1, 'six': 1, 'seven': 1, 'eight': 1, 'nine': 1, 'ten': 1}\\n\", \"\\nassert count_words(\\\"\\\") == {}\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"pass\", \"pass\"]", "average_test_score": "0.8"}
{"id": "f130bdca2b8134c4fabb4e8dd5e3becc", "input": "You are given a nested list structure containing integers and other nested lists. Your task is to write a recursive function named `flatten_list` that takes this nested list as input and returns a new list with all the integers in a flat structure. The order of elements in the output list should be the same as their order in the original nested list.\n\n**Sample Input:**\n```\n[1, [2, [3, 4], 5], 6, [7, 8]]\n```\n\n**Sample Output:**\n```\n[1, 2, 3, 4, 5, 6, 7, 8]\n```", "output": "```python\ndef flatten_list(nested_list):\n    \"\"\"\n    Recursively flattens a nested list of integers.\n\n    :param nested_list: List of integers and/or nested lists of integers.\n    :return: A flat list containing all integers from the nested list.\n    \"\"\"\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\n# Example usage:\nnested_list_example = [1, [2, [3, 4], 5], 6, [7, 8]]\nprint(flatten_list(nested_list_example))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement of flattening a nested list using recursion and returns a new list with all elements in a flat structure.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently handles the task of flattening the list. It correctly checks if an element is a list and recursively flattens it, otherwise, it appends the element to the flat list.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles most edge cases such as empty lists and lists with no nested elements. However, it does not explicitly handle cases like non-list inputs or deeply nested structures that could lead to a recursion limit error, though these are less common edge cases.\"}}", "unit_tests": "[\"\\nassert flatten_list([1, [2, [3, 4], 5], 6, [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\\n\", \"\\nassert flatten_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert flatten_list([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert flatten_list([[[[1]]]]) == [1]\\n\", \"\\nassert flatten_list([]) == []\\n\", \"\\nassert flatten_list([[], [], []]) == []\\n\", \"\\nassert flatten_list([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert flatten_list([1, [2, 3], [4, [5, 6]], 7]) == [1, 2, 3, 4, 5, 6, 7]\\n\", \"\\nassert flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n\", \"\\nassert flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, []]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.8"}
{"id": "a5af5b8267c4fb797b4f9cdf2bf7fe04", "input": "You are given a list of integers `numbers`. Your task is to implement a function `find_mode` that determines the mode of the list, which is the element that appears most frequently. In the event of a tie, where multiple elements share the highest frequency, return the smallest of these elements. If the list is empty, the function should return `None`.\n\n**Input:**\n- A list of integers `numbers` (0 \u2264 len(numbers) \u2264 10^5), where each integer is in the range [-10^9, 10^9].\n\n**Output:**\n- An integer representing the mode of the list, or `None` if the list is empty.\n\n**Sample Input 1:**\n```\n[1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]\n```\n\n**Sample Output 1:**\n```\n4\n```\n\n**Sample Input 2:**\n```\n[6, 6, 7, 7, 8]\n```\n\n**Sample Output 2:**\n```\n6\n```\n\n**Sample Input 3:**\n```\n[]\n```\n\n**Sample Output 3:**\n```\nNone\n```", "output": "```python\ndef find_mode(numbers):\n    \"\"\"\n    Returns the mode of the list of integers. If there is a tie, returns the smallest element among them.\n    Returns None if the list is empty.\n    \n    :param numbers: List of integers\n    :return: Integer or None\n    \"\"\"\n    if not numbers:\n        return None\n    \n    frequency = {}\n    for num in numbers:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    max_freq = max(frequency.values())\n    modes = [num for num, freq in frequency.items() if freq == max_freq]\n    \n    return min(modes)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all the specified requirements: it returns the mode of the list, handles ties by returning the smallest element, and returns None for an empty list.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly calculates the frequency of each number, identifies the maximum frequency, and selects the smallest number among those with the maximum frequency.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including an empty list, ties in frequency, and lists with all unique elements.\"}}", "unit_tests": "[\"\\nassert find_mode([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]) == 4\\n\", \"\\nassert find_mode([1, 1, 2, 2, 3, 3]) == 1\\n\", \"\\nassert find_mode([7, 7, 7, 8, 8, 9]) == 7\\n\", \"\\nassert find_mode([10, 20, 20, 10, 30]) == 10\\n\", \"\\nassert find_mode([5, 5, 5, 5, 5]) == 5\\n\", \"\\nassert find_mode([]) == None\\n\", \"\\nassert find_mode([1]) == 1\\n\", \"\\nassert find_mode([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 5\\n\", \"\\nassert find_mode([100, 200, 300, 100, 200, 300]) == 100\\n\", \"\\nassert find_mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "e7ca4436b5c004b2c07534b50b1e4c83", "input": "You are tasked with implementing a function named `factorial` that calculates the factorial of a non-negative integer `n`. The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. By definition, the factorial of 0 is 1. Your function should raise a `ValueError` if a negative integer is provided as input.\n\n**Input:**\n- A single integer `n` (0 \u2264 n \u2264 20).\n\n**Output:**\n- An integer representing the factorial of `n`.\n\n**Sample Input:**\n```\n0\n5\n```\n\n**Sample Output:**\n```\n1\n120\n```", "output": "```python\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a non-negative integer n.\n    \n    Parameters:\n    n (int): A non-negative integer whose factorial is to be computed.\n    \n    Returns:\n    int: The factorial of the given integer n.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Example Usage:\n# print(factorial(0))  # Output: 1\n# print(factorial(5))  # Output: 120\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by computing the factorial of a non-negative integer using a loop and handling the edge case when n is 0.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly calculates the factorial for non-negative integers and raises an error for negative inputs.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The function comprehensively handles the edge case when n is 0 by returning 1, which is the correct factorial value for 0. It also handles negative inputs by raising an appropriate error.\"}}", "unit_tests": "[\"\\nassert factorial(0) == 1\\n\", \"\\nassert factorial(1) == 1\\n\", \"\\nassert factorial(2) == 2\\n\", \"\\nassert factorial(3) == 6\\n\", \"\\nassert factorial(4) == 24\\n\", \"\\nassert factorial(5) == 120\\n\", \"\\nassert factorial(6) == 720\\n\", \"\\nassert factorial(10) == 3628800\\n\", \"\\nassert factorial(12) == 479001600\\n\", \"\\nassert factorial(15) == 1307674368000\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "036b336a0426080e8abbfd30efbd9937", "input": "You are tasked with implementing a `BankAccount` class in Python that simulates basic bank account operations. The class should support the following functionalities:\n\n- **Initialization**: The account balance should start at zero.\n- **Deposit**: Add a specified amount to the account balance. Only positive amounts should be accepted.\n- **Withdraw**: Subtract a specified amount from the account balance. Withdrawals should not exceed the current balance.\n- **Check Balance**: Return the current balance of the account.\n\nYour implementation should ensure that the account balance is never negative due to invalid withdrawals.\n\n**Sample Input/Output**:\n- Initialize a `BankAccount` object.\n- Deposit 100.\n- Withdraw 50.\n- Check balance (Expected output: 50).\n- Withdraw 60 (No change in balance, as it exceeds the current balance).\n- Check balance (Expected output: 50).", "output": "```python\nclass BankAccount:\n    def __init__(self):\n        \"\"\"\n        Initializes a new bank account with a balance of zero.\n        \"\"\"\n        self.balance = 0\n\n    def deposit(self, amount):\n        \"\"\"\n        Adds a specified amount to the account balance if the amount is positive.\n        \n        :param amount: The amount to deposit.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n\n    def withdraw(self, amount):\n        \"\"\"\n        Subtracts a specified amount from the account balance if the amount is positive and does not exceed the current balance.\n        \n        :param amount: The amount to withdraw.\n        \"\"\"\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n\n    def check_balance(self):\n        \"\"\"\n        Returns the current balance of the account.\n        \n        :return: The current balance.\n        \"\"\"\n        return self.balance\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by implementing the BankAccount class with methods to deposit, withdraw, and check the balance, and initializes the balance to zero.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The deposit method correctly adds positive amounts to the balance, and the withdraw method ensures that withdrawals do not exceed the current balance.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as not allowing negative deposits and not allowing withdrawals that exceed the balance. However, it does not handle the case where the withdrawal amount is exactly zero, which could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert BankAccount().check_balance() == 0\\n\", \"\\nassert BankAccount().deposit(100) is None\\n\", \"\\nassert BankAccount().withdraw(100) is None\\n\", \"\\naccount = BankAccount(); account.deposit(100); assert account.check_balance() == 100\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(50); assert account.check_balance() == 50\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(150); assert account.check_balance() == 100\\n\", \"\\naccount = BankAccount(); account.deposit(-100); assert account.check_balance() == 0\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(-50); assert account.check_balance() == 100\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(0); assert account.check_balance() == 100\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(100); assert account.check_balance() == 0\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "5d5954895418a80191cee671a990eea5", "input": "You are given a string `text` and a list of integers `positions`. Your task is to implement a function `remove_chars_at_positions` that removes characters from `text` at the indices specified in `positions`. The function should return the modified string. Assume that all positions in the list are valid indices within the string and that the list may contain duplicate indices, but only one character should be removed per index.\n\n**Input:**\n- A string `text` (1 \u2264 |text| \u2264 10^5)\n- A list of integers `positions` (0 \u2264 |positions| \u2264 10^5), where each element is a valid index in `text`\n\n**Output:**\n- A string with characters removed at the specified positions.\n\n**Sample Input:**\n```\ntext = \"hello world\"\npositions = [0, 5, 10]\n```\n\n**Sample Output:**\n```\n\"ello orld\"\n```", "output": "```python\ndef remove_chars_at_positions(text, positions):\n    \"\"\"\n    Removes characters from the string at the specified positions.\n\n    :param text: The original string from which characters will be removed.\n    :param positions: A list of integer positions indicating which characters to remove.\n    :return: A new string with the specified characters removed.\n    \"\"\"\n    positions_set = set(positions)\n    return ''.join(char for idx, char in enumerate(text) if idx not in positions_set)\n\n# Example usage\ntext = \"hello world\"\npositions = [0, 5, 10]\nprint(remove_chars_at_positions(text, positions))  # Output: \"ello orld\"\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by removing characters from the string at the specified positions and returning the resulting string.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It uses a set for positions to achieve O(1) average time complexity for membership checks, and constructs the result string efficiently using a generator expression.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as empty positions list, positions out of bounds, and duplicate positions. However, it does not explicitly handle negative indices, which could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert remove_chars_at_positions(\\\"hello world\\\", [0, 5, 10]) == \\\"ello orld\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"abcdef\\\", [1, 3, 5]) == \\\"ace\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"abcdef\\\", []) == \\\"abcdef\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"abcdef\\\", [0, 1, 2, 3, 4, 5]) == \\\"\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"abcdef\\\", [6]) == \\\"abcdef\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"abcdef\\\", [-1]) == \\\"abcdef\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"\\\", [0]) == \\\"\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"a\\\", [0]) == \\\"\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"a\\\", [1]) == \\\"a\\\"\\n\", \"\\nassert remove_chars_at_positions(\\\"hello world\\\", [2, 4, 6, 8]) == \\\"hl olrld\\\"\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\"]", "average_test_score": "0.8"}
{"id": "d68222fe95725f75ccfd2848c0e0b65e", "input": "You are tasked with implementing a function `generate_report` that processes a list of sales data. Each sale is represented as a dictionary with keys `product`, `quantity`, and `price`. Your function should compute and return a string summarizing the total quantity sold and the total revenue generated from these sales.\n\n**Input:**\n- A list of dictionaries, where each dictionary contains:\n  - `product`: A string representing the product name.\n  - `quantity`: An integer representing the quantity of the product sold.\n  - `price`: A float representing the price per unit of the product.\n\n**Output:**\n- A string in the format: `\"Total Quantity Sold: X, Total Revenue: $Y\"`, where `X` is the total quantity sold and `Y` is the total revenue.\n\n**Sample Input:**\n```python\n[{\"product\": \"Laptop\", \"quantity\": 2, \"price\": 800}, {\"product\": \"Smartphone\", \"quantity\": 5, \"price\": 300}]\n```\n\n**Sample Output:**\n```\n\"Total Quantity Sold: 7, Total Revenue: $5100\"\n```", "output": "```python\ndef generate_report(sales):\n    \"\"\"\n    Generates a report summarizing the total quantity sold and total revenue from a list of sales data.\n\n    Parameters:\n    sales (list of dict): A list where each dictionary contains 'product', 'quantity', and 'price' keys.\n\n    Returns:\n    str: A string summarizing the total quantity sold and total revenue.\n    \"\"\"\n    total_quantity = 0\n    total_revenue = 0\n\n    for sale in sales:\n        total_quantity += sale['quantity']\n        total_revenue += sale['quantity'] * sale['price']\n\n    return f\"Total Quantity Sold: {total_quantity}, Total Revenue: ${total_revenue}\"\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements by calculating the total quantity sold and the total revenue from a list of sales dictionaries.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently calculates the total quantity and revenue based on the provided sales data.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The solution does not handle edge cases such as empty sales list, missing keys in dictionaries, non-numeric values for quantity and price, or negative values for these fields.\"}}", "unit_tests": "[\"\\nassert generate_report([{\\\"product\\\": \\\"Laptop\\\", \\\"quantity\\\": 2, \\\"price\\\": 800}, {\\\"product\\\": \\\"Smartphone\\\", \\\"quantity\\\": 5, \\\"price\\\": 300}]) == \\\"Total Quantity Sold: 7, Total Revenue: $5100\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Book\\\", \\\"quantity\\\": 10, \\\"price\\\": 15}]) == \\\"Total Quantity Sold: 10, Total Revenue: $150\\\"\\n\", \"\\nassert generate_report([]) == \\\"Total Quantity Sold: 0, Total Revenue: $0\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Pen\\\", \\\"quantity\\\": 100, \\\"price\\\": 0.5}]) == \\\"Total Quantity Sold: 100, Total Revenue: $50.0\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Tablet\\\", \\\"quantity\\\": 3, \\\"price\\\": 250}, {\\\"product\\\": \\\"Monitor\\\", \\\"quantity\\\": 2, \\\"price\\\": 150}]) == \\\"Total Quantity Sold: 5, Total Revenue: $1150\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Coffee\\\", \\\"quantity\\\": 50, \\\"price\\\": 2}, {\\\"product\\\": \\\"Tea\\\", \\\"quantity\\\": 30, \\\"price\\\": 1.5}]) == \\\"Total Quantity Sold: 80, Total Revenue: $145.0\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Desk\\\", \\\"quantity\\\": 1, \\\"price\\\": 1000}, {\\\"product\\\": \\\"Chair\\\", \\\"quantity\\\": 4, \\\"price\\\": 200}]) == \\\"Total Quantity Sold: 5, Total Revenue: $2200\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Bike\\\", \\\"quantity\\\": 2, \\\"price\\\": 500}, {\\\"product\\\": \\\"Car\\\", \\\"quantity\\\": 1, \\\"price\\\": 15000}]) == \\\"Total Quantity Sold: 3, Total Revenue: $15500\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Shoes\\\", \\\"quantity\\\": 10, \\\"price\\\": 50}, {\\\"product\\\": \\\"Hat\\\", \\\"quantity\\\": 20, \\\"price\\\": 25}]) == \\\"Total Quantity Sold: 30, Total Revenue: $1000\\\"\\n\", \"\\nassert generate_report([{\\\"product\\\": \\\"Guitar\\\", \\\"quantity\\\": 0, \\\"price\\\": 300}, {\\\"product\\\": \\\"Drums\\\", \\\"quantity\\\": 1, \\\"price\\\": 500}]) == \\\"Total Quantity Sold: 1, Total Revenue: $500\\\"\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"fail\", \"fail\", \"pass\", \"pass\"]", "average_test_score": "0.6"}
{"id": "02a46544965ba9c5e362bc16f41a8f0b", "input": "You are given two sorted lists of integers, `list1` and `list2`. Your task is to merge these two lists into a single sorted list. You must not use any built-in sorting functions or similar utilities. \n\n**Input:**\n- Two sorted lists of integers, `list1` and `list2`.\n\n**Output:**\n- A single sorted list containing all elements from `list1` and `list2`.\n\n**Sample Input:**\n- `list1 = [1, 3, 5, 7]`\n- `list2 = [2, 4, 6, 8]`\n\n**Sample Output:**\n- `[1, 2, 3, 4, 5, 6, 7, 8]`", "output": "```python\ndef merge_sorted_lists(list1, list2):\n    \"\"\"\n    Merges two sorted lists into a single sorted list without using built-in sorting functions.\n    \n    Parameters:\n    list1 (list): The first sorted list of integers.\n    list2 (list): The second sorted list of integers.\n    \n    Returns:\n    list: A merged sorted list containing all elements from list1 and list2.\n    \"\"\"\n    i, j = 0, 0\n    merged_list = []\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list\n\n# Test the function with the given example\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\nprint(merge_sorted_lists(list1, list2))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement of merging two sorted lists into a single sorted list without using built-in sorting functions.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic used to merge the lists is correct and consistently handles the merging of two sorted lists.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles cases where one list is exhausted before the other, but it does not explicitly handle cases where one or both lists are empty. However, the current implementation would still work correctly for these cases.\"}}", "unit_tests": "[\"\\nassert merge_sorted_lists([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\\n\", \"\\nassert merge_sorted_lists([], []) == []\\n\", \"\\nassert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]\\n\", \"\\nassert merge_sorted_lists([], [1, 2, 3]) == [1, 2, 3]\\n\", \"\\nassert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\\n\", \"\\nassert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]\\n\", \"\\nassert merge_sorted_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\\n\", \"\\nassert merge_sorted_lists([10, 20, 30], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]\\n\", \"\\nassert merge_sorted_lists([-1, 0, 1], [-2, -1, 0]) == [-2, -1, -1, 0, 0, 1]\\n\", \"\\nassert merge_sorted_lists([1], [2]) == [1, 2]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "1154e0f34a735b07c3e3685d8b7ae497", "input": "You are given a string `s` consisting of lowercase English letters. Your task is to generate all unique permutations of the string `s`. The permutations should be returned as a sorted list of strings.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 8).\n\n**Output:**\n- A sorted list of unique permutations of the string `s`.\n\n**Sample Input:**\n```\naab\n```\n\n**Sample Output:**\n```\n['aab', 'aba', 'baa']\n```", "output": "```python\nfrom itertools import permutations\n\ndef string_permutations(input_string):\n    \"\"\"\n    Generate all unique permutations of the input string and return them as a sorted list.\n\n    :param input_string: A string for which permutations are to be generated.\n    :return: A sorted list of unique permutations of the input string.\n    \"\"\"\n    perm = set(permutations(input_string))\n    result = sorted([''.join(p) for p in perm])\n    return result\n\n# Example usage:\ninput_str = \"aab\"\nprint(string_permutations(input_str))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function generates all possible permutations of the input string and removes duplicates. However, it sorts each permutation tuple and the final list of strings, which is not necessary based on the requirements.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic is mostly correct as it uses the permutations function from itertools and removes duplicates using a set. However, the sorting of each permutation tuple and the final list is unnecessary and could be considered a minor issue.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the case of repeated characters by using a set to remove duplicates. However, it does not explicitly handle other edge cases such as an empty string or non-string input, which could be considered minor gaps.\"}}", "unit_tests": "[\"\\nassert string_permutations(\\\"aab\\\") == [\\\"aab\\\", \\\"aba\\\", \\\"baa\\\"]\\n\", \"\\nassert string_permutations(\\\"abc\\\") == [\\\"abc\\\", \\\"acb\\\", \\\"bac\\\", \\\"bca\\\", \\\"cab\\\", \\\"cba\\\"]\\n\", \"\\nassert string_permutations(\\\"a\\\") == [\\\"a\\\"]\\n\", \"\\nassert string_permutations(\\\"\\\") == []\\n\", \"\\nassert string_permutations(\\\"aaa\\\") == [\\\"aaa\\\"]\\n\", \"\\nassert string_permutations(\\\"ab\\\") == [\\\"ab\\\", \\\"ba\\\"]\\n\", \"\\nassert string_permutations(\\\"aabb\\\") == [\\\"aabb\\\", \\\"abab\\\", \\\"abba\\\", \\\"baab\\\", \\\"baba\\\", \\\"bbaa\\\"]\\n\", \"\\nassert string_permutations(\\\"123\\\") == [\\\"123\\\", \\\"132\\\", \\\"213\\\", \\\"231\\\", \\\"312\\\", \\\"321\\\"]\\n\", \"\\nassert string_permutations(\\\"!@#\\\") == [\\\"!@#\\\", \\\"!#@#\\\", \\\"@!#\\\", \\\"@#@!\\\", \\\"#!@\\\", \\\"#@!\\\"]\\n\", \"\\nassert string_permutations(\\\"zzz\\\") == [\\\"zzz\\\"]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\"]", "average_test_score": "0.8"}
{"id": "c4502018d0a1cfc4c223b32de24f46ec", "input": "You are given a list of integers. Your task is to write a Python function that returns the second largest unique integer in the list. If the list contains fewer than two unique integers, the function should return `None`.\n\n**Sample Input:**\n```\n[1, 2, 3, 4, 5]\n```\n\n**Sample Output:**\n```\n4\n```\n\n**Sample Input:**\n```\n[5, 5, 5, 5]\n```\n\n**Sample Output:**\n```\nNone\n```", "output": "```python\ndef second_largest(numbers):\n    \"\"\"\n    Returns the second largest unique integer in the list.\n    If there are fewer than two unique integers, returns None.\n    \n    :param numbers: List of integers\n    :return: Second largest unique integer or None\n    \"\"\"\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.remove(max(unique_numbers))\n    return max(unique_numbers)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by returning the second largest integer in the list or None if there are less than two unique integers.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly identifies and handles the case where there are fewer than two unique integers and accurately finds the second largest integer.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases, including lists with all identical elements, lists with two identical elements and one different element, and lists with fewer than two elements.\"}}", "unit_tests": "[\"\\nassert second_largest([1, 2, 3, 4, 5]) == 4\\n\", \"\\nassert second_largest([5, 5, 5, 5]) == None\\n\", \"\\nassert second_largest([10]) == None\\n\", \"\\nassert second_largest([1, 1, 2, 2, 3, 3]) == 2\\n\", \"\\nassert second_largest([100, 90]) == 90\\n\", \"\\nassert second_largest([-1, -2, -3, -4]) == -2\\n\", \"\\nassert second_largest([0, 0, 0, 1]) == 0\\n\", \"\\nassert second_largest([10, 20, 20, 10, 30]) == 20\\n\", \"\\nassert second_largest([1, 2]) == 1\\n\", \"\\nassert second_largest([7, 7, 8, 8, 9, 9]) == 8\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "00acda4b1b72a3101fcce09b61a3d4a0", "input": "You are given a DNA sequence consisting of the nucleotides A, T, C, and G. Your task is to compute the GC content of the sequence, which is defined as the percentage of nucleotides that are either guanine (G) or cytosine (C). Your program should output the GC content rounded to two decimal places.\n\n**Input:**\n- A single string representing the DNA sequence. The string will only contain the characters 'A', 'T', 'C', and 'G'. The length of the string will be between 1 and 1000 characters.\n\n**Output:**\n- A single floating-point number representing the GC content of the sequence, rounded to two decimal places.\n\n**Sample Input:**\n```\nAGCTATAG\n```\n\n**Sample Output:**\n```\n37.50\n```", "output": "```python\ndef calculate_gc_content(dna_sequence):\n    \"\"\"\n    Calculate the GC content of the DNA sequence.\n    \n    Parameters:\n    dna_sequence (str): A string containing a sequence of DNA bases.\n    \n    Returns:\n    float: The GC content of the DNA sequence as a percentage, rounded to two decimal places.\n    \"\"\"\n    if not dna_sequence:\n        return 0.0\n    \n    total_bases = len(dna_sequence)\n    gc_count = dna_sequence.count('G') + dna_sequence.count('C')\n    gc_content = (gc_count / total_bases) * 100\n    \n    return round(gc_content, 2)\n\n# Example usage:\ndna_sequence = \"AGCTATAG\"\ngc_content = calculate_gc_content(dna_sequence)\nprint(f\"{gc_content:.2f}\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by calculating the GC content of a DNA sequence and handling an empty string case.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently calculates the GC content as a percentage of the total bases.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the edge case of an empty string by returning 0.0, but it does not handle invalid characters in the DNA sequence.\"}}", "unit_tests": "[\"\\nassert calculate_gc_content(\\\"AGCTATAG\\\") == 37.5\\n\", \"\\nassert calculate_gc_content(\\\"GCGCGCGC\\\") == 100.0\\n\", \"\\nassert calculate_gc_content(\\\"ATATATAT\\\") == 0.0\\n\", \"\\nassert calculate_gc_content(\\\"GCATGCAT\\\") == 50.0\\n\", \"\\nassert calculate_gc_content(\\\"\\\") == 0.0\\n\", \"\\nassert calculate_gc_content(\\\"A\\\") == 0.0\\n\", \"\\nassert calculate_gc_content(\\\"G\\\") == 100.0\\n\", \"\\nassert calculate_gc_content(\\\"ACGTACGT\\\") == 25.0\\n\", \"\\nassert calculate_gc_content(\\\"CCGGAAGGTT\\\") == 60.0\\n\", \"\\nassert calculate_gc_content(\\\"TACGCGTACG\\\") == 50.0\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"fail\"]", "average_test_score": "0.8"}
{"id": "525b7e9a6f47f858ae46e6ab81393ede", "input": "You are given an array `nums` of `n-1` distinct integers in the range `[1, n]`. Your task is to find the single missing number in the array. The array does not contain any duplicates.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the length of the array plus one.\n- The second line contains `n-1` space-separated integers representing the array `nums`.\n\n**Output:**\n- Print the missing number.\n\n**Sample Input:**\n```\n6\n1 2 4 5 6\n```\n\n**Sample Output:**\n```\n3\n```", "output": "```python\ndef find_missing_number(nums):\n    \"\"\"\n    Finds the missing number in the range [1, n] from the given list of n-1 distinct integers.\n\n    :param nums: List[int] - A list of n-1 distinct integers in the range [1, n]\n    :return: int - The missing number in the range [1, n]\n    \"\"\"\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n\n# Example usage:\ninput_list = [1, 2, 4, 5, 6]\nmissing_number = find_missing_number(input_list)\nprint(missing_number)  # Output: 3\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement by correctly identifying the missing number in the range from 1 to the length of the list plus one.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It uses the formula for the sum of the first n natural numbers to find the missing number efficiently.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles typical cases well, but it does not explicitly handle cases where the input list might be empty or contain duplicates, which are not part of the problem statement but could be considered edge cases.\"}}", "unit_tests": "[\"\\nassert find_missing_number([1, 2, 4, 5, 6]) == 3\\n\", \"\\nassert find_missing_number([1, 3, 4, 5]) == 2\\n\", \"\\nassert find_missing_number([2, 3, 4, 5, 6]) == 1\\n\", \"\\nassert find_missing_number([1, 2, 3, 4, 5, 7]) == 6\\n\", \"\\nassert find_missing_number([1]) == 2\\n\", \"\\nassert find_missing_number([2]) == 1\\n\", \"\\nassert find_missing_number([]) == 1\\n\", \"\\nassert find_missing_number([1, 2, 3, 5]) == 4\\n\", \"\\nassert find_missing_number([1, 2, 3, 4, 6]) == 5\\n\", \"\\nassert find_missing_number([5, 2, 3, 1]) == 4\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "928152392e53a5dbbed2230c78afceb0", "input": "You are tasked with implementing a Python class named `Car` that encapsulates the properties of a car. The class should have the following attributes:\n- `make`: A string representing the manufacturer of the car.\n- `model`: A string representing the model of the car.\n- `year`: An integer representing the year the car was manufactured.\n\nAdditionally, the class should include a method `description()` that returns a formatted string detailing the car's information in the format `\"make model (year)\"`.\n\n**Sample Input:**\n```python\ncar = Car(\"Toyota\", \"Camry\", 2021)\n```\n\n**Sample Output:**\n```\nToyota Camry (2021)\n```", "output": "```python\nclass Car:\n    def __init__(self, make, model, year):\n        \"\"\"\n        Initializes a new Car instance with the specified make, model, and year.\n\n        :param make: A string representing the manufacturer of the car.\n        :param model: A string representing the model of the car.\n        :param year: An integer representing the year the car was manufactured.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def description(self):\n        \"\"\"\n        Returns a formatted string with the car's information.\n\n        :return: A string in the format \"make model (year)\".\n        \"\"\"\n        return f\"{self.make} {self.model} ({self.year})\"\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by defining the Car class with the required attributes (make, model, year) and the description method that returns the formatted string as specified.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The class and method definitions are accurate and the string formatting in the description method works as intended.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"Minimal consideration of unusual inputs. The solution does not handle cases where the inputs might be None, empty strings, or non-integer values for the year.\"}}", "unit_tests": "[\"\\nassert Car(\\\"Toyota\\\", \\\"Camry\\\", 2021).description() == \\\"Toyota Camry (2021)\\\"\\n\", \"\\nassert Car(\\\"Honda\\\", \\\"Civic\\\", 2020).description() == \\\"Honda Civic (2020)\\\"\\n\", \"\\nassert Car(\\\"Ford\\\", \\\"Mustang\\\", 1969).description() == \\\"Ford Mustang (1969)\\\"\\n\", \"\\nassert Car(\\\"Chevrolet\\\", \\\"Corvette\\\", 2023).description() == \\\"Chevrolet Corvette (2023)\\\"\\n\", \"\\nassert Car(\\\"Tesla\\\", \\\"Model S\\\", 2022).description() == \\\"Tesla Model S (2022)\\\"\\n\", \"\\nassert Car(\\\"BMW\\\", \\\"M3\\\", 2018).description() == \\\"BMW M3 (2018)\\\"\\n\", \"\\nassert Car(\\\"Audi\\\", \\\"R8\\\", 2019).description() == \\\"Audi R8 (2019)\\\"\\n\", \"\\nassert Car(\\\"Lamborghini\\\", \\\"Aventador\\\", 2021).description() == \\\"Lamborghini Aventador (2021)\\\"\\n\", \"\\nassert Car(\\\"Porsche\\\", \\\"911\\\", 2020).description() == \\\"Porsche 911 (2020)\\\"\\n\", \"\\nassert Car(\\\"Ferrari\\\", \\\"488\\\", 2019).description() == \\\"Ferrari 488 (2019)\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "3cec10777fa85f323b978edb64abef31", "input": "You are given a string `text` consisting of words separated by spaces and punctuation. Your task is to implement a function `find_most_frequent_word(text)` that returns the most frequently occurring word in the text. If there are multiple words with the same highest frequency, return the first one encountered in the text. Words are defined as sequences of alphabetic characters and should be treated in a case-insensitive manner.\n\n**Input:**\n- A single string `text` (1 \u2264 |text| \u2264 10^5).\n\n**Output:**\n- A single string representing the most frequently occurring word.\n\n**Sample Input:**\n```\n\"This is a test. This test is only a test.\"\n```\n\n**Sample Output:**\n```\ntest\n```", "output": "```python\ndef find_most_frequent_word(text):\n    \"\"\"\n    Finds the most frequently occurring word in the given text.\n    \n    Parameters:\n    text (str): The input text containing words separated by spaces and punctuation.\n    \n    Returns:\n    str: The most frequently occurring word in the text.\n    \"\"\"\n    from collections import Counter\n    import re\n    \n    words = re.findall(r'\\b[a-zA-Z]+\\b', text.lower())\n    word_counts = Counter(words)\n    most_frequent_word, _ = word_counts.most_common(1)[0]\n    \n    return most_frequent_word\n\n# Test input\ntext = \"This is a test. This test is only a test.\"\n# Expected output: \"test\"\nprint(find_most_frequent_word(text))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all specified requirements. It considers only alphabetic characters, ignores case differences, and returns the first most frequently occurring word in case of ties.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It uses regex to filter words and Counter to find the most frequent word efficiently.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases such as punctuation, case insensitivity, and ties. However, it does not explicitly handle non-string inputs or extremely large texts, which could be considered edge cases in some contexts.\"}}", "unit_tests": "[\"\\nassert find_most_frequent_word(\\\"This is a test. This test is only a test.\\\") == \\\"test\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"Hello world! Hello everyone.\\\") == \\\"hello\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"One fish two fish red fish blue fish.\\\") == \\\"fish\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"To be or not to be, that is the question.\\\") == \\\"to\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"A quick brown fox jumps over the lazy dog.\\\") == \\\"a\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"Python python PYTHON pyThOn.\\\") == \\\"python\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"Unique words only here.\\\") == \\\"unique\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"\\\") == \\\"\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"123 456 789 123 456 789 123\\\") == \\\"\\\"\\n\", \"\\nassert find_most_frequent_word(\\\"Repeat repeat repeat repeat.\\\") == \\\"repeat\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"pass\"]", "average_test_score": "0.8"}
{"id": "71875b86bdc4cf13c8c2f6a9db078fc9", "input": "You are given a function `process_user_data(data)` that processes user information stored in a dictionary. The function should return a formatted string with the user's name and age. However, the function must handle various edge cases gracefully. Specifically, it should manage scenarios where the input is not a dictionary, when required keys ('name' and 'age') are missing, and when the values associated with these keys are of incorrect types or invalid (e.g., an empty string for 'name' or a non-integer for 'age'). In such cases, the function should return a meaningful error message.\n\n**Sample Input and Output:**\n- Input: `\"not a dictionary\"`  \n  Output: `\"Provided data is not a dictionary.\"`\n- Input: `{'name': '', 'age': 30}`  \n  Output: `\"The 'name' value should be a non-empty string.\"`\n- Input: `{'name': 'John', 'age': 'invalid'}`  \n  Output: `\"The 'age' value should be an integer.\"`\n- Input: `{'name': 'Alice'}`  \n  Output: `\"Missing 'age' key in dictionary.\"`\n- Input: `{'age': 25}`  \n  Output: `\"Missing 'name' key in dictionary.\"`\n- Input: `{'name': 'Bob', 'age': 23}`  \n  Output: `\"Name: Bob, Age: 23\"`", "output": "```python\ndef process_user_data(data):\n    \"\"\"\n    Processes user data to return a formatted string with the user's name and age.\n    Handles various edge cases including invalid data types, missing keys, and invalid values.\n    \n    Parameters:\n    data (dict): A dictionary containing user information with keys 'name' and 'age'.\n    \n    Returns:\n    str: A formatted string with user details or an error message.\n    \"\"\"\n    try:\n        if not isinstance(data, dict):\n            raise TypeError(\"Provided data is not a dictionary.\")\n        \n        name = data.get('name')\n        age = data.get('age')\n        if name is None:\n            raise KeyError(\"Missing 'name' key in dictionary.\")\n        if age is None:\n            raise KeyError(\"Missing 'age' key in dictionary.\")\n        \n        if not isinstance(name, str) or not name.strip():\n            raise ValueError(\"The 'name' value should be a non-empty string.\")\n        if not isinstance(age, int):\n            raise ValueError(\"The 'age' value should be an integer.\")\n\n        return f\"Name: {name}, Age: {age}\"\n    except (TypeError, ValueError, KeyError) as e:\n        return str(e)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by handling empty strings, missing keys, and invalid data types, and provides meaningful error messages.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It checks for the correct data type, handles missing keys, and validates the data types of the values associated with the keys.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including empty strings, missing keys, and invalid data types, ensuring robustness.\"}}", "unit_tests": "[\"\\nassert process_user_data(\\\"not a dictionary\\\") == \\\"Provided data is not a dictionary.\\\"\\n\", \"\\nassert process_user_data({'name': '', 'age': 30}) == \\\"The 'name' value should be a non-empty string.\\\"\\n\", \"\\nassert process_user_data({'name': 'John', 'age': 'invalid'}) == \\\"The 'age' value should be an integer.\\\"\\n\", \"\\nassert process_user_data({'name': 'Alice'}) == \\\"Missing 'age' key in dictionary.\\\"\\n\", \"\\nassert process_user_data({'age': 25}) == \\\"Missing 'name' key in dictionary.\\\"\\n\", \"\\nassert process_user_data({'name': 'Bob', 'age': 23}) == \\\"Name: Bob, Age: 23\\\"\\n\", \"\\nassert process_user_data({}) == \\\"Missing 'name' key in dictionary.\\\"\\n\", \"\\nassert process_user_data({'name': '   ', 'age': 25}) == \\\"The 'name' value should be a non-empty string.\\\"\\n\", \"\\nassert process_user_data({'name': 'Charlie', 'age': -5}) == \\\"Name: Charlie, Age: -5\\\"\\n\", \"\\nassert process_user_data({'name': 'Delta', 'age': 0}) == \\\"Name: Delta, Age: 0\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.7"}
{"id": "d0e196f16eacd6424bea53a06cf04561", "input": "You are given a dictionary `grades` where each key is a string representing a course name and each value is an integer representing the grade received in that course. Your task is to implement a function `calculate_average_grade` that computes the average grade of the student. The result should be rounded to two decimal places. If the dictionary is empty, the function should return `0.0`.\n\n**Sample Input:**\n```python\n{'Math': 85, 'Science': 90, 'History': 78}\n```\n\n**Sample Output:**\n```\n84.33\n```", "output": "```python\ndef calculate_average_grade(grades):\n    \"\"\"\n    Calculate the average grade from a dictionary of grades.\n\n    Parameters:\n    grades (dict): A dictionary where keys are course names and values are grades.\n\n    Returns:\n    float: The average grade rounded to two decimal places.\n    \"\"\"\n    if not grades:\n        return 0.0\n    total = sum(grades.values())\n    average = total / len(grades)\n    return round(average, 2)\n\n# Example usage:\ngrades = {'Math': 85, 'Science': 90, 'History': 78}\naverage_grade = calculate_average_grade(grades)\nprint(average_grade)  # Output: 84.33\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by calculating the average grade from a dictionary of grades and rounding the result to two decimal places.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. It handles the calculation of the sum of grades, divides by the number of courses, and rounds the result appropriately.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the edge case of an empty dictionary by returning 0.0, which is a reasonable approach to avoid division by zero. However, it does not handle other potential edge cases such as non-numeric grades or negative grades, which could be considered depending on the context.\"}}", "unit_tests": "[\"\\nassert calculate_average_grade({'Math': 85, 'Science': 90, 'History': 78}) == 84.33\\n\", \"\\nassert calculate_average_grade({'Math': 100, 'Science': 100, 'History': 100}) == 100.00\\n\", \"\\nassert calculate_average_grade({'Math': 50, 'Science': 50, 'History': 50}) == 50.00\\n\", \"\\nassert calculate_average_grade({'Math': 85.5, 'Science': 90.5, 'History': 78.5}) == 84.83\\n\", \"\\nassert calculate_average_grade({'Math': 95, 'Science': 80}) == 87.50\\n\", \"\\nassert calculate_average_grade({}) == 0.00\\n\", \"\\nassert calculate_average_grade({'Math': 100}) == 100.00\\n\", \"\\nassert calculate_average_grade({'Math': 0, 'Science': 0, 'History': 0}) == 0.00\\n\", \"\\nassert calculate_average_grade({'Math': 99.99, 'Science': 100.00, 'History': 99.98}) == 100.00\\n\", \"\\nassert calculate_average_grade({'Math': 88.888, 'Science': 99.999, 'History': 77.777}) == 88.89\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\"]", "average_test_score": "0.9"}
{"id": "d9fd576fd39858720c2c647c779122dd", "input": "You are tasked with implementing a function to compute the tax for a list of income amounts based on the following progressive tax brackets:\n\n- 0-10,000: 10%\n- 10,001-20,000: 20%\n- 20,001 and above: 30%\n\nYour function should take a list of integers representing income amounts and return a list of floats representing the corresponding tax amounts.\n\n**Input:**\n- A list of integers `incomes` where each integer represents an income amount.\n\n**Output:**\n- A list of floats `taxes` where each float represents the tax amount for the corresponding income.\n\n**Sample Input:**\n```\n[5000, 15000, 25000]\n```\n\n**Sample Output:**\n```\n[500.0, 2000.0, 4500.0]\n```", "output": "```python\ndef calculate_taxes(incomes):\n    \"\"\"\n    Calculate the taxes for a list of income amounts based on progressive tax brackets.\n\n    :param incomes: List of integers representing income amounts.\n    :return: List of floats representing the tax amounts for each income.\n    \"\"\"\n    taxes = []\n    for income in incomes:\n        if income <= 10000:\n            tax = income * 0.10\n        elif income <= 20000:\n            tax = 10000 * 0.10 + (income - 10000) * 0.20\n        else:\n            tax = 10000 * 0.10 + 10000 * 0.20 + (income - 20000) * 0.30\n        taxes.append(tax)\n    return taxes\n\n# Testing the function with the given incomes\nincomes = [5000, 15000, 25000]\ntaxes = calculate_taxes(incomes)\nprint(taxes)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements by calculating taxes for each income amount based on the given tax brackets and returning a list of tax amounts.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently calculates the tax for each income amount according to the specified tax brackets.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles typical cases within the tax brackets but does not explicitly handle edge cases such as negative income values or non-numeric inputs. However, it correctly processes the boundaries of the tax brackets.\"}}", "unit_tests": "[\"\\nassert calculate_taxes([0]) == [0.0]\\n\", \"\\nassert calculate_taxes([5000]) == [500.0]\\n\", \"\\nassert calculate_taxes([10000]) == [1000.0]\\n\", \"\\nassert calculate_taxes([10001]) == [2000.2]\\n\", \"\\nassert calculate_taxes([20000]) == [3000.0]\\n\", \"\\nassert calculate_taxes([20001]) == [3000.3]\\n\", \"\\nassert calculate_taxes([5000, 15000, 25000]) == [500.0, 2000.0, 4500.0]\\n\", \"\\nassert calculate_taxes([10000, 20000, 30000]) == [1000.0, 3000.0, 6000.0]\\n\", \"\\nassert calculate_taxes([9999, 10000, 10001]) == [999.9, 1000.0, 2000.2]\\n\", \"\\nassert calculate_taxes([25000, 30000, 35000]) == [4500.0, 5500.0, 6500.0]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.7"}
{"id": "27a519d58e4ec4e6c768af68d7784fc6", "input": "You are tasked with implementing a binary search tree (BST) class named `BinaryTree` that supports the following operations:\n- Insert a new integer value into the tree.\n- Perform an in-order traversal of the tree and return the values in a list.\n- Find and return the minimum value in the tree.\n\nYour implementation should be efficient and handle edge cases such as inserting duplicate values or finding the minimum in an empty tree.\n\n**Input:**\n- The `main` function will create a `BinaryTree` instance, insert a series of integers, and then perform the in-order traversal and find the minimum value.\n\n**Output:**\n- The in-order traversal of the tree as a list of integers.\n- The minimum value in the tree.\n\n**Sample Input:**\n- Insert values: `[5, 3, 7, 2, 4, 6, 8]`\n\n**Sample Output:**\n- In-order traversal: `[2, 3, 4, 5, 6, 7, 8]`\n- Minimum value: `2`", "output": "```python\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        \"\"\"Inserts a new value into the binary search tree.\"\"\"\n        if not self.root:\n            self.root = TreeNode(value)\n        else:\n            self._insert_recursively(self.root, value)\n\n    def _insert_recursively(self, node, value):\n        \"\"\"Helper method to insert a value recursively.\"\"\"\n        if value < node.value:\n            if node.left is None:\n                node.left = TreeNode(value)\n            else:\n                self._insert_recursively(node.left, value)\n        else:\n            if node.right is None:\n                node.right = TreeNode(value)\n            else:\n                self._insert_recursively(node.right, value)\n\n    def in_order_traversal(self):\n        \"\"\"Performs an in-order traversal of the tree and returns the values in a list.\"\"\"\n        elements = []\n        self._in_order_traversal_recursively(self.root, elements)\n        return elements\n\n    def _in_order_traversal_recursively(self, node, elements):\n        \"\"\"Helper method to perform in-order traversal recursively.\"\"\"\n        if node:\n            self._in_order_traversal_recursively(node.left, elements)\n            elements.append(node.value)\n            self._in_order_traversal_recursively(node.right, elements)\n\n    def find_minimum(self):\n        \"\"\"Finds and returns the minimum value in the tree.\"\"\"\n        if not self.root:\n            return None\n        current = self.root\n        while current.left:\n            current = current.left\n        return current.value\n\ndef main():\n    # Create a binary tree and insert some values\n    binary_tree = BinaryTree()\n    values = [5, 3, 7, 2, 4, 6, 8]\n    for value in values:\n        binary_tree.insert(value)\n\n    # Perform in-order traversal\n    print(\"In-order traversal of the binary tree:\", binary_tree.in_order_traversal())\n\n    # Find the minimum value in the binary tree\n    print(\"Minimum value in the binary tree:\", binary_tree.find_minimum())\n\nif __name__ == \"__main__\":\n    main()\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by implementing the BinaryTree class with methods to insert values, perform in-order traversal, and find the minimum value. It also includes example usage in the main function.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The insertion, in-order traversal, and minimum value finding methods all work as intended without any errors.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as inserting into an empty tree, traversing an empty tree, and finding the minimum in an empty tree by returning None. However, it does not explicitly handle cases like inserting duplicate values, which could be considered an edge case for a binary search tree.\"}}", "unit_tests": "[\"\\nassert BinaryTree().find_minimum() == None\\n\", \"\\nassert BinaryTree().in_order_traversal() == []\\n\", \"\\nbt = BinaryTree(); bt.insert(10); assert bt.find_minimum() == 10\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); assert bt.find_minimum() == 5\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); bt.insert(15); assert bt.in_order_traversal() == [5, 10, 15]\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); bt.insert(15); bt.insert(3); assert bt.in_order_traversal() == [3, 5, 10, 15]\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); bt.insert(15); bt.insert(3); bt.insert(7); assert bt.in_order_traversal() == [3, 5, 7, 10, 15]\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); bt.insert(15); bt.insert(3); bt.insert(7); bt.insert(12); assert bt.in_order_traversal() == [3, 5, 7, 10, 12, 15]\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); bt.insert(15); bt.insert(3); bt.insert(7); bt.insert(12); bt.insert(18); assert bt.in_order_traversal() == [3, 5, 7, 10, 12, 15, 18]\\n\", \"\\nbt = BinaryTree(); bt.insert(10); bt.insert(5); bt.insert(15); bt.insert(3); bt.insert(7); bt.insert(12); bt.insert(18); bt.insert(1); assert bt.in_order_traversal() == [1, 3, 5, 7, 10, 12, 15, 18]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "4c914abbea70ad987d05cedad197589c", "input": "You are given a directory path as input. Your task is to write a Python script that recursively lists all files within the specified directory and its subdirectories. The script should output the absolute path of each file to the console. \n\n**Input:**\n- A single string representing the directory path.\n\n**Output:**\n- Print the absolute path of each file found in the directory and its subdirectories, one per line.\n\n**Sample Input:**\n```\n/home/user\n```\n\n**Sample Output:**\n```\n/home/user/file1.txt\n/home/user/subdir1/file2.txt\n/home/user/subdir2/file3.txt\n```", "output": "```python\nimport os\n\ndef list_files(directory_path):\n    \"\"\"\n    Recursively lists all files in the given directory and its subdirectories.\n    \n    Args:\n    directory_path (str): The path to the directory to be searched.\n    \n    Returns:\n    None: Prints the absolute path of each file found.\n    \"\"\"\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            print(os.path.join(root, file))\n\n# Example usage\nlist_files(\"/home/user\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The script fully meets the requirement by taking a directory path as input and recursively listing all files in the directory and its subdirectories, outputting the list of file paths to the console.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The use of os.walk() ensures that all files in the directory and its subdirectories are correctly listed.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The script does not handle edge cases such as invalid directory paths, permission issues, or very large directories. However, it does handle the basic case of listing files in a directory and its subdirectories.\"}}", "unit_tests": "[\"\\nassert list_files(\\\"/nonexistent_directory\\\") is None\\n\", \"\\nassert list_files(\\\"\\\") is None\\n\", \"\\nassert list_files(\\\"/\\\") is None\\n\", \"\\nassert list_files(\\\"/tmp\\\") is None\\n\", \"\\nassert list_files(\\\"/etc\\\") is None\\n\", \"\\nassert list_files(\\\"/var/log\\\") is None\\n\", \"\\nassert list_files(\\\"/usr/bin\\\") is None\\n\", \"\\nassert list_files(\\\"/home\\\") is None\\n\", \"\\nassert list_files(\\\"/root\\\") is None\\n\", \"\\nassert list_files(\\\"/dev\\\") is None\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "c8735dbe070496d3c51d4c6d451c67f9", "input": "You are tasked with implementing a function `convert_to_json(data_structure)` that accepts any data structure (such as lists, dictionaries, tuples, etc.) and returns a JSON-formatted string. The function must handle nested structures and ensure that the JSON string is properly formatted. Your solution should be robust enough to handle various data types and nested levels.\n\n**Sample Input:**\n```python\nsample_dict = {\n    'name': 'Alice',\n    'age': 30,\n    'is_employee': True,\n    'address': {\n        'street': '123 Python Lane',\n        'city': 'Codeville',\n        'zipcode': '12345'\n    },\n    'phone_numbers': ['+1234567890', '+0987654321']\n}\n\nsample_list = [1, 2, 3, (4, 5), {'a': 'b'}, [6, 7]]\n\nsample_tuple = (8, 9, {'c': 'd'}, [10, 11], ('nested', 'tuple'))\n```\n\n**Sample Output:**\n```\nDictionary to JSON:\n{\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"is_employee\": true,\n    \"address\": {\n        \"street\": \"123 Python Lane\",\n        \"city\": \"Codeville\",\n        \"zipcode\": \"12345\"\n    },\n    \"phone_numbers\": [\n        \"+1234567890\",\n        \"+0987654321\"\n    ]\n}\n\nList to JSON:\n[\n    1,\n    2,\n    3,\n    [\n        4,\n        5\n    ],\n    {\n        \"a\": \"b\"\n    },\n    [\n        6,\n        7\n    ]\n]\n\nTuple to JSON:\n[\n    8,\n    9,\n    {\n        \"c\": \"d\"\n    },\n    [\n        10,\n        11\n    ],\n    [\n        \"nested\",\n        \"tuple\"\n    ]\n]\n```", "output": "```python\nimport json\n\ndef convert_to_json(data_structure):\n    \"\"\"\n    Converts any data structure (list, dict, tuple, etc.) into a JSON-formatted string.\n    \n    :param data_structure: A valid data structure that can be converted to JSON.\n    :return: String representation of the data structure in JSON format.\n    \"\"\"\n    try:\n        return json.dumps(data_structure, indent=4)\n    except (TypeError, ValueError) as e:\n        return f\"Error converting to JSON: {str(e)}\"\n\ndef main():\n    sample_dict = {\n        'name': 'Alice',\n        'age': 30,\n        'is_employee': True,\n        'address': {\n            'street': '123 Python Lane',\n            'city': 'Codeville',\n            'zipcode': '12345'\n        },\n        'phone_numbers': ['+1234567890', '+0987654321']\n    }\n\n    sample_list = [1, 2, 3, (4, 5), {'a': 'b'}, [6, 7]]\n\n    sample_tuple = (8, 9, {'c': 'd'}, [10, 11], ('nested', 'tuple'))\n\n    print(\"Dictionary to JSON:\")\n    print(convert_to_json(sample_dict))\n    print(\"\\nList to JSON:\")\n    print(convert_to_json(sample_list))\n    print(\"\\nTuple to JSON:\")\n    print(convert_to_json(sample_tuple))\n\nif __name__ == \"__main__\":\n    main()\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function meets all specified requirements by converting various data structures to JSON-formatted strings and handling nested structures. The main function demonstrates example usage effectively.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The function uses the `json.dumps` method to convert data structures to JSON and handles exceptions appropriately.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as nested structures and different data types within lists and tuples. However, it does not explicitly test or handle cases like non-serializable objects (e.g., sets, custom objects) beyond the basic exception handling.\"}}", "unit_tests": "[\"\\nassert convert_to_json({\\\"key\\\": \\\"value\\\"}) == '{\\\\n    \\\"key\\\": \\\"value\\\"\\\\n}'\\n\", \"\\nassert convert_to_json([1, 2, 3]) == '[\\\\n    1,\\\\n    2,\\\\n    3\\\\n]'\\n\", \"\\nassert convert_to_json((1, 2, 3)) == '[\\\\n    1,\\\\n    2,\\\\n    3\\\\n]'\\n\", \"\\nassert convert_to_json({\\\"nested\\\": {\\\"key\\\": \\\"value\\\"}}) == '{\\\\n    \\\"nested\\\": {\\\\n        \\\"key\\\": \\\"value\\\"\\\\n    }\\\\n}'\\n\", \"\\nassert convert_to_json([{\\\"key\\\": \\\"value\\\"}, {\\\"another_key\\\": \\\"another_value\\\"}]) == '[\\\\n    {\\\\n        \\\"key\\\": \\\"value\\\"\\\\n    },\\\\n    {\\\\n        \\\"another_key\\\": \\\"another_value\\\"\\\\n    }\\\\n]'\\n\", \"\\nassert convert_to_json(({\\\"key\\\": \\\"value\\\"}, {\\\"another_key\\\": \\\"another_value\\\"})) == '[\\\\n    {\\\\n        \\\"key\\\": \\\"value\\\"\\\\n    },\\\\n    {\\\\n        \\\"another_key\\\": \\\"another_value\\\"\\\\n    }\\\\n]'\\n\", \"\\nassert convert_to_json({\\\"list\\\": [1, 2, 3], \\\"tuple\\\": (4, 5, 6)}) == '{\\\\n    \\\"list\\\": [\\\\n        1,\\\\n        2,\\\\n        3\\\\n    ],\\\\n    \\\"tuple\\\": [\\\\n        4,\\\\n        5,\\\\n        6\\\\n    ]\\\\n}'\\n\", \"\\nassert convert_to_json({\\\"set\\\": [1, 2, 3]}) == '{\\\\n    \\\"set\\\": [\\\\n        1,\\\\n        2,\\\\n        3\\\\n    ]\\\\n}'\\n\", \"\\nassert convert_to_json(\\\"string\\\") == '\\\"string\\\"'\\n\", \"\\nassert convert_to_json(None) == 'null'\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "e02b6e787a61ca185701a7ae2df6f96b", "input": "You are given a set of `n` distinct items. Your task is to determine the number of ways to arrange `k` items from this set. This is known as the number of permutations, denoted as P(n, k), and can be calculated using the formula P(n, k) = n! / (n - k)!. Write a function `calculate_permutations(n, k)` that takes two integers `n` and `k` as input and returns the number of permutations.\n\n**Constraints:**\n- 1 \u2264 n \u2264 20\n- 0 \u2264 k \u2264 n\n\n**Sample Input:**\n```\n5 3\n```\n\n**Sample Output:**\n```\n60\n```", "output": "```python\nimport math\n\ndef calculate_permutations(n, k):\n    \"\"\"\n    Calculate the number of permutations of selecting k items from a set of n items.\n    \n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to select and arrange.\n    \n    Returns:\n    int: The number of permutations.\n    \"\"\"\n    return math.factorial(n) // math.factorial(n - k)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function correctly implements the formula for calculating permutations and meets all specified requirements.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic used in the function is completely correct and consistently calculates the number of permutations using the factorial method.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The solution does not handle edge cases such as when k > n, when n or k are negative, or when n or k are non-integers. It assumes valid input as per the problem statement but does not explicitly check or handle these cases.\"}}", "unit_tests": "[\"\\nassert calculate_permutations(5, 3) == 60\\n\", \"\\nassert calculate_permutations(10, 2) == 90\\n\", \"\\nassert calculate_permutations(6, 6) == 720\\n\", \"\\nassert calculate_permutations(8, 0) == 1\\n\", \"\\nassert calculate_permutations(0, 0) == 1\\n\", \"\\nassert calculate_permutations(7, 1) == 7\\n\", \"\\nassert calculate_permutations(12, 5) == 95040\\n\", \"\\nassert calculate_permutations(4, 4) == 24\\n\", \"\\nassert calculate_permutations(9, 3) == 504\\n\", \"\\nassert calculate_permutations(3, 5) == 0  # This should be handled by the function, but the current implementation does not handle k > n\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\"]", "average_test_score": "0.9"}
{"id": "8ec0fa102630f557c14b724280e28b15", "input": "You are given a binary tree with `N` nodes, where each node has an integer value. Your task is to write a function `flipBinaryTree(root)` that flips the binary tree around its root node, effectively swapping the left and right subtrees of every node. The function should modify the tree in place and return the root of the flipped tree. The binary tree is defined by the `TreeNode` class, where each node has the following attributes:\n- `value`: an integer representing the node's value.\n- `left`: a reference to the left child node, or `None` if there is no left child.\n- `right`: a reference to the right child node, or `None` if there is no right child.\n\n**Input:**\n- The function takes a single argument, `root`, which is the root node of the binary tree.\n\n**Output:**\n- The function should return the root node of the flipped binary tree.\n\n**Sample Input:**\n```\n    1\n   / \\\n  2   3\n / \\\n4   5\n```\n\n**Sample Output:**\n```\n    1\n   / \\\n  3   2\n     / \\\n    5   4\n```", "output": "```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef flipBinaryTree(root):\n    \"\"\"\n    Flips the binary tree around its root node, swapping the left and right subtrees of every node.\n    \n    :param root: TreeNode, the root node of the binary tree.\n    :return: TreeNode, the root node of the flipped binary tree.\n    \"\"\"\n    if root is None:\n        return None\n    \n    # Swap the left and right children\n    root.left, root.right = root.right, root.left\n    \n    # Recursively flip the left and right subtrees\n    flipBinaryTree(root.left)\n    flipBinaryTree(root.right)\n    \n    # Return the root of the flipped tree\n    return root\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by flipping the binary tree in place and returning the root node of the flipped tree.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The function swaps the left and right children of each node and recursively flips the subtrees.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution handles the edge case where the root is `None` by returning `None` immediately. It also correctly handles trees with only one node or no nodes.\"}}", "unit_tests": "[\"\\nassert flipBinaryTree(None) is None\\n\", \"\\nassert flipBinaryTree(TreeNode(1)).value == 1 and flipBinaryTree(TreeNode(1)).left is None and flipBinaryTree(TreeNode(1)).right is None\\n\", \"\\nroot = TreeNode(1, TreeNode(2), TreeNode(3))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2\\n\", \"\\nroot = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7)))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.left.left.value == 7 and flipped_root.left.right.value == 6 and flipped_root.right.left.value == 5 and flipped_root.right.right.value == 4\\n\", \"\\nroot = TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(8), TreeNode(9)), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7, TreeNode(10), TreeNode(11))))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.left.left.value == 7 and flipped_root.left.right.value == 6 and flipped_root.left.left.left.value == 11 and flipped_root.left.left.right.value == 10 and flipped_root.right.left.value == 5 and flipped_root.right.right.value == 4 and flipped_root.right.right.left.value == 9 and flipped_root.right.right.right.value == 8\\n\", \"\\nroot = TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(8), TreeNode(9)), TreeNode(5, TreeNode(10), TreeNode(11))), TreeNode(3, TreeNode(6, TreeNode(12), TreeNode(13)), TreeNode(7)))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.left.left.value == 7 and flipped_root.left.right.value == 6 and flipped_root.left.right.left.value == 13 and flipped_root.left.right.right.value == 12 and flipped_root.right.left.value == 5 and flipped_root.right.right.value == 4 and flipped_root.right.left.left.value == 11 and flipped_root.right.left.right.value == 10 and flipped_root.right.right.left.value == 9 and flipped_root.right.right.right.value == 8\\n\", \"\\nroot = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.right.left.value == 5 and flipped_root.right.right.value == 4\\n\", \"\\nroot = TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(6), TreeNode(7)))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.left.left.value == 7 and flipped_root.left.right.value == 6\\n\", \"\\nroot = TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(8))), TreeNode(3, None, TreeNode(7, None, TreeNode(11))))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.left.right.value == 7 and flipped_root.left.right.right.value == 11 and flipped_root.right.left.value == 4 and flipped_root.right.left.left.value == 8\\n\", \"\\nroot = TreeNode(1, TreeNode(2, None, TreeNode(5, TreeNode(10), TreeNode(11))), TreeNode(3, TreeNode(6, TreeNode(12), TreeNode(13)), None))\\nflipped_root = flipBinaryTree(root)\\nassert flipped_root.value == 1 and flipped_root.left.value == 3 and flipped_root.right.value == 2 and flipped_root.left.left.value == 6 and flipped_root.left.left.left.value == 13 and flipped_root.left.left.right.value == 12 and flipped_root.right.right.value == 5 and flipped_root.right.right.left.value == 10 and flipped_root.right.right.right.value == 11\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.8"}
{"id": "8a2d3967e9263208772314f251e917c9", "input": "You are given an array of integers `nums` and an integer `target_sum`. Your task is to find all unique pairs of numbers in `nums` that add up to `target_sum`. Each pair should be represented as a list of two integers, with the smaller number first. The order of pairs in the output list does not matter, but each pair must be unique. Note that the same number can be used in multiple pairs, but each pair must be unique.\n\n**Input:**\n- An array of integers `nums` (1 \u2264 len(nums) \u2264 10^3, -10^3 \u2264 nums[i] \u2264 10^3)\n- An integer `target_sum` (-2000 \u2264 target_sum \u2264 2000)\n\n**Output:**\n- A list of unique pairs, where each pair is a list of two integers.\n\n**Sample Input:**\n```\nnums = [1, 2, 3, 4, 3]\ntarget_sum = 6\n```\n\n**Sample Output:**\n```\n[[2, 4], [3, 3]]\n```", "output": "```python\ndef find_unique_pairs(nums, target_sum):\n    \"\"\"\n    Finds all unique pairs of numbers in the list that add up to the target sum.\n    \n    :param nums: List of integers.\n    :param target_sum: Integer representing the target sum.\n    :return: List of unique pairs, where each pair is a list of two integers.\n    \"\"\"\n    seen = set()\n    pairs = set()\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.add((min(num, complement), max(num, complement)))\n        seen.add(num)\n\n    return [list(pair) for pair in pairs]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements. It finds all unique pairs of numbers in the list that add up to the target sum, ensures each pair is unique, and the smaller number of each pair comes first.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It uses a set to track seen numbers and another set to store unique pairs, ensuring that each pair is unique and correctly ordered.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including lists with duplicates, lists where the same number can be used in multiple pairs, and lists where no pairs sum to the target.\"}}", "unit_tests": "[\"\\nassert find_unique_pairs([1, 2, 3, 4, 3], 6) == [[2, 4], [3, 3]]\\n\", \"\\nassert find_unique_pairs([1, 5, 7, -1], 6) == [[1, 5], [7, -1]]\\n\", \"\\nassert find_unique_pairs([10, 15, 3, 7], 17) == [[10, 7]]\\n\", \"\\nassert find_unique_pairs([1, 2, 3, 9], 8) == []\\n\", \"\\nassert find_unique_pairs([1, 2, 3, 4, 5], 10) == [[5, 5]]\\n\", \"\\nassert find_unique_pairs([1, 1, 1, 1], 2) == [[1, 1]]\\n\", \"\\nassert find_unique_pairs([], 5) == []\\n\", \"\\nassert find_unique_pairs([5], 5) == []\\n\", \"\\nassert find_unique_pairs([0, 0, 0, 0], 0) == [[0, 0]]\\n\", \"\\nassert find_unique_pairs([-1, -2, -3, -4, -5], -8) == [[-3, -5], [-4, -4]]\\n\"]", "tests_execution_status": "[\"pass\", \"fail\", \"fail\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\"]", "average_test_score": "0.6"}
{"id": "bb6c7218033038d53d2c83761c2c2c60", "input": "You are given a list of integers `heights` where each integer represents the height of a building in a city. Your task is to determine the number of buildings that are visible from a viewpoint located to the left of the first building. A building is considered visible if its height is greater than all the buildings to its left. Assume that the list `heights` contains at least one building and that the buildings are aligned in a straight line. Your solution should be efficient, with a time complexity of O(n).\n\n**Input:**\n- A list of integers `heights` (1 \u2264 len(heights) \u2264 10^5), where each integer is in the range [1, 10^9].\n\n**Output:**\n- An integer representing the number of visible buildings.\n\n**Sample Input:**\n```\n[3, 7, 8, 3, 6, 1]\n```\n\n**Sample Output:**\n```\n3\n```", "output": "```python\ndef count_visible_buildings(heights):\n    \"\"\"\n    Counts the number of buildings visible from a viewpoint to the left of the first building.\n    \n    :param heights: List of integers representing the heights of buildings.\n    :return: Integer count of visible buildings.\n    \"\"\"\n    visible_count = 0\n    max_height_so_far = 0\n    \n    for height in heights:\n        if height > max_height_so_far:\n            visible_count += 1\n            max_height_so_far = height\n    \n    return visible_count\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by correctly counting the number of visible buildings from the left viewpoint. It handles the input list as specified and returns the correct count.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and efficiently structured. It iterates through the list once, maintaining a running maximum height and counting buildings that are taller than this maximum, ensuring an O(n) time complexity.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution handles edge cases comprehensively. It correctly processes lists with a single building, lists where all buildings are the same height, and lists with buildings in decreasing order of height, among other scenarios.\"}}", "unit_tests": "[\"\\nassert count_visible_buildings([3, 7, 8, 3, 6, 1]) == 3\\n\", \"\\nassert count_visible_buildings([1, 2, 3, 4, 5]) == 5\\n\", \"\\nassert count_visible_buildings([5, 4, 3, 2, 1]) == 1\\n\", \"\\nassert count_visible_buildings([10]) == 1\\n\", \"\\nassert count_visible_buildings([1, 1, 1, 1, 1]) == 1\\n\", \"\\nassert count_visible_buildings([1, 3, 2, 4, 3, 5]) == 4\\n\", \"\\nassert count_visible_buildings([100, 200, 150, 250, 300, 275]) == 4\\n\", \"\\nassert count_visible_buildings([1, 2, 3, 2, 1, 2, 3]) == 4\\n\", \"\\nassert count_visible_buildings([5, 5, 5, 5, 6, 6, 7, 7, 8, 8]) == 4\\n\", \"\\nassert count_visible_buildings([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "3e8dd879a4e5ec6ef6b3fe10c8d42762", "input": "You are tasked with implementing a function `generate_palindrome(n)` that constructs a palindrome number with exactly `n` digits. The function should return this palindrome as an integer. For instance, `generate_palindrome(3)` could return any 3-digit palindrome such as 121, 343, or 565. If the input `n` is less than 1, the function should return 0.\n\n**Constraints:**\n- 0 \u2264 n \u2264 18\n\n**Sample Input and Output:**\n- Input: `3`\n- Possible Output: `121`, `343`, `565`, etc.\n- Input: `0`\n- Output: `0`\n- Input: `1`\n- Possible Output: `1`, `2`, `3`, ..., `9`", "output": "```python\nimport random\n\ndef generate_palindrome(n):\n    \"\"\"\n    Generates a palindrome number with n digits.\n    \n    Parameters:\n    n (int): The number of digits in the palindrome.\n    \n    Returns:\n    int: A palindrome number with n digits, or 0 if n < 1.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    half_length = (n + 1) // 2\n    first_half = random.randint(10**(half_length - 1), 10**half_length - 1)\n    first_half_str = str(first_half)\n    \n    if n % 2 == 0:\n        palindrome_str = first_half_str + first_half_str[::-1]\n    else:\n        palindrome_str = first_half_str + first_half_str[-2::-1]\n\n    return int(palindrome_str)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by generating a palindrome number with n digits and returning 0 if n is less than 1.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently generates a palindrome number by creating the first half and mirroring it appropriately.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the edge case where n is less than 1 by returning 0. However, it does not handle the case where n is 1 separately, which could be considered an edge case. For n=1, the palindrome generation logic still works but could be optimized to directly return a single digit number.\"}}", "unit_tests": "[\"\\nassert generate_palindrome(1) == 1 or generate_palindrome(1) == 2 or generate_palindrome(1) == 3 or generate_palindrome(1) == 4 or generate_palindrome(1) == 5 or generate_palindrome(1) == 6 or generate_palindrome(1) == 7 or generate_palindrome(1) == 8 or generate_palindrome(1) == 9\\n\", \"\\nassert generate_palindrome(2) == 11 or generate_palindrome(2) == 22 or generate_palindrome(2) == 33 or generate_palindrome(2) == 44 or generate_palindrome(2) == 55 or generate_palindrome(2) == 66 or generate_palindrome(2) == 77 or generate_palindrome(2) == 88 or generate_palindrome(2) == 99\\n\", \"\\nassert generate_palindrome(3) >= 101 and generate_palindrome(3) <= 999 and str(generate_palindrome(3)) == str(generate_palindrome(3))[::-1]\\n\", \"\\nassert generate_palindrome(4) >= 1001 and generate_palindrome(4) <= 9999 and str(generate_palindrome(4)) == str(generate_palindrome(4))[::-1]\\n\", \"\\nassert generate_palindrome(5) >= 10001 and generate_palindrome(5) <= 99999 and str(generate_palindrome(5)) == str(generate_palindrome(5))[::-1]\\n\", \"\\nassert generate_palindrome(6) >= 100001 and generate_palindrome(6) <= 999999 and str(generate_palindrome(6)) == str(generate_palindrome(6))[::-1]\\n\", \"\\nassert generate_palindrome(0) == 0\\n\", \"\\nassert generate_palindrome(-5) == 0\\n\", \"\\nassert generate_palindrome(7) >= 1000001 and generate_palindrome(7) <= 9999999 and str(generate_palindrome(7)) == str(generate_palindrome(7))[::-1]\\n\", \"\\nassert generate_palindrome(8) >= 10000001 and generate_palindrome(8) <= 99999999 and str(generate_palindrome(8)) == str(generate_palindrome(8))[::-1]\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"fail\", \"fail\", \"fail\", \"fail\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.3"}
{"id": "fc535c8a87b409cbc707bd26ebfdb2ae", "input": "You are tasked with implementing a `BankAccount` class in Python that simulates basic banking operations. The class should support the following functionalities:\n\n- **Deposit**: Add a specified amount to the account balance. The amount must be positive.\n- **Withdraw**: Subtract a specified amount from the account balance, ensuring the balance does not go negative. The amount must be positive.\n- **Get Balance**: Return the current balance of the account.\n- **Get Transactions**: Return a list of all transactions, where each transaction is a string indicating the amount and the type (deposit or withdrawal).\n- **Get Statement**: Return a formatted string that includes the account holder's name, account number, current balance, and a list of all transactions.\n\nYour implementation should handle invalid inputs gracefully by raising appropriate exceptions.\n\n**Sample Input/Output**:\n```python\naccount = BankAccount(\"John Doe\", \"123456789\")\naccount.deposit(100)\naccount.withdraw(50)\nprint(account.get_balance())  # Output: 50\nprint(account.get_transactions())  # Output: ['Deposited: 100', 'Withdrew: 50']\nprint(account.get_statement())\n# Expected Output:\n# Account Holder: John Doe\n# Account Number: 123456789\n# Current Balance: 50\n# Transactions:\n#   Deposited: 100\n#   Withdrew: 50\n```", "output": "```python\nclass BankAccount:\n    def __init__(self, account_holder_name, account_number):\n        \"\"\"\n        Initialize a new bank account with the given account holder's name and account number.\n        \n        :param account_holder_name: The name of the account holder.\n        :param account_number: The account number.\n        \"\"\"\n        self.account_holder_name = account_holder_name\n        self.account_number = account_number\n        self.balance = 0\n        self.transactions = []\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposit a specified amount into the account.\n        \n        :param amount: The amount to deposit.\n        :raises ValueError: If the amount is not positive.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n            self.transactions.append(f\"Deposited: {amount}\")\n        else:\n            raise ValueError(\"Deposit amount must be positive.\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraw a specified amount from the account.\n        \n        :param amount: The amount to withdraw.\n        :raises ValueError: If the amount is not positive.\n        :raises ValueError: If the amount exceeds the current balance.\n        \"\"\"\n        if amount > self.balance:\n            print(\"Insufficient funds. Withdrawal not allowed.\")\n        elif amount <= 0:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n        else:\n            self.balance -= amount\n            self.transactions.append(f\"Withdrew: {amount}\")\n\n    def get_balance(self):\n        \"\"\"\n        Get the current balance of the account.\n        \n        :return: The current balance.\n        \"\"\"\n        return self.balance\n\n    def get_transactions(self):\n        \"\"\"\n        Get a list of all transactions.\n        \n        :return: A list of transaction strings.\n        \"\"\"\n        return self.transactions\n\n    def get_statement(self):\n        \"\"\"\n        Get a formatted statement of the account.\n        \n        :return: A formatted string with account details and transactions.\n        \"\"\"\n        statement = (f\"Account Holder: {self.account_holder_name}\\n\"\n                     f\"Account Number: {self.account_number}\\n\"\n                     f\"Current Balance: {self.balance}\\n\"\n                     \"Transactions:\\n\")\n        for transaction in self.transactions:\n            statement += f\"  {transaction}\\n\"\n        return statement\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by implementing all required methods: deposit, withdraw, get_balance, get_transactions, and get_statement. Each method functions as described in the question.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic in the solution is completely correct and optimally structured. The deposit and withdraw methods handle the balance correctly, and the get_statement method formats the output as required.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as negative deposit and withdrawal amounts, and insufficient funds for withdrawal. However, it does not handle the case where the account holder name or account number might be invalid or empty, which could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert BankAccount(\\\"John Doe\\\", \\\"123456789\\\").get_balance() == 0\\n\", \"\\nassert BankAccount(\\\"John Doe\\\", \\\"123456789\\\").get_transactions() == []\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\nassert account.get_balance() == 100\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\naccount.deposit(50)\\nassert account.get_balance() == 150\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\naccount.withdraw(50)\\nassert account.get_balance() == 50\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\naccount.withdraw(150)\\nassert account.get_balance() == 100\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\naccount.withdraw(50)\\nassert account.get_transactions() == [\\\"Deposited: 100\\\", \\\"Withdrew: 50\\\"]\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\naccount.withdraw(50)\\naccount.deposit(25)\\nassert account.get_transactions() == [\\\"Deposited: 100\\\", \\\"Withdrew: 50\\\", \\\"Deposited: 25\\\"]\\n\", \"\\naccount = BankAccount(\\\"John Doe\\\", \\\"123456789\\\")\\naccount.deposit(100)\\naccount.withdraw(50)\\nassert account.get_statement() == \\\"Account Holder: John Doe\\\\nAccount Number: 123456789\\\\nCurrent Balance: 50\\\\nTransactions:\\\\n  Deposited: 100\\\\n  Withdrew: 50\\\\n\\\"\\n\", \"\\naccount = BankAccount(\\\"Jane Smith\\\", \\\"987654321\\\")\\nassert account.get_statement() == \\\"Account Holder: Jane Smith\\\\nAccount Number: 987654321\\\\nCurrent Balance: 0\\\\nTransactions:\\\\n\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "7d3e6d31d6b2ddfe7ddd7395e9f3ff9a", "input": "You are tasked with writing a Python program that reads a series of integers from the user input. The integers are provided as a single line of space-separated values. Your program should compute and output the sum, average, and product of these integers. The program must handle invalid input by repeatedly prompting the user until a valid series of integers is entered.\n\n**Input:**\n- A single line of space-separated integers. The input may contain negative numbers.\n\n**Output:**\n- Three lines of output:\n  - The first line should contain the sum of the integers.\n  - The second line should contain the average of the integers.\n  - The third line should contain the product of the integers.\n\n**Sample Input:**\n```\n3 5 -2 7\n```\n\n**Sample Output:**\n```\n13\n3.25\n-210\n```", "output": "```python\ndef get_valid_integers():\n    \"\"\"\n    Prompts the user to enter a series of integers separated by spaces.\n    Repeats the prompt until valid input is provided.\n    \n    Returns:\n        list of int: A list of integers entered by the user.\n    \"\"\"\n    while True:\n        user_input = input(\"Please enter a series of integers separated by spaces: \").strip()\n        numbers = user_input.split()\n        if all(num.isdigit() or (num.startswith('-') and num[1:].isdigit()) for num in numbers):\n            return list(map(int, numbers))\n        else:\n            print(\"Invalid input. Please make sure to enter only integers separated by spaces.\")\n\ndef calculate_sum(numbers):\n    \"\"\"\n    Computes the sum of a list of integers.\n    \n    Args:\n        numbers (list of int): The list of integers.\n    \n    Returns:\n        int: The sum of the integers.\n    \"\"\"\n    return sum(numbers)\n\ndef calculate_average(numbers):\n    \"\"\"\n    Computes the average of a list of integers.\n    \n    Args:\n        numbers (list of int): The list of integers.\n    \n    Returns:\n        float: The average of the integers.\n    \"\"\"\n    return calculate_sum(numbers) / len(numbers)\n\ndef calculate_product(numbers):\n    \"\"\"\n    Computes the product of a list of integers.\n    \n    Args:\n        numbers (list of int): The list of integers.\n    \n    Returns:\n        int: The product of the integers.\n    \"\"\"\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n\ndef main():\n    \"\"\"\n    Main function to execute the program.\n    Prompts the user for input, calculates the sum, average, and product,\n    and prints the results.\n    \"\"\"\n    integers = get_valid_integers()\n    total_sum = calculate_sum(integers)\n    average = calculate_average(integers)\n    product = calculate_product(integers)\n    \n    print(f\"Sum: {total_sum}\")\n    print(f\"Average: {average}\")\n    print(f\"Product: {product}\")\n\nif __name__ == \"__main__\":\n    main()\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by prompting the user for input, calculating the sum, average, and product, and handling invalid input gracefully.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The functions for sum, average, and product are correctly implemented and the input validation works as intended.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as negative numbers and invalid inputs, but does not handle the case where the user enters no numbers at all (which would cause a division by zero error when calculating the average).\"}}", "unit_tests": "[\"\\nassert calculate_sum([1, 2, 3, 4, 5]) == 15\\n\", \"\\nassert calculate_sum([-1, -2, -3, -4, -5]) == -15\\n\", \"\\nassert calculate_sum([0, 0, 0, 0, 0]) == 0\\n\", \"\\nassert calculate_sum([10, -10, 20, -20, 30]) == 30\\n\", \"\\nassert calculate_average([1, 2, 3, 4, 5]) == 3.0\\n\", \"\\nassert calculate_average([-1, -2, -3, -4, -5]) == -3.0\\n\", \"\\nassert calculate_average([0, 0, 0, 0, 0]) == 0.0\\n\", \"\\nassert calculate_average([10, -10, 20, -20, 30]) == 6.0\\n\", \"\\nassert calculate_product([1, 2, 3, 4, 5]) == 120\\n\", \"\\nassert calculate_product([-1, -2, -3, -4, -5]) == -120\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "c25406e8f80ea9732920e0818ffe2337", "input": "You are given a text file named `example.txt`. Your task is to write a program that reads this file, counts the number of words, and outputs the total word count. Assume that words are separated by whitespace. If the file does not exist, your program should output an appropriate message.\n\n**Sample Input:**\nFile `example.txt` contains:\n```\nHello world this is a test\n```\n\n**Sample Output:**\n```\nThe file 'example.txt' has 6 words.\n```", "output": "```python\ndef count_words_in_file(filename):\n    \"\"\"\n    Counts the number of words in a given text file.\n\n    Parameters:\n    filename (str): The name of the file to read.\n\n    Returns:\n    int or None: The number of words in the file, or None if the file does not exist.\n    \"\"\"\n    try:\n        with open(filename, 'r') as file:\n            content = file.read()\n            words = content.split()\n            return len(words)\n    except FileNotFoundError:\n        print(f\"The file {filename} does not exist.\")\n        return None\n\n# Usage\nfilename = 'example.txt'\nword_count = count_words_in_file(filename)\nif word_count is not None:\n    print(f\"The file '{filename}' has {word_count} words.\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by reading a text file, counting the number of words, and printing the result to the console.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It reads the file, splits the content into words, counts them, and handles the FileNotFoundError exception.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the case where the file does not exist. However, it does not handle other potential edge cases such as empty files, files with only whitespace, or encoding errors.\"}}", "unit_tests": "[\"\\nassert count_words_in_file(\\\"example.txt\\\") == 10  # Assuming example.txt contains exactly 10 words\\n\", \"\\nassert count_words_in_file(\\\"nonexistentfile.txt\\\") is None  # File does not exist\\n\", \"\\nassert count_words_in_file(\\\"emptyfile.txt\\\") == 0  # Assuming emptyfile.txt is an empty file\\n\", \"\\nassert count_words_in_file(\\\"singleword.txt\\\") == 1  # Assuming singleword.txt contains only one word\\n\", \"\\nassert count_words_in_file(\\\"multiplelines.txt\\\") == 20  # Assuming multiplelines.txt contains exactly 20 words across multiple lines\\n\", \"\\nassert count_words_in_file(\\\"punctuation.txt\\\") == 5  # Assuming punctuation.txt contains \\\"hello, world!\\\" which should count as 2 words\\n\", \"\\nassert count_words_in_file(\\\"whitespace.txt\\\") == 3  # Assuming whitespace.txt contains \\\"word1   word2 word3\\\" with irregular spacing\\n\", \"\\nassert count_words_in_file(\\\"tabsandspaces.txt\\\") == 4  # Assuming tabsandspaces.txt contains \\\"word1\\\\tword2 word3  word4\\\"\\n\", \"\\nassert count_words_in_file(\\\"newlines.txt\\\") == 6  # Assuming newlines.txt contains \\\"word1\\\\nword2\\\\nword3\\\\nword4\\\\nword5\\\\nword6\\\"\\n\", \"\\nassert count_words_in_file(\\\"specialchars.txt\\\") == 0  # Assuming specialchars.txt contains only special characters with no words\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0.1"}
{"id": "1189e73bbb9aff7a18dad44108a614ee", "input": "You are given a list of `n` points on a 2D plane, where each point is represented as a tuple of two integers `(x, y)`. Your task is to find and return the pair of points that are closest to each other. The function should have a time complexity of O(n^2).\n\n**Input:**\n- A list of tuples, where each tuple contains two integers representing the x and y coordinates of a point.\n\n**Output:**\n- A tuple containing two tuples, each representing the coordinates of the closest pair of points.\n\n**Constraints:**\n- 2 \u2264 n \u2264 1000\n- -10^9 \u2264 x, y \u2264 10^9\n\n**Sample Input:**\n```\n[(0, 0), (1, 1), (2, 2), (3, 3), (10, 10)]\n```\n\n**Sample Output:**\n```\n((0, 0), (1, 1))\n```", "output": "```python\nimport math\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\ndef find_closest_pair_of_points(points):\n    \"\"\"Find the closest pair of points from a list of points.\"\"\"\n    if len(points) < 2:\n        raise ValueError(\"At least two points are required to find the closest pair.\")\n    \n    min_distance = float('inf')\n    closest_pair = None\n    \n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distance = euclidean_distance(points[i], points[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (points[i], points[j])\n    \n    return closest_pair\n\n# Example usage:\npoints = [(0, 0), (1, 1), (2, 2), (3, 3), (10, 10)]\nprint(find_closest_pair_of_points(points))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by taking a list of points and returning the closest pair. It also adheres to the O(n^2) time complexity requirement.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. It calculates the Euclidean distance between each pair of points and keeps track of the minimum distance and corresponding pair of points.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the edge case where there are fewer than two points by raising a ValueError. However, it does not handle cases where all points are the same or where the input list contains non-tuple elements or tuples with non-integer values, which could be considered additional edge cases.\"}}", "unit_tests": "[\"\\nassert find_closest_pair_of_points([(0, 0), (1, 1)]) == ((0, 0), (1, 1))\\n\", \"\\nassert find_closest_pair_of_points([(1, 2), (3, 4), (5, 6), (7, 8), (1, 3)]) == ((1, 2), (1, 3))\\n\", \"\\nassert find_closest_pair_of_points([(0, 0), (10, 10), (5, 5)]) == ((0, 0), (5, 5))\\n\", \"\\nassert find_closest_pair_of_points([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == ((1, 1), (2, 2))\\n\", \"\\nassert find_closest_pair_of_points([(0, 0), (0, 1), (1, 0), (1, 1)]) == ((0, 0), (0, 1))\\n\", \"\\nassert find_closest_pair_of_points([(10, 10), (20, 20), (15, 15)]) == ((10, 10), (15, 15))\\n\", \"\\nassert find_closest_pair_of_points([(1, 1), (1, 2), (2, 1), (2, 2)]) == ((1, 1), (1, 2))\\n\", \"\\nassert find_closest_pair_of_points([(0, 0), (1, 0), (0, 1), (1, 1)]) == ((0, 0), (1, 0))\\n\", \"\\nassert find_closest_pair_of_points([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]) == ((1, 1), (2, 2))\\n\", \"\\nassert find_closest_pair_of_points([(1, 1), (1, 1), (2, 2)]) == ((1, 1), (1, 1))\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "a0bcf54fdf7917a44c1aa3681c099eeb", "input": "You are given a URL as input. Your task is to write a Python function that downloads and returns the HTML content of the specified web page. Your function should handle HTTP errors gracefully by raising an exception if the request fails.\n\n**Sample Input:**\n```\nhttps://www.example.com\n```\n\n**Sample Output:**\n```\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n    ...\n</html>\n```", "output": "```python\nimport requests\n\ndef download_html(url):\n    \"\"\"\n    Downloads and returns the HTML content of the specified URL.\n    \n    Args:\n    url (str): The URL of the web page to download.\n    \n    Returns:\n    str: The HTML content of the web page.\n    \n    Raises:\n    requests.exceptions.HTTPError: If the HTTP request returns an unsuccessful status code.\n    \"\"\"\n    response = requests.get(url)\n    response.raise_for_status()  # Raises an HTTPError for bad responses\n    return response.text\n\n# Input URL\nurl = 'https://www.example.com'\n\n# Downloading HTML content\nhtml_content = download_html(url)\nprint(html_content)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The solution meets the basic requirement of downloading HTML content from a URL. However, it does not take URL input from the user; it uses a hardcoded URL.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic is mostly correct, using the requests library to fetch the HTML content and handling HTTP errors with raise_for_status(). However, it could be improved by adding more robust error handling.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The solution minimally considers edge cases by handling HTTP errors with raise_for_status(). However, it does not handle other potential issues such as invalid URLs, network issues, or timeouts.\"}}", "unit_tests": "[\"\\nassert download_html(\\\"https://httpbin.org/status/200\\\").startswith(\\\"<!DOCTYPE html>\\\")\\n\", \"\\nassert download_html(\\\"https://httpbin.org/status/200\\\").find(\\\"HTTPBin\\\") != -1\\n\", \"\\nassert download_html(\\\"https://httpbin.org/status/404\\\").startswith(\\\"<!DOCTYPE html>\\\")\\n\", \"\\nassert download_html(\\\"https://httpbin.org/status/404\\\").find(\\\"404 Not Found\\\") != -1\\n\", \"\\nassert download_html(\\\"https://httpbin.org/status/500\\\").startswith(\\\"<!DOCTYPE html>\\\")\\n\", \"\\nassert download_html(\\\"https://httpbin.org/status/500\\\").find(\\\"500 Internal Server Error\\\") != -1\\n\", \"\\nassert download_html(\\\"https://httpbin.org/get\\\").find(\\\"args\\\") != -1\\n\", \"\\nassert download_html(\\\"https://httpbin.org/get\\\").find(\\\"headers\\\") != -1\\n\", \"\\nassert download_html(\\\"https://httpbin.org/get\\\").find(\\\"origin\\\") != -1\\n\", \"\\nassert download_html(\\\"https://httpbin.org/get\\\").find(\\\"url\\\") != -1\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "3f0f4f7c21f13df40c85bb8408fb77f2", "input": "You are given a list of cities, each represented by its coordinates on a 2D plane. Your task is to find the shortest possible route that visits each city exactly once and returns to the starting city. Implement a function `optimize_route` that uses the Nearest Neighbor heuristic to solve this problem.\n\n**Input:**\n- A list of tuples, where each tuple represents the coordinates of a city in the form `(x, y)`.\n\n**Output:**\n- A list of tuples representing the coordinates of the cities in the order they should be visited to form the shortest route, starting and ending at the same city.\n\n**Sample Input:**\n```python\ncities = [(0, 0), (1, 5), (5, 2), (6, 6), (8, 3)]\n```\n\n**Sample Output:**\n```python\n[(0, 0), (1, 5), (5, 2), (8, 3), (6, 6), (0, 0)]\n```", "output": "```python\nimport math\n\ndef nearest_neighbor_tsp(distance_matrix, start=0):\n    \"\"\"\n    Solves the Traveling Salesman Problem using the Nearest Neighbor heuristic.\n    \n    :param distance_matrix: A 2D list representing the distances between cities.\n    :param start: The index of the starting city.\n    :return: A list of indices representing the order of cities to visit.\n    \"\"\"\n    n = len(distance_matrix)\n    unvisited = set(range(n))\n    unvisited.remove(start)\n    tour = [start]\n    while unvisited:\n        last = tour[-1]\n        next_city = min(unvisited, key=lambda city: distance_matrix[last][city])\n        tour.append(next_city)\n        unvisited.remove(next_city)\n    return tour\n\ndef calculate_distance(point1, point2):\n    \"\"\"\n    Calculates the Euclidean distance between two points.\n    \n    :param point1: A tuple representing the coordinates of the first point.\n    :param point2: A tuple representing the coordinates of the second point.\n    :return: The Euclidean distance between point1 and point2.\n    \"\"\"\n    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\ndef optimize_route(cities):\n    \"\"\"\n    Finds the shortest route that visits each city exactly once and returns to the starting city using the Nearest Neighbor heuristic.\n    \n    :param cities: A list of tuples representing the coordinates of the cities.\n    :return: A list of tuples representing the coordinates of the cities in the order they should be visited.\n    \"\"\"\n    n = len(cities)\n    distance_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = calculate_distance(cities[i], cities[j])\n            distance_matrix[i][j] = dist\n            distance_matrix[j][i] = dist\n\n    tour = nearest_neighbor_tsp(distance_matrix)\n    tour.append(tour[0])  # return to the starting point\n    return [cities[i] for i in tour]\n\ncities = [(0, 0), (1, 5), (5, 2), (6, 6), (8, 3)]\nprint(optimize_route(cities))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by implementing the Nearest Neighbor heuristic to find a route that visits each city exactly once and returns to the origin city.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently structured. The Nearest Neighbor algorithm is correctly implemented, and the distance matrix is accurately calculated and used to determine the tour.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution addresses some edge cases, such as the case where there is only one city, but it does not handle cases with duplicate cities or cities with the same coordinates, which could lead to incorrect results. Additionally, it does not handle the case where the input list of cities is empty.\"}}", "unit_tests": "[\"\\nassert optimize_route([(0, 0), (1, 1)]) == [(0, 0), (1, 1), (0, 0)]\\n\", \"\\nassert optimize_route([(0, 0), (0, 1), (1, 0)]) == [(0, 0), (0, 1), (1, 0), (0, 0)]\\n\", \"\\nassert optimize_route([(0, 0), (1, 1), (2, 2)]) == [(0, 0), (1, 1), (2, 2), (0, 0)]\\n\", \"\\nassert optimize_route([(0, 0), (1, 0), (0, 1), (1, 1)]) == [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)]\\n\", \"\\nassert optimize_route([(0, 0), (10, 0), (10, 10), (0, 10)]) == [(0, 0), (10, 0), (10, 10), (0, 10), (0, 0)]\\n\", \"\\nassert optimize_route([(0, 0), (0, 0), (0, 0)]) == [(0, 0), (0, 0), (0, 0), (0, 0)]\\n\", \"\\nassert optimize_route([(1, 1), (2, 2), (3, 3), (4, 4)]) == [(1, 1), (2, 2), (3, 3), (4, 4), (1, 1)]\\n\", \"\\nassert optimize_route([(0, 0)]) == [(0, 0), (0, 0)]\\n\", \"\\nassert optimize_route([(0, 0), (1, 2), (3, 4), (5, 6), (7, 8)]) == [(0, 0), (1, 2), (3, 4), (5, 6), (7, 8), (0, 0)]\\n\", \"\\nassert optimize_route([(1, 1), (1, 1), (2, 2), (2, 2)]) == [(1, 1), (1, 1), (2, 2), (2, 2), (1, 1)]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "0c9d8bf71c8dc7c4e2722c63503dfc87", "input": "You are given a string in `snake_case` format. Your task is to write a function `convert_to_pascal_case` that converts this string into `PascalCase`. The input string will consist of lowercase letters and underscores only. The function should return the converted string.\n\n**Sample Input:**\n```\nexample_function_name\n```\n\n**Sample Output:**\n```\nExampleFunctionName\n```", "output": "```python\ndef convert_to_pascal_case(snake_str):\n    \"\"\"\n    Convert a snake_case string to PascalCase.\n\n    Parameters:\n    snake_str (str): A string in snake_case format.\n\n    Returns:\n    str: The converted string in PascalCase.\n    \"\"\"\n    return ''.join(word.capitalize() for word in snake_str.split('_'))\n\n# Example usage:\nexample = \"example_function_name\"\npascal_case_example = convert_to_pascal_case(example)\nprint(pascal_case_example)  # Output: ExampleFunctionName\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by converting a snake_case string to PascalCase.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The function splits the input string by underscores, capitalizes each word, and joins them together to form a PascalCase string.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The function handles basic cases well, but it does not consider edge cases such as empty strings, strings with multiple consecutive underscores, or strings that start or end with underscores.\"}}", "unit_tests": "[\"\\nassert convert_to_pascal_case(\\\"example_function_name\\\") == \\\"ExampleFunctionName\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"convert_to_pascal_case\\\") == \\\"ConvertToPascalCase\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"hello_world\\\") == \\\"HelloWorld\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"singleword\\\") == \\\"Singleword\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"multiple__underscores__here\\\") == \\\"MultipleUnderscoresHere\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"leading_underscore\\\") == \\\"LeadingUnderscore\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"trailing_underscore_\\\") == \\\"TrailingUnderscore\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"_both_ends_\\\") == \\\"BothEnds\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"\\\") == \\\"\\\"\\n\", \"\\nassert convert_to_pascal_case(\\\"numbers_123_in_string\\\") == \\\"Numbers123InString\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "6764022658a0d7e00aef4302def7fb34", "input": "You are given a list of integers. Your task is to implement a function `find_mode` that determines the mode(s) of the list. The mode is the number that appears most frequently. If there are multiple numbers with the same highest frequency, return all of them in a list. The input list will contain at least one integer.\n\n**Sample Input:**\n```\n[1, 2, 2, 3, 3, 4]\n```\n\n**Sample Output:**\n```\n[2, 3]\n```", "output": "```python\ndef find_mode(numbers):\n    \"\"\"\n    Finds the mode(s) of a list of numbers.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int or list: The mode as an integer if there's only one mode, \n                 or a list of modes if there are multiple.\n    \"\"\"\n    from collections import Counter\n    \n    counts = Counter(numbers)\n    max_freq = max(counts.values())\n    modes = [num for num, freq in counts.items() if freq == max_freq]\n    \n    return modes[0] if len(modes) == 1 else modes\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by returning the mode or modes of the list as specified.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently structured. It accurately counts the frequency of each number and identifies the mode(s).\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the case where there is more than one mode and returns a list of modes. However, it does not handle edge cases such as an empty list or a list with all unique elements, which would return an empty list or the entire list, respectively.\"}}", "unit_tests": "[\"\\nassert find_mode([1, 2, 2, 3, 3, 4]) == [2, 3]\\n\", \"\\nassert find_mode([4, 4, 1, 2, 2, 3, 3]) == [2, 3, 4]\\n\", \"\\nassert find_mode([7, 7, 7, 1, 2, 2, 3]) == 7\\n\", \"\\nassert find_mode([1, 1, 2, 3, 4, 5, 5]) == [1, 5]\\n\", \"\\nassert find_mode([10]) == 10\\n\", \"\\nassert find_mode([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert find_mode([2, 2, 3, 3, 3, 4, 4, 4]) == [3, 4]\\n\", \"\\nassert find_mode([]) == []\\n\", \"\\nassert find_mode([5, 5, 5, 5, 5]) == 5\\n\", \"\\nassert find_mode([1, 2, 3, 3, 2, 1]) == [1, 2, 3]\\n\"]", "tests_execution_status": "[\"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\"]", "average_test_score": "0.8"}
{"id": "37768571278d95237d53601edbe10ff3", "input": "Implement a class named `Rectangle` with the following specifications:\n\n- **Attributes:**\n  - `width`: A float representing the width of the rectangle.\n  - `height`: A float representing the height of the rectangle.\n\n- **Methods:**\n  - `area()`: Returns the area of the rectangle (width * height).\n  - `perimeter()`: Returns the perimeter of the rectangle (2 * (width + height)).\n  - `resize(factor)`: Resizes the rectangle by multiplying both the width and height by a given factor.\n  - `display_info()`: Prints the width, height, area, and perimeter of the rectangle.\n\nEnsure that the class includes appropriate property setters and getters to maintain encapsulation.\n\n**Sample Input/Output:**\n```python\nrect = Rectangle(3.0, 4.0)\nrect.display_info()  # Output: Width: 3.0, Height: 4.0, Area: 12.0, Perimeter: 14.0\nrect.resize(2.0)\nrect.display_info()  # Output: Width: 6.0, Height: 8.0, Area: 48.0, Perimeter: 28.0\n```", "output": "```python\nclass Rectangle:\n    def __init__(self, width, height):\n        self._width = width\n        self._height = height\n\n    @property\n    def width(self):\n        \"\"\"Getter for width.\"\"\"\n        return self._width\n\n    @width.setter\n    def width(self, value):\n        \"\"\"Setter for width with validation.\"\"\"\n        if value < 0:\n            raise ValueError(\"Width must be non-negative\")\n        self._width = value\n\n    @property\n    def height(self):\n        \"\"\"Getter for height.\"\"\"\n        return self._height\n\n    @height.setter\n    def height(self, value):\n        \"\"\"Setter for height with validation.\"\"\"\n        if value < 0:\n            raise ValueError(\"Height must be non-negative\")\n        self._height = value\n\n    def area(self):\n        \"\"\"Calculates and returns the area of the rectangle.\"\"\"\n        return self._width * self._height\n\n    def perimeter(self):\n        \"\"\"Calculates and returns the perimeter of the rectangle.\"\"\"\n        return 2 * (self._width + self._height)\n\n    def resize(self, factor):\n        \"\"\"Resizes the rectangle by a given factor.\"\"\"\n        if factor < 0:\n            raise ValueError(\"Resize factor must be non-negative\")\n        self._width *= factor\n        self._height *= factor\n\n    def display_info(self):\n        \"\"\"Prints the width, height, area, and perimeter of the rectangle.\"\"\"\n        print(f\"Width: {self._width}, Height: {self._height}, \"\n              f\"Area: {self.area()}, Perimeter: {self.perimeter()}\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The class Rectangle fully meets all specified requirements, including properties for width and height, methods for area, perimeter, resize, and display_info, and appropriate property setters and getters.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic in the class is completely correct and optimally structured. It correctly calculates the area, perimeter, and resizes the rectangle. The setters also correctly validate the input values.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The class comprehensively handles edge cases by validating that width, height, and resize factor are non-negative, raising a ValueError if they are not. This ensures that the rectangle dimensions remain valid.\"}}", "unit_tests": "[\"\\nassert Rectangle(3, 4).area() == 12\\n\", \"\\nassert Rectangle(5, 5).perimeter() == 20\\n\", \"\\nrect = Rectangle(2, 3)\\nrect.resize(2)\\nassert rect.width == 4 and rect.height == 6\\n\", \"\\nrect = Rectangle(10, 2)\\nrect.resize(0.5)\\nassert rect.width == 5 and rect.height == 1\\n\", \"\\nrect = Rectangle(7, 3)\\nrect.width = 14\\nassert rect.width == 14\\n\", \"\\nrect = Rectangle(7, 3)\\nrect.height = 6\\nassert rect.height == 6\\n\", \"\\ntry:\\n    rect = Rectangle(-1, 5)\\nexcept ValueError as e:\\n    assert str(e) == \\\"Width must be non-negative\\\"\\n\", \"\\ntry:\\n    rect = Rectangle(5, -1)\\nexcept ValueError as e:\\n    assert str(e) == \\\"Height must be non-negative\\\"\\n\", \"\\ntry:\\n    rect = Rectangle(5, 5)\\n    rect.resize(-1)\\nexcept ValueError as e:\\n    assert str(e) == \\\"Resize factor must be non-negative\\\"\\n\", \"\\nrect = Rectangle(8, 4)\\nassert rect.area() == 32 and rect.perimeter() == 24\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "7973a755be6956f7b83a22c6f00e21a8", "input": "You are tasked with implementing a Python class named `FileManager` that supports basic file operations. Your class should include the following methods:\n\n- `read_file(file_path)`: This method should read the contents of a file located at `file_path` and return it as a string. If the file does not exist, the method should return an empty string.\n- `write_file(file_path, content)`: This method should write the string `content` to the file located at `file_path`. If the file already exists, it should be overwritten.\n- `append_to_file(file_path, content)`: This method should append the string `content` to the end of the file located at `file_path`. If the file does not exist, it should be created.\n- `delete_file(file_path)`: This method should delete the file located at `file_path`. If the file does not exist, no action should be taken.\n\n**Sample Input/Output:**\n\nAssume the following file operations are performed in sequence:\n\n1. `write_file('example.txt', 'Hello, World!')`\n2. `read_file('example.txt')` should return `'Hello, World!'`\n3. `append_to_file('example.txt', ' Welcome to FileManager.')`\n4. `read_file('example.txt')` should return `'Hello, World! Welcome to FileManager.'`\n5. `delete_file('example.txt')`\n6. `read_file('example.txt')` should return `''`", "output": "```python\nimport os\n\nclass FileManager:\n    def read_file(self, file_path):\n        \"\"\"Read the contents of a file and return it as a string. Return an empty string if the file does not exist.\"\"\"\n        try:\n            with open(file_path, 'r') as file:\n                return file.read()\n        except FileNotFoundError:\n            return ''\n\n    def write_file(self, file_path, content):\n        \"\"\"Write the provided content to a file, overwriting the file if it already exists.\"\"\"\n        with open(file_path, 'w') as file:\n            file.write(content)\n\n    def append_to_file(self, file_path, content):\n        \"\"\"Append the provided content to the end of a file. Create the file if it does not exist.\"\"\"\n        with open(file_path, 'a') as file:\n            file.write(content)\n\n    def delete_file(self, file_path):\n        \"\"\"Delete the specified file. Do nothing if the file does not exist.\"\"\"\n        if os.path.exists(file_path):\n            os.remove(file_path)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by implementing all four required methods: read_file, write_file, append_to_file, and delete_file.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic in the solution is completely correct and optimally structured. Each method performs its intended file operation accurately.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution addresses some edge cases, such as checking if the file exists before attempting to delete it. However, it does not handle other potential issues like file access permissions, file not found errors during reading, or exceptions that may occur during file operations.\"}}", "unit_tests": "[\"\\nassert FileManager().write_file('test.txt', 'Hello, world!') is None\\n\", \"\\nassert FileManager().read_file('test.txt') == 'Hello, world!'\\n\", \"\\nassert FileManager().append_to_file('test.txt', ' Welcome!') is None\\n\", \"\\nassert FileManager().read_file('test.txt') == 'Hello, world! Welcome!'\\n\", \"\\nassert FileManager().delete_file('test.txt') is None\\n\", \"\\nassert os.path.exists('test.txt') == False\\n\", \"\\nFileManager().write_file('test2.txt', 'Line 1\\\\nLine 2\\\\nLine 3')\\nassert FileManager().read_file('test2.txt') == 'Line 1\\\\nLine 2\\\\nLine 3'\\n\", \"\\nFileManager().append_to_file('test2.txt', '\\\\nLine 4')\\nassert FileManager().read_file('test2.txt') == 'Line 1\\\\nLine 2\\\\nLine 3\\\\nLine 4'\\n\", \"\\nFileManager().delete_file('test2.txt')\\nassert os.path.exists('test2.txt') == False\\n\", \"\\nFileManager().write_file('test3.txt', 'Python')\\nFileManager().append_to_file('test3.txt', ' is fun!')\\nassert FileManager().read_file('test3.txt') == 'Python is fun!'\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "6ace7d9eed77f6832b8d9edffb6affc1", "input": "You are given a list of integers. Your task is to implement a function `find_even_squares` that processes this list and returns a new list containing the squares of all even numbers from the input list. The returned list should be sorted in ascending order. The original list should remain unchanged.\n\n**Input:**\n- A list of integers `numbers` (1 \u2264 len(numbers) \u2264 10^3), where each integer `x` satisfies -10^3 \u2264 x \u2264 10^3.\n\n**Output:**\n- A list of integers representing the squares of even numbers from the input list, sorted in ascending order.\n\n**Sample Input:**\n```\n[4, 7, 3, 10, 5, 6, 1]\n```\n\n**Sample Output:**\n```\n[16, 36, 100]\n```", "output": "```python\ndef find_even_squares(numbers):\n    \"\"\"\n    Returns a sorted list of squares of even numbers from the input list.\n\n    :param numbers: List of integers.\n    :return: List of integers representing the squares of even numbers, sorted in ascending order.\n    \"\"\"\n    even_squares = [x**2 for x in numbers if x % 2 == 0]\n    even_squares.sort()\n    return even_squares\n\n# Example usage\ninput_list = [4, 7, 3, 10, 5, 6, 1]\nprint(find_even_squares(input_list))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all the specified requirements: it returns a new list with squares of even numbers, does not modify the input list, and sorts the result in ascending order.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The list comprehension correctly filters even numbers and computes their squares, and the sort function arranges them in ascending order.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles typical cases well, but it does not explicitly handle edge cases like an empty list or a list with no even numbers. However, the code would still work correctly for these cases, returning an empty list as expected.\"}}", "unit_tests": "[\"\\nassert find_even_squares([4, 7, 3, 10, 5, 6, 1]) == [16, 100, 36]\\n\", \"\\nassert find_even_squares([2, 4, 6, 8, 10]) == [4, 16, 36, 64, 100]\\n\", \"\\nassert find_even_squares([1, 3, 5, 7, 9]) == []\\n\", \"\\nassert find_even_squares([-2, -4, -6, -8, -10]) == [4, 16, 36, 64, 100]\\n\", \"\\nassert find_even_squares([0, 1, 2, 3, 4]) == [0, 4, 16]\\n\", \"\\nassert find_even_squares([]) == []\\n\", \"\\nassert find_even_squares([12, 14, 16, 18, 20]) == [144, 196, 256, 324, 400]\\n\", \"\\nassert find_even_squares([11, 22, 33, 44, 55]) == [484, 1936]\\n\", \"\\nassert find_even_squares([-1, -3, -5, -7, -9, -11]) == []\\n\", \"\\nassert find_even_squares([100, 200, 300, 400, 500]) == [10000, 40000, 90000, 160000, 250000]\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "38ca1a5972bdf81b3b1797ebd0428d8b", "input": "You are given a list of `n` floating-point numbers. Your task is to implement a function `calculate_sum_of_squares` that computes the sum of the squares of these numbers. The function should be optimized for performance and should handle potential floating-point precision issues gracefully.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of floating-point numbers.\n- The second line contains `n` space-separated floating-point numbers.\n\n**Output:**\n- A single floating-point number representing the sum of the squares of the input numbers.\n\n**Sample Input:**\n```\n4\n1.5 2.3 3.7 4.1\n```\n\n**Sample Output:**\n```\n34.9\n```", "output": "```python\ndef calculate_sum_of_squares(numbers):\n    \"\"\"\n    Calculate the sum of squares of a list of floating-point numbers.\n    \n    :param numbers: List of floating-point numbers.\n    :return: Sum of the squares of the numbers.\n    \"\"\"\n    return sum(x * x for x in numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    numbers = list(map(float, data[1:]))\n    result = calculate_sum_of_squares(numbers)\n    print(f\"{result:.1f}\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function meets the basic requirement of calculating the sum of squares of a list of floating-point numbers. However, it does not explicitly address performance optimization or floating-point precision issues.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic for calculating the sum of squares is correct. However, the floating-point precision issue is not handled, which can lead to minor inaccuracies as seen in the example usage.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The solution does not handle unusual inputs such as an empty list, non-numeric values, or extremely large or small floating-point numbers that could cause precision issues.\"}}", "unit_tests": "[\"\\nassert calculate_sum_of_squares([1.0, 2.0, 3.0]) == 14.0\\n\", \"\\nassert calculate_sum_of_squares([0.0, 0.0, 0.0]) == 0.0\\n\", \"\\nassert calculate_sum_of_squares([-1.0, -2.0, -3.0]) == 14.0\\n\", \"\\nassert calculate_sum_of_squares([1.5, 2.3, 3.7, 4.1]) == 34.899999999999996\\n\", \"\\nassert calculate_sum_of_squares([1e-10, 2e-10, 3e-10]) == 1.4e-19\\n\", \"\\nassert calculate_sum_of_squares([1.1, 1.1, 1.1, 1.1]) == 4.840000000000001\\n\", \"\\nassert calculate_sum_of_squares([1000000.0, 2000000.0]) == 5000000000000.0\\n\", \"\\nassert calculate_sum_of_squares([]) == 0.0\\n\", \"\\nassert calculate_sum_of_squares([1.23456789, 9.87654321]) == 98.38699999999999\\n\", \"\\nassert calculate_sum_of_squares([1.0, -1.0, 1.0, -1.0]) == 4.0\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "943bac6a8b1d810f62b4e04c321a8954", "input": "You are tasked with implementing a `Point2D` class in Python that models a point in a 2D plane using `x` and `y` coordinates. Your class should support equality comparison between two `Point2D` objects based on their coordinates. Two points are considered equal if both their `x` and `y` coordinates are identical.\n\n**Input:**\n- The input will be handled within the class methods. You will not be provided with direct input values.\n\n**Output:**\n- The `__eq__` method should return `True` if the two `Point2D` objects have the same coordinates, otherwise `False`.\n\n**Sample Usage:**\n```python\npoint1 = Point2D(1, 2)\npoint2 = Point2D(1, 2)\npoint3 = Point2D(3, 4)\n\nprint(point1 == point2)  # Expected Output: True\nprint(point1 == point3)  # Expected Output: False\n```", "output": "```python\nclass Point2D:\n    def __init__(self, x, y):\n        \"\"\"\n        Initializes a new Point2D object with the given x and y coordinates.\n\n        :param x: The x-coordinate of the point.\n        :param y: The y-coordinate of the point.\n        \"\"\"\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        \"\"\"\n        Compares this Point2D object with another object for equality based on their coordinates.\n\n        :param other: The object to compare with.\n        :return: True if the other object is a Point2D and has the same coordinates, False otherwise.\n        \"\"\"\n        if isinstance(other, Point2D):\n            return self.x == other.x and self.y == other.y\n        return False\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement by creating a Point2D class with x and y coordinates and implementing the __eq__ method to compare two Point2D objects for equality based on their coordinates.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The __eq__ method accurately checks if the other object is an instance of Point2D and then compares the x and y coordinates.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the case where the other object is not an instance of Point2D by returning False. However, it does not handle cases where x or y might be None or other non-comparable types, which could be considered edge cases.\"}}", "unit_tests": "[\"\\nassert Point2D(1, 2) == Point2D(1, 2)\\n\", \"\\nassert Point2D(0, 0) == Point2D(0, 0)\\n\", \"\\nassert Point2D(-1, -1) == Point2D(-1, -1)\\n\", \"\\nassert Point2D(10, 20) != Point2D(20, 10)\\n\", \"\\nassert Point2D(5, 5) != Point2D(5, 6)\\n\", \"\\nassert Point2D(3, 4) != Point2D(4, 3)\\n\", \"\\nassert Point2D(100, 200) != Point2D(100, 201)\\n\", \"\\nassert Point2D(0, 0) != Point2D(1, 1)\\n\", \"\\nassert Point2D(1, 1) != \\\"Point2D(1, 1)\\\"\\n\", \"\\nassert Point2D(1, 1) != None\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "876243c4083568335bab891014e31958", "input": "You are given a list of tuples, where each tuple consists of a product name (a string) and its price (a float). Your task is to implement a function `sort_products_by_price` that sorts the list of tuples in ascending order based on the price. If two products have the same price, their relative order should remain unchanged.\n\n**Input:**\n- A list of tuples, where each tuple contains a product name and its price.\n\n**Output:**\n- A list of tuples sorted by price in ascending order.\n\n**Sample Input:**\n```python\n[(\"Apple\", 1.20), (\"Banana\", 0.99), (\"Cherry\", 1.20), (\"Date\", 2.50)]\n```\n\n**Sample Output:**\n```python\n[(\"Banana\", 0.99), (\"Apple\", 1.20), (\"Cherry\", 1.20), (\"Date\", 2.50)]\n```", "output": "```python\ndef sort_products_by_price(products):\n    \"\"\"\n    Sorts a list of product tuples by price in ascending order.\n    If two products have the same price, their order remains unchanged.\n\n    :param products: List of tuples, where each tuple contains a product name and its price.\n    :return: List of tuples sorted by price in ascending order.\n    \"\"\"\n    return sorted(products, key=lambda product: product[1])\n\n# Example usage:\nproducts = [(\"Apple\", 1.20), (\"Banana\", 0.99), (\"Cherry\", 1.20), (\"Date\", 2.50)]\nsorted_products = sort_products_by_price(products)\nprint(sorted_products)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by sorting the list of tuples by price in ascending order while maintaining the order of products with the same price.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The use of the sorted function with a lambda function as the key ensures that the list is sorted by price while maintaining the original order for products with the same price.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the basic edge cases such as products with the same price. However, it does not explicitly handle cases like an empty list or non-numeric prices, which are not specified in the requirements but could be considered for robustness.\"}}", "unit_tests": "[\"\\nassert sort_products_by_price([(\\\"Apple\\\", 1.20), (\\\"Banana\\\", 0.99), (\\\"Cherry\\\", 1.20), (\\\"Date\\\", 2.50)]) == [(\\\"Banana\\\", 0.99), (\\\"Apple\\\", 1.20), (\\\"Cherry\\\", 1.20), (\\\"Date\\\", 2.50)]\\n\", \"\\nassert sort_products_by_price([(\\\"Grape\\\", 2.00), (\\\"Orange\\\", 1.50), (\\\"Peach\\\", 1.50), (\\\"Plum\\\", 3.00)]) == [(\\\"Orange\\\", 1.50), (\\\"Peach\\\", 1.50), (\\\"Grape\\\", 2.00), (\\\"Plum\\\", 3.00)]\\n\", \"\\nassert sort_products_by_price([(\\\"Kiwi\\\", 1.00), (\\\"Lemon\\\", 1.00), (\\\"Mango\\\", 1.00)]) == [(\\\"Kiwi\\\", 1.00), (\\\"Lemon\\\", 1.00), (\\\"Mango\\\", 1.00)]\\n\", \"\\nassert sort_products_by_price([(\\\"Nectarine\\\", 3.50), (\\\"Papaya\\\", 2.75), (\\\"Quince\\\", 2.75), (\\\"Raspberry\\\", 4.00)]) == [(\\\"Papaya\\\", 2.75), (\\\"Quince\\\", 2.75), (\\\"Nectarine\\\", 3.50), (\\\"Raspberry\\\", 4.00)]\\n\", \"\\nassert sort_products_by_price([(\\\"Strawberry\\\", 5.00)]) == [(\\\"Strawberry\\\", 5.00)]\\n\", \"\\nassert sort_products_by_price([]) == []\\n\", \"\\nassert sort_products_by_price([(\\\"Tomato\\\", 0.75), (\\\"Ugli\\\", 0.75), (\\\"Vanilla\\\", 0.75), (\\\"Watermelon\\\", 0.75)]) == [(\\\"Tomato\\\", 0.75), (\\\"Ugli\\\", 0.75), (\\\"Vanilla\\\", 0.75), (\\\"Watermelon\\\", 0.75)]\\n\", \"\\nassert sort_products_by_price([(\\\"Xigua\\\", 1.25), (\\\"Yam\\\", 1.25), (\\\"Zucchini\\\", 1.25), (\\\"Avocado\\\", 1.25)]) == [(\\\"Xigua\\\", 1.25), (\\\"Yam\\\", 1.25), (\\\"Zucchini\\\", 1.25), (\\\"Avocado\\\", 1.25)]\\n\", \"\\nassert sort_products_by_price([(\\\"Blueberry\\\", 2.25), (\\\"Cantaloupe\\\", 2.25), (\\\"Dragonfruit\\\", 2.25), (\\\"Elderberry\\\", 2.25)]) == [(\\\"Blueberry\\\", 2.25), (\\\"Cantaloupe\\\", 2.25), (\\\"Dragonfruit\\\", 2.25), (\\\"Elderberry\\\", 2.25)]\\n\", \"\\nassert sort_products_by_price([(\\\"Fig\\\", 3.75), (\\\"Grapefruit\\\", 3.75), (\\\"Honeydew\\\", 3.75), (\\\"Icaco\\\", 3.75)]) == [(\\\"Fig\\\", 3.75), (\\\"Grapefruit\\\", 3.75), (\\\"Honeydew\\\", 3.75), (\\\"Icaco\\\", 3.75)]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "6665107a4ce0f8e1837b09330d3453a5", "input": "You are given an array of integers `numbers` and an integer `target`. Your task is to find two distinct indices `i` and `j` such that `numbers[i] + numbers[j] = target`. If such a pair exists, return the indices in ascending order as a list `[i, j]`. If no such pair exists, return an empty list. The original array should not be modified.\n\n**Constraints:**\n- `2 <= len(numbers) <= 10^4`\n- `-10^9 <= numbers[i], target <= 10^9`\n\n**Sample Input:**\n```\nnumbers = [2, 7, 11, 15]\ntarget = 9\n```\n\n**Sample Output:**\n```\n[0, 1]\n```", "output": "```python\ndef find_two_sum_indices(numbers, target):\n    \"\"\"\n    Finds two distinct indices in the list 'numbers' such that the numbers at these indices add up to 'target'.\n    \n    :param numbers: List of integers.\n    :param target: Integer target sum.\n    :return: List of two indices if a pair is found, otherwise an empty list.\n    \"\"\"\n    num_to_index = {}\n    for index, num in enumerate(numbers):\n        complement = target - num\n        if complement in num_to_index:\n            return [num_to_index[complement], index]\n        num_to_index[num] = index\n    return []\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements. It returns the indices of the two numbers that add up to the target, does not modify the input list, and returns the indices in ascending order.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The solution is completely correct and optimally structured. It uses a hash map to store the numbers and their indices, allowing for efficient lookup of the complement of each number.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as when no pair exists (returns an empty list) and when the same number is used twice. However, it does not explicitly handle cases with multiple valid pairs; it returns the first valid pair it finds.\"}}", "unit_tests": "[\"\\nassert find_two_sum_indices([2, 7, 11, 15], 9) == [0, 1]\\n\", \"\\nassert find_two_sum_indices([3, 2, 4], 6) == [1, 2]\\n\", \"\\nassert find_two_sum_indices([3, 3], 6) == [0, 1]\\n\", \"\\nassert find_two_sum_indices([1, 2, 3, 4, 5], 10) == [3, 4]\\n\", \"\\nassert find_two_sum_indices([1, 2, 3, 4, 5], 8) == [2, 4]\\n\", \"\\nassert find_two_sum_indices([1, 2, 3, 4, 5], 11) == []\\n\", \"\\nassert find_two_sum_indices([], 0) == []\\n\", \"\\nassert find_two_sum_indices([1], 1) == []\\n\", \"\\nassert find_two_sum_indices([0, 4, 3, 0], 0) == [0, 3]\\n\", \"\\nassert find_two_sum_indices([-1, -2, -3, -4, -5], -8) == [2, 4]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "ceac1c5789b72f33cdd02337b23d9cfc", "input": "You are tasked with implementing a `Book` class to manage book information. The class should have the following functionalities:\n\n- An initializer method that accepts three parameters: `title` (a string), `author` (a string), and `pages` (an integer). These parameters should be used to set the respective attributes of the class.\n- A method `describe_book` that returns a formatted string. The format should be \"Title: <title>, Author: <author>, Pages: <pages>\".\n\n**Sample Input:**\n- `title = \"The Great Gatsby\"`\n- `author = \"F. Scott Fitzgerald\"`\n- `pages = 180`\n\n**Sample Output:**\n- `\"Title: The Great Gatsby, Author: F. Scott Fitzgerald, Pages: 180\"`", "output": "```python\nclass Book:\n    def __init__(self, title, author, pages):\n        \"\"\"\n        Initializes a new Book instance with the given title, author, and number of pages.\n\n        :param title: The title of the book (string).\n        :param author: The author of the book (string).\n        :param pages: The number of pages in the book (integer).\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def describe_book(self):\n        \"\"\"\n        Returns a string describing the book in the format:\n        \"Title: <title>, Author: <author>, Pages: <pages>\".\n\n        :return: A formatted string describing the book.\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, Pages: {self.pages}\"\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements. It includes an initializer method to set the attributes and a method to describe the book in the specified format.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The class and methods work as intended without any errors.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"Minimal consideration of unusual inputs. The solution does not handle cases where the inputs might be of incorrect types or are None.\"}}", "unit_tests": "[\"\\nassert Book(\\\"The Great Gatsby\\\", \\\"F. Scott Fitzgerald\\\", 180).describe_book() == \\\"Title: The Great Gatsby, Author: F. Scott Fitzgerald, Pages: 180\\\"\\n\", \"\\nassert Book(\\\"1984\\\", \\\"George Orwell\\\", 328).describe_book() == \\\"Title: 1984, Author: George Orwell, Pages: 328\\\"\\n\", \"\\nassert Book(\\\"To Kill a Mockingbird\\\", \\\"Harper Lee\\\", 281).describe_book() == \\\"Title: To Kill a Mockingbird, Author: Harper Lee, Pages: 281\\\"\\n\", \"\\nassert Book(\\\"Pride and Prejudice\\\", \\\"Jane Austen\\\", 432).describe_book() == \\\"Title: Pride and Prejudice, Author: Jane Austen, Pages: 432\\\"\\n\", \"\\nassert Book(\\\"The Catcher in the Rye\\\", \\\"J.D. Salinger\\\", 277).describe_book() == \\\"Title: The Catcher in the Rye, Author: J.D. Salinger, Pages: 277\\\"\\n\", \"\\nassert Book(\\\"\\\", \\\"\\\", 0).describe_book() == \\\"Title: , Author: , Pages: 0\\\"\\n\", \"\\nassert Book(\\\"Short Story\\\", \\\"Author Name\\\", 10).describe_book() == \\\"Title: Short Story, Author: Author Name, Pages: 10\\\"\\n\", \"\\nassert Book(\\\"A Tale of Two Cities\\\", \\\"Charles Dickens\\\", 328).describe_book() == \\\"Title: A Tale of Two Cities, Author: Charles Dickens, Pages: 328\\\"\\n\", \"\\nassert Book(\\\"War and Peace\\\", \\\"Leo Tolstoy\\\", 1225).describe_book() == \\\"Title: War and Peace, Author: Leo Tolstoy, Pages: 1225\\\"\\n\", \"\\nassert Book(\\\"Moby Dick\\\", \\\"Herman Melville\\\", 635).describe_book() == \\\"Title: Moby Dick, Author: Herman Melville, Pages: 635\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "973aea11d75b12eafa1867970a25ebea", "input": "You are given an array of integers `lst` and an integer `target`. Your task is to find all unique pairs of numbers in `lst` that add up to `target`. Each pair should be represented as a tuple, and the list of pairs should not contain any duplicates. Return the list of unique pairs.\n\n**Constraints:**\n- 1 \u2264 len(lst) \u2264 10^4\n- -10^5 \u2264 lst[i] \u2264 10^5\n- -2 * 10^5 \u2264 target \u2264 2 * 10^5\n\n**Sample Input:**\n```\nlst = [1, 5, 7, -1, 5]\ntarget = 6\n```\n\n**Sample Output:**\n```\n[(1, 5), (7, -1)]\n```", "output": "```python\ndef find_unique_pairs(lst, target):\n    \"\"\"\n    Finds all unique pairs of numbers in the list that add up to the target sum.\n    \n    :param lst: List of integers.\n    :param target: Integer representing the target sum.\n    :return: List of unique pairs (tuples) that add up to the target.\n    \"\"\"\n    seen = set()\n    unique_pairs = set()\n    \n    for number in lst:\n        complement = target - number\n        if complement in seen:\n            unique_pairs.add((min(number, complement), max(number, complement)))\n        seen.add(number)\n    \n    return list(unique_pairs)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by finding all unique pairs of numbers in the list that add up to the target sum, ensuring no duplicate pairs are included in the result.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It uses a set to track seen numbers and another set to store unique pairs, ensuring that each pair is only added once in sorted order to avoid duplicates.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases, such as lists with no valid pairs, lists with all identical elements, and lists with negative numbers. It also correctly handles cases where the list contains duplicate numbers that could form valid pairs.\"}}", "unit_tests": "[\"\\nassert find_unique_pairs([1, 2, 3, 4, 5], 5) == [(1, 4), (2, 3)]\\n\", \"\\nassert find_unique_pairs([1, 2, 3, 4, 5], 10) == []\\n\", \"\\nassert find_unique_pairs([1, 1, 2, 45, 46, 46], 47) == [(1, 46)]\\n\", \"\\nassert find_unique_pairs([0, 0, 0, 0], 0) == [(0, 0)]\\n\", \"\\nassert find_unique_pairs([-1, 0, 1, 2, -1, -4], 0) == [(-1, 1)]\\n\", \"\\nassert find_unique_pairs([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 11) == [(10, 1), (5, 6), (4, 7)]\\n\", \"\\nassert find_unique_pairs([], 5) == []\\n\", \"\\nassert find_unique_pairs([5], 5) == []\\n\", \"\\nassert find_unique_pairs([3, 3, 3, 3, 3], 6) == [(3, 3)]\\n\", \"\\nassert find_unique_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [(1, 9), (2, 8), (3, 7), (4, 6)]\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"fail\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"fail\"]", "average_test_score": "0.6"}
{"id": "3e720ea1949e2ccda88fb9690b00feec", "input": "You are tasked with implementing a function that reads data from a JSON file and returns it as a Python dictionary. Your function should handle two types of errors gracefully: if the file does not exist, or if the file is not a valid JSON file, it should return an empty dictionary. \n\n**Function Signature:**\n```python\ndef read_json_file(filename: str) -> dict:\n```\n\n**Constraints:**\n- The filename is a string representing the path to the JSON file.\n- The function should return a dictionary containing the data from the JSON file, or an empty dictionary if an error occurs.\n\n**Sample Input/Output:**\n- Input: `read_json_file(\"data.json\")` where `data.json` contains `{\"name\": \"John\", \"age\": 30}`\n- Output: `{\"name\": \"John\", \"age\": 30}`\n- Input: `read_json_file(\"nonexistent.json\")`\n- Output: `{}`\n- Input: `read_json_file(\"invalid.json\")` where `invalid.json` contains `{\"name\": \"John\", \"age\": 30`\n- Output: `{}`", "output": "```python\nimport json\nimport os\n\ndef read_json_file(filename: str) -> dict:\n    \"\"\"\n    Reads a JSON file and returns the data as a Python dictionary.\n    If the file does not exist or is not a valid JSON file, returns an empty dictionary.\n    \n    :param filename: The path to the JSON file.\n    :return: A dictionary containing the data from the JSON file, or an empty dictionary if an error occurs.\n    \"\"\"\n    if not os.path.exists(filename):\n        return {}\n    \n    try:\n        with open(filename, 'r') as file:\n            data = json.load(file)\n        return data\n    except json.JSONDecodeError:\n        return {}\n    except Exception:\n        return {}\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements by reading a JSON file and returning the data as a Python dictionary. It also handles cases where the file does not exist or is not a valid JSON file by returning an empty dictionary.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It checks if the file exists, attempts to open and parse the JSON file, and handles exceptions appropriately.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases by checking if the file exists and catching JSON decoding errors and other exceptions, ensuring that an empty dictionary is returned in all error scenarios.\"}}", "unit_tests": "[\"\\nassert read_json_file(\\\"non_existent_file.json\\\") == {}\\n\", \"\\nassert read_json_file(\\\"invalid_json_file.json\\\") == {}\\n\", \"\\nassert read_json_file(\\\"valid_json_file.json\\\") == {\\\"key\\\": \\\"value\\\"}\\n\", \"\\nassert read_json_file(\\\"empty_file.json\\\") == {}\\n\", \"\\nassert read_json_file(\\\"file_with_array.json\\\") == [1, 2, 3]\\n\", \"\\nassert read_json_file(\\\"file_with_nested_objects.json\\\") == {\\\"outer\\\": {\\\"inner\\\": \\\"value\\\"}}\\n\", \"\\nassert read_json_file(\\\"file_with_booleans.json\\\") == {\\\"true_value\\\": True, \\\"false_value\\\": False}\\n\", \"\\nassert read_json_file(\\\"file_with_null.json\\\") == {\\\"null_value\\\": None}\\n\", \"\\nassert read_json_file(\\\"file_with_numbers.json\\\") == {\\\"integer\\\": 42, \\\"float\\\": 3.14}\\n\", \"\\nassert read_json_file(\\\"file_with_strings.json\\\") == {\\\"string\\\": \\\"Hello, world!\\\"}\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"fail\", \"pass\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0.3"}
{"id": "cd1de3a4770ca54d8ef69c5feb211689", "input": "You are given a list of `n` words and a `target` word. Your task is to determine the word in the list that is the closest match to the `target` word based on the Levenshtein distance. The Levenshtein distance between two strings is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. Implement a function `closest_match(words, target)` that takes a list of words and a target word as input and returns the closest match.\n\n**Input:**\n- A list of words `words` (1 \u2264 len(words) \u2264 1000), where each word consists of lowercase English letters and has a length between 1 and 20.\n- A target word `target` consisting of lowercase English letters with a length between 1 and 20.\n\n**Output:**\n- The closest match to the target word from the list of words.\n\n**Sample Input:**\n```python\nwords = [\"kitten\", \"sitting\", \"kitchen\", \"biting\"]\ntarget = \"kitten\"\n```\n\n**Sample Output:**\n```python\n\"kitten\"\n```", "output": "```python\ndef levenshtein_distance(s1, s2):\n    \"\"\"\n    Calculate the Levenshtein distance between two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Levenshtein distance between s1 and s2\n    \"\"\"\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]\n\ndef closest_match(words, target):\n    \"\"\"\n    Find the closest match to the target word from a list of words based on Levenshtein distance.\n    \n    :param words: List of words\n    :param target: Target word\n    :return: Closest match to the target word\n    \"\"\"\n    closest = words[0]\n    smallest_distance = levenshtein_distance(closest, target)\n    \n    for word in words[1:]:\n        distance = levenshtein_distance(word, target)\n        if distance < smallest_distance:\n            smallest_distance = distance\n            closest = word\n            \n    return closest\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by implementing the Levenshtein distance calculation and using it to find the closest match in the list of words to the target word.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The Levenshtein distance function is correctly implemented, and the closest_match function accurately finds the word with the smallest distance to the target.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as when the list of words is empty (which would raise an error), and when the target word is an exact match for one of the words in the list. However, it does not handle the case where the input list is empty, which should be explicitly managed to avoid errors.\"}}", "unit_tests": "[\"\\nassert closest_match([\\\"apple\\\", \\\"apply\\\", \\\"ample\\\"], \\\"appel\\\") == \\\"apple\\\"\\n\", \"\\nassert closest_match([\\\"kitten\\\", \\\"sitting\\\", \\\"kitchen\\\"], \\\"kitten\\\") == \\\"kitten\\\"\\n\", \"\\nassert closest_match([\\\"flaw\\\", \\\"lawn\\\", \\\"flawed\\\"], \\\"lawn\\\") == \\\"lawn\\\"\\n\", \"\\nassert closest_match([\\\"intention\\\", \\\"execution\\\", \\\"intentional\\\"], \\\"execution\\\") == \\\"execution\\\"\\n\", \"\\nassert closest_match([\\\"algorithm\\\", \\\"altruism\\\", \\\"algorithmic\\\"], \\\"algorithm\\\") == \\\"algorithm\\\"\\n\", \"\\nassert closest_match([\\\"distance\\\", \\\"difference\\\", \\\"dissimilar\\\"], \\\"distance\\\") == \\\"distance\\\"\\n\", \"\\nassert closest_match([\\\"levenshtein\\\", \\\"levenschtein\\\", \\\"levinsthein\\\"], \\\"levenshtein\\\") == \\\"levenshtein\\\"\\n\", \"\\nassert closest_match([\\\"hello\\\", \\\"hallo\\\", \\\"hullo\\\"], \\\"hallo\\\") == \\\"hallo\\\"\\n\", \"\\nassert closest_match([\\\"programming\\\", \\\"programing\\\", \\\"progrmming\\\"], \\\"programming\\\") == \\\"programming\\\"\\n\", \"\\nassert closest_match([\\\"test\\\", \\\"tset\\\", \\\"sett\\\"], \\\"test\\\") == \\\"test\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "2affe7e9ff1269589e29048dad5d5e20", "input": "You are given a list of integers. Your task is to determine the maximum and minimum values in the list. Implement a function `find_max_min(lst)` that accepts a list of integers `lst` and returns a tuple with the maximum and minimum values. If the list is empty, the function should return `None`.\n\n**Sample Input:**\n```\n[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n```\n\n**Sample Output:**\n```\n(9, 1)\n```", "output": "```python\ndef find_max_min(lst):\n    \"\"\"\n    Finds the maximum and minimum values in a list of integers.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the maximum and minimum values, or None if the list is empty.\n    \"\"\"\n    if not lst:\n        return None\n    \n    max_val = lst[0]\n    min_val = lst[0]\n    \n    for num in lst:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    return (max_val, min_val)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by finding and returning the maximum and minimum values from the list of integers.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. It initializes max and min with the first element and iterates through the list to find the correct max and min values.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the edge case of an empty list by returning None. However, it could be improved by raising an exception with a descriptive error message instead of returning None.\"}}", "unit_tests": "[\"\\nassert find_max_min([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (9, 1)\\n\", \"\\nassert find_max_min([10, 20, 30, 40, 50]) == (50, 10)\\n\", \"\\nassert find_max_min([-10, -20, -30, -40, -50]) == (-10, -50)\\n\", \"\\nassert find_max_min([0, 0, 0, 0, 0]) == (0, 0)\\n\", \"\\nassert find_max_min([100]) == (100, 100)\\n\", \"\\nassert find_max_min([-100]) == (-100, -100)\\n\", \"\\nassert find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, 1)\\n\", \"\\nassert find_max_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == (10, 1)\\n\", \"\\nassert find_max_min([]) == None\\n\", \"\\nassert find_max_min([5, 5, 5, 5, 5, 5]) == (5, 5)\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "e2fb27d839ab9d38989c1fba8753e36e", "input": "You are given a list of integers. Your task is to create a function that returns a new list where each element is the cube of the corresponding element in the input list. For instance, if the input list is `[1, 2, 3, 4]`, the output should be `[1, 8, 27, 64]`.\n\n**Input:**\n- A list of integers `input_list` (1 \u2264 len(input_list) \u2264 1000), where each integer `x` satisfies -1000 \u2264 x \u2264 1000.\n\n**Output:**\n- A list of integers where each element is the cube of the corresponding element in the input list.\n\n**Sample Input:**\n```\n[1, 2, 3, 4]\n```\n\n**Sample Output:**\n```\n[1, 8, 27, 64]\n```", "output": "```python\ndef cube_elements(input_list):\n    \"\"\"\n    Returns a new list where each element is the cube of the corresponding element in the input list.\n\n    :param input_list: List of integers\n    :return: List of integers where each element is the cube of the corresponding element in the input list\n    \"\"\"\n    return [x**3 for x in input_list]\n\n# Example usage:\nexample_input = [1, 2, 3, 4]\nexample_output = cube_elements(example_input)\nprint(example_output)  # Prints: [1, 8, 27, 64]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement by generating a new list where each element is the cube of the corresponding element in the input list.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The list comprehension correctly computes the cube of each element in the input list.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution does not explicitly handle edge cases such as an empty list, non-integer values, or very large integers. However, it does work correctly for the provided example and typical integer inputs.\"}}", "unit_tests": "[\"\\nassert cube_elements([1, 2, 3, 4]) == [1, 8, 27, 64]\\n\", \"\\nassert cube_elements([0, 0, 0]) == [0, 0, 0]\\n\", \"\\nassert cube_elements([-1, -2, -3]) == [-1, -8, -27]\\n\", \"\\nassert cube_elements([5, 10, 15]) == [125, 1000, 3375]\\n\", \"\\nassert cube_elements([2, 4, 6, 8]) == [8, 64, 216, 512]\\n\", \"\\nassert cube_elements([]) == []\\n\", \"\\nassert cube_elements([10]) == [1000]\\n\", \"\\nassert cube_elements([-10, 0, 10]) == [-1000, 0, 1000]\\n\", \"\\nassert cube_elements([7, -7, 7]) == [343, -343, 343]\\n\", \"\\nassert cube_elements([1, -1, 1, -1]) == [1, -1, 1, -1]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "a6b5b1ead53423603a47239cd05087a0", "input": "You are given a sorted array `arr` of `n` distinct integers and a target integer `target`. Your task is to implement a function `binary_search(arr, target)` that performs a binary search to find the index of the `target` element in the array. If the `target` is present in the array, return its index; otherwise, return -1.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 10^5), the number of elements in the array.\n- The second line contains `n` space-separated integers `arr[0], arr[1], ..., arr[n-1]` (-10^9 \u2264 arr[i] \u2264 10^9), the elements of the sorted array.\n- The third line contains an integer `target` (-10^9 \u2264 target \u2264 10^9), the element to search for.\n\n**Output:**\n- Print a single integer, the index of the `target` element if it exists in the array, or -1 if it does not exist.\n\n**Sample Input:**\n```\n5\n1 2 3 4 5\n3\n```\n\n**Sample Output:**\n```\n2\n```\n\n**Sample Input:**\n```\n5\n1 2 3 4 5\n6\n```\n\n**Sample Output:**\n```\n-1\n```", "output": "```python\ndef binary_search(arr, target):\n    \"\"\"\n    Perform a binary search on a sorted array to find the index of the target element.\n    \n    Parameters:\n    arr (list of int): The sorted array to search.\n    target (int): The target element to find.\n    \n    Returns:\n    int: The index of the target element if it exists in the array, otherwise -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements by implementing a binary search on a sorted array and returning the correct index or -1 if the target is not found.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic of the binary search is completely correct and consistently implemented. The function correctly updates the search boundaries and returns the correct index or -1 as expected.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles most edge cases, such as an empty array, a target that is not in the array, and targets at the boundaries of the array. However, it does not explicitly handle cases where the input array is not sorted, which is an implicit assumption of the problem.\"}}", "unit_tests": "[\"\\nassert binary_search([1, 2, 3, 4, 5], 3) == 2\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5], 1) == 0\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5], 5) == 4\\n\", \"\\nassert binary_search([1, 2, 3, 4, 5], 6) == -1\\n\", \"\\nassert binary_search([], 1) == -1\\n\", \"\\nassert binary_search([1], 1) == 0\\n\", \"\\nassert binary_search([1], 2) == -1\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11], 7) == 3\\n\", \"\\nassert binary_search([1, 3, 5, 7, 9, 11], 12) == -1\\n\", \"\\nassert binary_search([-10, -5, 0, 5, 10], 0) == 2\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "d3245009ebd0855d0cc8cf57da96b494", "input": "You are given an integer `n`. Your task is to write a function `count_odd_even_digits` that returns a dictionary with keys `'odd'` and `'even'`. The values should represent the count of odd and even digits in the integer `n`, respectively. If `n` is `0`, the function should return `{'odd': 0, 'even': 1}`.\n\n**Input:**\n- An integer `n` where `-10^9 <= n <= 10^9`.\n\n**Output:**\n- A dictionary with keys `'odd'` and `'even'` and their respective counts.\n\n**Sample Input:**\n- `123456`\n- `0`\n- `-789`\n\n**Sample Output:**\n- `{'odd': 3, 'even': 3}`\n- `{'odd': 0, 'even': 1}`\n- `{'odd': 3, 'even': 0}`", "output": "```python\ndef count_odd_even_digits(n):\n    \"\"\"\n    Returns a dictionary with the count of odd and even digits in the given integer n.\n    \n    Parameters:\n    n (int): The integer to analyze.\n    \n    Returns:\n    dict: A dictionary with keys 'odd' and 'even' representing the counts of odd and even digits.\n    \"\"\"\n    if n == 0:\n        return {'odd': 0, 'even': 1}\n    \n    counts = {'odd': 0, 'even': 0}\n    n = abs(n)\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            counts['even'] += 1\n        else:\n            counts['odd'] += 1\n        n = n // 10\n    \n    return counts\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all specified requirements, including handling the special case where the input is 0 and correctly counting odd and even digits for any integer input.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly handles negative numbers by taking the absolute value and accurately counts the odd and even digits.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including negative numbers and the special case where the input is 0.\"}}", "unit_tests": "[\"\\nassert count_odd_even_digits(0) == {'odd': 0, 'even': 1}\\n\", \"\\nassert count_odd_even_digits(123456) == {'odd': 3, 'even': 3}\\n\", \"\\nassert count_odd_even_digits(111111) == {'odd': 6, 'even': 0}\\n\", \"\\nassert count_odd_even_digits(24680) == {'odd': 0, 'even': 5}\\n\", \"\\nassert count_odd_even_digits(-987654321) == {'odd': 5, 'even': 4}\\n\", \"\\nassert count_odd_even_digits(13579) == {'odd': 5, 'even': 0}\\n\", \"\\nassert count_odd_even_digits(222222) == {'odd': 0, 'even': 6}\\n\", \"\\nassert count_odd_even_digits(101010) == {'odd': 3, 'even': 3}\\n\", \"\\nassert count_odd_even_digits(9876543210) == {'odd': 5, 'even': 5}\\n\", \"\\nassert count_odd_even_digits(-1) == {'odd': 1, 'even': 0}\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "317ec2bb7f51abacf773db57ccb2fd92", "input": "You are given two strings, `text` and `pattern`. Your task is to write a function `count_pattern_occurrences(text, pattern)` that returns the number of times `pattern` appears in `text`, including overlapping occurrences. \n\n**Input:**\n- The first line contains the string `text` (1 \u2264 |text| \u2264 10^5).\n- The second line contains the string `pattern` (1 \u2264 |pattern| \u2264 |text|).\n\n**Output:**\n- Print a single integer representing the number of times `pattern` appears in `text`.\n\n**Sample Input:**\n```\nabcabcabc\nabc\n```\n\n**Sample Output:**\n```\n3\n```\n\n**Sample Input:**\n```\naaaa\naa\n```\n\n**Sample Output:**\n```\n3\n```", "output": "```python\ndef count_pattern_occurrences(text, pattern):\n    \"\"\"\n    Counts the number of times the pattern appears in the text, including overlapping occurrences.\n\n    :param text: The string in which to search for the pattern.\n    :param pattern: The string pattern to search for in the text.\n    :return: The number of times the pattern appears in the text.\n    \"\"\"\n    count = 0\n    pattern_length = len(pattern)\n    for i in range(len(text) - pattern_length + 1):\n        if text[i:i + pattern_length] == pattern:\n            count += 1\n    return count\n\n# Example usage\ntext = 'abcabcabc'\npattern = 'abc'\nprint(count_pattern_occurrences(text, pattern))  # Output: 3\n\ntext = 'aaaa'\npattern = 'aa'\nprint(count_pattern_occurrences(text, pattern))  # Output: 3\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by counting the number of times the pattern appears in the text, including overlapping occurrences.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It iterates through the text and checks for the pattern at each position, including overlapping ones.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as overlapping patterns and patterns that do not appear in the text. However, it does not explicitly handle cases where the pattern is longer than the text, which would naturally return 0 but could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert count_pattern_occurrences('abcabcabc', 'abc') == 3\\n\", \"\\nassert count_pattern_occurrences('aaaa', 'aa') == 3\\n\", \"\\nassert count_pattern_occurrences('ababab', 'aba') == 2\\n\", \"\\nassert count_pattern_occurrences('hello world', 'o') == 2\\n\", \"\\nassert count_pattern_occurrences('mississippi', 'issi') == 1\\n\", \"\\nassert count_pattern_occurrences('aaaaa', 'a') == 5\\n\", \"\\nassert count_pattern_occurrences('abc', 'abcd') == 0\\n\", \"\\nassert count_pattern_occurrences('', 'a') == 0\\n\", \"\\nassert count_pattern_occurrences('abc', '') == 0\\n\", \"\\nassert count_pattern_occurrences('', '') == 0\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.7"}
{"id": "bf58c283447867cdc8baf6ebcb574b29", "input": "You are given a JSON file named `data.json` that contains a list of records. Each record is a dictionary with keys and values. Your task is to write a Python function `convert_json_to_dict(filename)` that reads the JSON file and returns the data as a nested dictionary. Use the `json` module for this task.\n\n**Input:**\n- A JSON file `data.json` with the following structure:\n```json\n[\n    {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"},\n    {\"name\": \"Bob\", \"age\": 25, \"city\": \"Los Angeles\"}\n]\n```\n\n**Output:**\n- A nested dictionary representing the contents of the JSON file:\n```python\n[\n    {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"},\n    {\"name\": \"Bob\", \"age\": 25, \"city\": \"Los Angeles\"}\n]\n```", "output": "```python\nimport json\n\ndef convert_json_to_dict(filename):\n    \"\"\"\n    Reads a JSON file and converts it into a nested dictionary.\n\n    Parameters:\n    filename (str): The name of the JSON file to be read.\n\n    Returns:\n    dict: The nested dictionary representation of the JSON file.\n    \"\"\"\n    with open(filename, 'r') as file:\n        data = json.load(file)\n    return data\n\n# Example usage:\n# nested_dict = convert_json_to_dict(\"data.json\")\n# print(nested_dict)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement by defining a function `convert_json_to_dict` that reads a JSON file and returns the data as a nested dictionary using the `json` module.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The function correctly opens the file, reads the JSON data, and returns it as a nested dictionary.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The solution does not handle potential edge cases such as file not found, invalid JSON format, or issues with file permissions. Minimal consideration of unusual inputs is present.\"}}", "unit_tests": "[\"\\nassert convert_json_to_dict(\\\"test1.json\\\") == {\\\"name\\\": \\\"John\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\"}\\n\", \"\\nassert convert_json_to_dict(\\\"test2.json\\\") == {\\\"employees\\\": [{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 25}, {\\\"name\\\": \\\"Bob\\\", \\\"age\\\": 30}]}\\n\", \"\\nassert convert_json_to_dict(\\\"test3.json\\\") == {\\\"fruits\\\": [\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"], \\\"vegetables\\\": [\\\"carrot\\\", \\\"broccoli\\\"]}\\n\", \"\\nassert convert_json_to_dict(\\\"test4.json\\\") == {\\\"person\\\": {\\\"name\\\": \\\"Charlie\\\", \\\"address\\\": {\\\"street\\\": \\\"123 Main St\\\", \\\"city\\\": \\\"Los Angeles\\\"}}}\\n\", \"\\nassert convert_json_to_dict(\\\"test5.json\\\") == {\\\"numbers\\\": [1, 2, 3, 4, 5], \\\"letters\\\": [\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\\n\", \"\\nassert convert_json_to_dict(\\\"test6.json\\\") == {\\\"empty\\\": {}}\\n\", \"\\nassert convert_json_to_dict(\\\"test7.json\\\") == {\\\"single_key\\\": \\\"single_value\\\"}\\n\", \"\\nassert convert_json_to_dict(\\\"test8.json\\\") == {\\\"nested\\\": {\\\"level1\\\": {\\\"level2\\\": {\\\"level3\\\": \\\"value\\\"}}}}\\n\", \"\\nassert convert_json_to_dict(\\\"test9.json\\\") == {\\\"array_of_objects\\\": [{\\\"id\\\": 1, \\\"value\\\": \\\"one\\\"}, {\\\"id\\\": 2, \\\"value\\\": \\\"two\\\"}]}\\n\", \"\\nassert convert_json_to_dict(\\\"test10.json\\\") == {\\\"boolean_values\\\": {\\\"true\\\": True, \\\"false\\\": False}}\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "a8e4fd38caf687530860d89f14c3207f", "input": "You are tasked with implementing a `Calculator` class in Python that supports basic arithmetic operations and number system conversions. The class should include the following methods:\n\n- `add(a, b)`: Returns the sum of `a` and `b`.\n- `subtract(a, b)`: Returns the result of subtracting `b` from `a`.\n- `multiply(a, b)`: Returns the product of `a` and `b`.\n- `divide(a, b)`: Returns the result of dividing `a` by `b`. If `b` is zero, the function should raise a `ValueError` with the message \"Cannot divide by zero.\"\n- `to_binary(num)`: Converts `num` to a binary string without the '0b' prefix.\n- `to_octal(num)`: Converts `num` to an octal string without the '0o' prefix.\n- `to_hexadecimal(num)`: Converts `num` to a hexadecimal string without the '0x' prefix.\n\n**Sample Input/Output:**\n\nFor the following operations:\n- `add(5, 3)` should return `8`.\n- `subtract(10, 4)` should return `6`.\n- `multiply(6, 7)` should return `42`.\n- `divide(8, 2)` should return `4.0`.\n- `to_binary(10)` should return `'1010'`.\n- `to_octal(10)` should return `'12'`.\n- `to_hexadecimal(10)` should return `'a'`.", "output": "```python\nclass Calculator:\n    def add(self, a, b):\n        \"\"\"Return the sum of a and b.\"\"\"\n        return a + b\n\n    def subtract(self, a, b):\n        \"\"\"Return the result of subtracting b from a.\"\"\"\n        return a - b\n\n    def multiply(self, a, b):\n        \"\"\"Return the product of a and b.\"\"\"\n        return a * b\n\n    def divide(self, a, b):\n        \"\"\"Return the result of dividing a by b. Raises ValueError if b is zero.\"\"\"\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        return a / b\n\n    def to_binary(self, num):\n        \"\"\"Convert num to a binary string without the '0b' prefix.\"\"\"\n        return bin(num)[2:]\n\n    def to_octal(self, num):\n        \"\"\"Convert num to an octal string without the '0o' prefix.\"\"\"\n        return oct(num)[2:]\n\n    def to_hexadecimal(self, num):\n        \"\"\"Convert num to a hexadecimal string without the '0x' prefix.\"\"\"\n        return hex(num)[2:]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by implementing all the required methods for arithmetic operations and number system conversions.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic in the solution is completely correct and optimally structured. Each method performs its intended operation accurately.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the division by zero edge case by raising a ValueError. However, it does not handle other potential edge cases such as non-integer inputs for conversion methods, which could lead to unexpected behavior.\"}}", "unit_tests": "[\"\\nassert Calculator().add(2, 3) == 5\\n\", \"\\nassert Calculator().subtract(5, 3) == 2\\n\", \"\\nassert Calculator().multiply(4, 3) == 12\\n\", \"\\nassert Calculator().divide(10, 2) == 5.0\\n\", \"\\nassert Calculator().to_binary(10) == \\\"1010\\\"\\n\", \"\\nassert Calculator().to_octal(10) == \\\"12\\\"\\n\", \"\\nassert Calculator().to_hexadecimal(10) == \\\"a\\\"\\n\", \"\\nassert Calculator().divide(10, 0) == \\\"Cannot divide by zero.\\\"\\n\", \"\\nassert Calculator().add(-5, 5) == 0\\n\", \"\\nassert Calculator().to_binary(0) == \\\"0\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "c8042bb620d370f06f52c842126b7fec", "input": "You are tasked with writing a regular expression pattern to validate IPv6 addresses. An IPv6 address consists of eight groups of four hexadecimal digits, separated by colons (`:`). Each group can contain numbers from `0` to `9` and letters from `A` to `F` (case-insensitive). Leading zeros in a group can be omitted. The double colon (`::`) is used to compress consecutive groups of zeros and can only appear once in an address.\n\n**Input:**\n- A list of strings, each representing an IPv6 address.\n\n**Output:**\n- For each string, output \"valid\" if it is a valid IPv6 address, otherwise output \"invalid\".\n\n**Sample Input:**\n```\n2001:0db8:85a3:0000:0000:8a2e:0370:7334\n2001:db8:85a3::8a2e:370:7334\n::\n2001:db8::\n2001::1\n2001:db8::8a2e:370:7334\n2001:db8:85a3:0:0:8a2e:370:7334\n2001:db8::85a3:0:0:8a2e:370:7334\n2001:db8::1:2:3::4\n2001:db8:85a3::12345\n2001:db8:85a3::g123\n```\n\n**Sample Output:**\n```\nvalid\nvalid\nvalid\nvalid\nvalid\nvalid\nvalid\ninvalid\ninvalid\ninvalid\ninvalid\n```", "output": "```python\nimport re\n\ndef is_valid_ipv6(ipv6_address):\n    \"\"\"\n    Validates if the given string is a valid IPv6 address.\n\n    :param ipv6_address: A string representing an IPv6 address.\n    :return: True if the string is a valid IPv6 address, False otherwise.\n    \"\"\"\n    ipv6_pattern = re.compile('''\n        ^  # start of string\n        (?:\n            (?:  # non-capturing group for 7 groups of 4 hex digits separated by colons\n                [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n            ){0,7}  # zero to seven repetitions\n            (?:  # non-capturing group for the final group of 4 hex digits\n                [0-9A-Fa-f]{1,4}  # 1 to 4 hex digits\n            )  # end of final group\n            |  # OR\n            (?:  # non-capturing group for IPv6 addresses with double colons\n                (?:  # non-capturing group for 1 to 6 groups of 4 hex digits separated by colons\n                    [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n                ){0,1}  # zero or one repetition\n                :  # double colon\n                (?:  # non-capturing group for 0 to 5 groups of 4 hex digits separated by colons\n                    [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n                ){0,5}  # zero to five repetitions\n                (?:  # non-capturing group for the final group of 4 hex digits\n                    [0-9A-Fa-f]{1,4}  # 1 to 4 hex digits\n                )  # end of final group\n                |  # OR\n                (?:  # non-capturing for IPv6 addresses ending in double colon\n                    [0-9A-Fa-f]{1,4}:  # 1 to 4 hex digits followed by a colon\n                ){1,7}  # one to seven repetitions\n                :  # single colon at the end\n            )  # end of IPv6 addresses with double colons\n        )  # end of main non-capturing group\n        $  # end of string\n    ''', re.VERBOSE)\n    return ipv6_pattern.match(ipv6_address) is not None\n\ndef test_ipv6_addresses(ipv6_addresses):\n    \"\"\"\n    Tests a list of IPv6 addresses for validity.\n\n    :param ipv6_addresses: A list of strings, each representing an IPv6 address.\n    \"\"\"\n    for address in ipv6_addresses:\n        print(f'{address}: {\"valid\" if is_valid_ipv6(address) else \"invalid\"}')\n\n# Sample test cases\ntest_ipv6_addresses([\n    '2001:0db8:85a3:0000:0000:8a2e:0370:7334',\n    '2001:db8:85a3::8a2e:370:7334',\n    '::',\n    '2001:db8::',\n    '2001::1',\n    '2001:db8::8a2e:370:7334',\n    '2001:db8:85a3:0:0:8a2e:370:7334',\n    '2001:db8::85a3:0:0:8a2e:370:7334',\n    '2001:db8::1:2:3::4',\n    '2001:db8:85a3::12345',\n    '2001:db8:85a3::g123'\n])\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The solution addresses most of the requirements for a valid IPv6 address, including the use of hexadecimal digits, the use of colons to separate groups, and the use of double colons to compress consecutive groups of zeros. However, it does not explicitly handle the case where the address starts or ends with a double colon followed by a group of hex digits, which is a valid IPv6 address format.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic is largely correct and consistent, handling most valid and invalid cases. However, there are some minor issues, such as not fully accounting for addresses that start or end with a double colon followed by a group of hex digits, which should be valid.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution addresses some edge cases, such as addresses with double colons and addresses with leading zeros. However, it does not comprehensively handle all potential edge cases, such as addresses that start or end with a double colon followed by a group of hex digits, which should be valid.\"}}", "unit_tests": "[\"\\nassert ipv6_pattern.match('2001:0db8:85a3:0000:0000:8a2e:0370:7334') is not None\\n\", \"\\nassert ipv6_pattern.match('2001:db8:85a3::8a2e:370:7334') is not None\\n\", \"\\nassert ipv6_pattern.match('::') is not None\\n\", \"\\nassert ipv6_pattern.match('2001:db8::') is not None\\n\", \"\\nassert ipv6_pattern.match('2001::1') is not None\\n\", \"\\nassert ipv6_pattern.match('2001:db8::8a2e:370:7334') is not None\\n\", \"\\nassert ipv6_pattern.match('2001:db8:85a3:0:0:8a2e:370:7334') is not None\\n\", \"\\nassert ipv6_pattern.match('2001:db8::85a3:0:0:8a2e:370:7334') is None\\n\", \"\\nassert ipv6_pattern.match('2001:db8::1:2:3::4') is None\\n\", \"\\nassert ipv6_pattern.match('2001:db8:85a3::12345') is None\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "71e225fa7f679bdd799837ed302e0c72", "input": "You are given a dataset represented as a DataFrame with three columns: `price`, `quantity`, and `discount`. Each row corresponds to a product in a store. The `discount` column contains a percentage discount applied to the product, and the `price` column contains the original price. Your task is to write a Python function `calculate_total_sales(data)` that takes a DataFrame as input and returns a new DataFrame with an additional column `total_sales`, which is the `price` multiplied by the `quantity`, adjusted for the `discount`.\n\n**Input:**\n- A pandas DataFrame `data` with columns `price`, `quantity`, and `discount`.\n\n**Output:**\n- A pandas DataFrame with the original columns and an additional column `total_sales`.\n\n**Sample Input:**\n```python\nsample_data = {\n    'price': [100, 200, 150],\n    'quantity': [2, 3, 1],\n    'discount': [10, 5, 20]\n}\ndf = pd.DataFrame(sample_data)\n```\n\n**Sample Output:**\n```\n   price  quantity  discount  total_sales\n0    100         2        10        180.0\n1    200         3         5        570.0\n2    150         1        20        120.0\n```", "output": "```python\nimport pandas as pd\n\ndef calculate_total_sales(data):\n    \"\"\"\n    Calculates the total sales by applying discounts to the original price and quantity.\n    \n    Parameters:\n    data (pd.DataFrame): A DataFrame containing `price`, `quantity`, and `discount` columns.\n    \n    Returns:\n    pd.DataFrame: The input DataFrame with an additional `total_sales` column.\n    \"\"\"\n    data['total_sales'] = data['price'] * (1 - data['discount'] / 100) * data['quantity']\n    return data\n\n# Example usage:\nsample_data = {\n    'price': [100, 200, 150],\n    'quantity': [2, 3, 1],\n    'discount': [10, 5, 20]\n}\ndf = pd.DataFrame(sample_data)\n\ndf_with_total_sales = calculate_total_sales(df)\nprint(df_with_total_sales[['price', 'quantity', 'discount', 'total_sales']])\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by calculating the total sales based on the price, quantity, and discount, and returning a new DataFrame with the additional `total_sales` column.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It accurately calculates the discounted price and then the total sales, and it handles the DataFrame operations efficiently.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution addresses some edge cases, such as the presence of a discount of 0%, but it does not handle cases where the discount might be greater than 100%, negative prices, or non-numeric values in the columns. It also assumes that the input DataFrame will always have the required columns without validation.\"}}", "unit_tests": "[\"\\nassert calculate_total_sales(pd.DataFrame({'price': [100], 'quantity': [1], 'discount': [0]}))['total_sales'].iloc[0] == 100\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [100], 'quantity': [1], 'discount': [50]}))['total_sales'].iloc[0] == 50\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [200], 'quantity': [2], 'discount': [25]}))['total_sales'].iloc[0] == 300\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [150], 'quantity': [3], 'discount': [10]}))['total_sales'].iloc[0] == 405\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [0], 'quantity': [10], 'discount': [0]}))['total_sales'].iloc[0] == 0\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [100], 'quantity': [0], 'discount': [10]}))['total_sales'].iloc[0] == 0\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [100], 'quantity': [1], 'discount': [100]}))['total_sales'].iloc[0] == 0\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [100, 200], 'quantity': [1, 2], 'discount': [0, 50]}))['total_sales'].tolist() == [100, 100]\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [100, 200, 150], 'quantity': [2, 3, 1], 'discount': [10, 5, 20]}))['total_sales'].tolist() == [180.0, 570.0, 120.0]\\n\", \"\\nassert calculate_total_sales(pd.DataFrame({'price': [100, 200, 150], 'quantity': [2, 3, 1], 'discount': [10, 5, 20]})).shape[1] == 4\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "3d8544978dd7d1c4374aa1f14f8a0951", "input": "You are given a Python dictionary `person_info` with keys 'name', 'age', and 'city'. Your task is to implement a function `format_person_info(info)` that returns a string formatted as \"Name: [name], Age: [age], City: [city]\". \n\n**Input:**\n- A dictionary `person_info` with the following structure:\n  - `person_info['name']`: A string representing the person's name.\n  - `person_info['age']`: An integer representing the person's age.\n  - `person_info['city']`: A string representing the city where the person lives.\n\n**Output:**\n- A string formatted as \"Name: [name], Age: [age], City: [city]\".\n\n**Sample Input:**\n```python\nperson_info = {\n    'name': 'Alice Johnson',\n    'age': 28,\n    'city': 'Los Angeles'\n}\n```\n\n**Sample Output:**\n```\nName: Alice Johnson, Age: 28, City: Los Angeles\n```", "output": "```python\ndef format_person_info(info):\n    \"\"\"\n    Formats the given dictionary containing a person's information into a string.\n\n    Parameters:\n    info (dict): A dictionary with keys 'name', 'age', and 'city'.\n\n    Returns:\n    str: A formatted string in the form \"Name: [name], Age: [age], City: [city]\".\n    \"\"\"\n    return f\"Name: {info['name']}, Age: {info['age']}, City: {info['city']}\"\n\n# Example usage\nperson_info = {\n    'name': 'Alice Johnson',\n    'age': 28,\n    'city': 'Los Angeles'\n}\n\nformatted_string = format_person_info(person_info)\nprint(formatted_string)  # Output: Name: Alice Johnson, Age: 28, City: Los Angeles\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by formatting the dictionary into the specified string format using the correct keys.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and the function consistently formats the dictionary into the required string format without any errors.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The solution does not handle cases where the dictionary might be missing keys or contain unexpected data types. It assumes the dictionary will always have the correct keys and data types.\"}}", "unit_tests": "[\"\\nassert format_person_info({'name': 'John Doe', 'age': 30, 'city': 'New York'}) == \\\"Name: John Doe, Age: 30, City: New York\\\"\\n\", \"\\nassert format_person_info({'name': 'Jane Smith', 'age': 25, 'city': 'Chicago'}) == \\\"Name: Jane Smith, Age: 25, City: Chicago\\\"\\n\", \"\\nassert format_person_info({'name': 'Emily Davis', 'age': 40, 'city': 'San Francisco'}) == \\\"Name: Emily Davis, Age: 40, City: San Francisco\\\"\\n\", \"\\nassert format_person_info({'name': 'Michael Brown', 'age': 35, 'city': 'Seattle'}) == \\\"Name: Michael Brown, Age: 35, City: Seattle\\\"\\n\", \"\\nassert format_person_info({'name': 'Sarah Wilson', 'age': 22, 'city': 'Boston'}) == \\\"Name: Sarah Wilson, Age: 22, City: Boston\\\"\\n\", \"\\nassert format_person_info({'name': 'David Lee', 'age': 50, 'city': 'Miami'}) == \\\"Name: David Lee, Age: 50, City: Miami\\\"\\n\", \"\\nassert format_person_info({'name': 'Olivia Martinez', 'age': 29, 'city': 'Dallas'}) == \\\"Name: Olivia Martinez, Age: 29, City: Dallas\\\"\\n\", \"\\nassert format_person_info({'name': 'Daniel Hernandez', 'age': 45, 'city': 'Austin'}) == \\\"Name: Daniel Hernandez, Age: 45, City: Austin\\\"\\n\", \"\\nassert format_person_info({'name': 'Sophia Garcia', 'age': 33, 'city': 'Denver'}) == \\\"Name: Sophia Garcia, Age: 33, City: Denver\\\"\\n\", \"\\nassert format_person_info({'name': 'James Lopez', 'age': 27, 'city': 'Philadelphia'}) == \\\"Name: James Lopez, Age: 27, City: Philadelphia\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "13b12f66783338a060479a0fa243041e", "input": "You are given a list of integers `numbers`. Your task is to implement a function `find_median(numbers)` that computes the median of the list. The function should correctly handle both odd and even lengths of the list. \n\n**Input:**\n- A list of integers `numbers` (1 \u2264 len(numbers) \u2264 10^5), where each integer is in the range [-10^9, 10^9].\n\n**Output:**\n- A float representing the median of the list.\n\n**Sample Input 1:**\n```\n[3, 1, 4, 1, 5, 9, 2]\n```\n**Sample Output 1:**\n```\n3.0\n```\n\n**Sample Input 2:**\n```\n[3, 1, 4, 1, 5, 9]\n```\n**Sample Output 2:**\n```\n3.5\n```", "output": "```python\ndef find_median(numbers):\n    \"\"\"\n    Computes the median of a list of integers.\n    \n    Parameters:\n    numbers (list of int): The list of integers for which to find the median.\n    \n    Returns:\n    float: The median of the list.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    if n % 2 == 1:\n        return float(sorted_numbers[n // 2])\n    else:\n        mid1, mid2 = sorted_numbers[n // 2 - 1], sorted_numbers[n // 2]\n        return (mid1 + mid2) / 2.0\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by correctly calculating the median for both odd and even lengths of the list.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently handles both odd and even length lists to find the median.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the basic edge cases of odd and even length lists. However, it does not explicitly handle cases like an empty list or non-integer values, which could be considered edge cases depending on the context.\"}}", "unit_tests": "[\"\\nassert find_median([3, 1, 4, 1, 5, 9, 2]) == 3\\n\", \"\\nassert find_median([3, 1, 4, 1, 5, 9]) == 3.5\\n\", \"\\nassert find_median([1, 2, 3, 4, 5]) == 3\\n\", \"\\nassert find_median([10, 20, 30, 40, 50, 60]) == 35.0\\n\", \"\\nassert find_median([7]) == 7\\n\", \"\\nassert find_median([1, 1, 1, 1, 1, 1]) == 1.0\\n\", \"\\nassert find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5\\n\", \"\\nassert find_median([-5, -1, -3, -2, -4]) == -3\\n\", \"\\nassert find_median([1.5, 2.5, 3.5, 4.5, 5.5]) == 3.5\\n\", \"\\nassert find_median([100, 200]) == 150.0\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "a3edc30a9c63f0144324460136d8f5d0", "input": "You are given a positive integer `n`. Your task is to write a function `prime_factors(n)` that returns a list of its prime factors in ascending order. Each prime factor should appear in the list as many times as it divides the number.\n\n**Input:**\n- A single integer `n` (1 \u2264 n \u2264 10^6)\n\n**Output:**\n- A list of integers representing the prime factors of `n` in ascending order.\n\n**Sample Input:**\n```\n56\n```\n\n**Sample Output:**\n```\n[2, 2, 2, 7]\n```", "output": "```python\ndef prime_factors(n):\n    \"\"\"\n    Computes the prime factors of a given positive integer n and returns them as a list.\n    The list contains the prime factors in ascending order, with each factor appearing\n    as many times as it divides the number.\n\n    :param n: A positive integer (1 \u2264 n \u2264 10^6)\n    :return: A list of integers representing the prime factors of n in ascending order.\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n# Example usage:\n# print(prime_factors(56))  # Output: [2, 2, 2, 7]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by computing the prime factors of a given positive integer and returning them in ascending order with the correct frequency.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly identifies and appends prime factors to the list and reduces the number accordingly.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles most edge cases, such as when the input is a prime number or a power of a prime. However, it does not explicitly handle the case where the input is less than 2, which should ideally return an empty list or raise an error.\"}}", "unit_tests": "[\"\\nassert prime_factors(2) == [2]\\n\", \"\\nassert prime_factors(3) == [3]\\n\", \"\\nassert prime_factors(4) == [2, 2]\\n\", \"\\nassert prime_factors(5) == [5]\\n\", \"\\nassert prime_factors(6) == [2, 3]\\n\", \"\\nassert prime_factors(28) == [2, 2, 7]\\n\", \"\\nassert prime_factors(100) == [2, 2, 5, 5]\\n\", \"\\nassert prime_factors(101) == [101]\\n\", \"\\nassert prime_factors(1) == []\\n\", \"\\nassert prime_factors(84) == [2, 2, 3, 7]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "6fa908cd724894eceec54b241dd6a23c", "input": "You are tasked with implementing a function `create_wordcloud(text)` that generates and displays a word cloud from a given string `text`. The word cloud should be created using the `wordcloud` library and visualized with `matplotlib`. The function should produce a word cloud with a width of 800 pixels, a height of 400 pixels, and a white background. The axis labels should be turned off in the displayed plot.\n\n**Sample Input:**\n```\n\"Competitive programming is a mind sport requiring logical thinking and problem-solving skills. It involves solving algorithmic problems under time constraints.\"\n```\n\n**Sample Output:**\nA word cloud image displaying the words from the input text with the specified dimensions and background color.", "output": "```python\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ndef create_wordcloud(text):\n    \"\"\"\n    Generates and displays a word cloud from the given text.\n    \n    Parameters:\n    text (str): The input text from which to generate the word cloud.\n    \"\"\"\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')  # Turn off axis labels\n    plt.show()\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by using the `wordcloud` library to generate a word cloud from the given text and displaying it using `matplotlib`.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and the code is optimally structured to generate and display a word cloud.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"The code does not handle edge cases such as empty strings, very short texts, or texts with special characters or numbers. It also does not handle potential exceptions that might arise from the `wordcloud` or `matplotlib` libraries.\"}}", "unit_tests": "[\"\\nassert create_wordcloud(\\\"Hello world\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"Python is great for data science\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"A quick brown fox jumps over the lazy dog\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"Test test test test test\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"123 456 789\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"!@#$%^&*()\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"SingleWord\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"Multiple     spaces    between words\\\") is None\\n\", \"\\nassert create_wordcloud(\\\"Mixed CASE Words\\\") is None\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "424d061a1e96743aa86f9bc76a4c706f", "input": "You are given an array `prices` of length `n`, where `prices[i]` is the price of a given stock on the `i-th` day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\n**Constraints:**\n- `1 <= n <= 10^5`\n- `0 <= prices[i] <= 10^4`\n\n**Sample Input:**\n```\n[7, 1, 5, 3, 6, 4]\n```\n\n**Sample Output:**\n```\n5\n```\n\n**Explanation:**\nBuy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.", "output": "```python\ndef max_profit(prices):\n    \"\"\"\n    Calculate the maximum profit from a single buy and sell transaction.\n\n    :param prices: List[int] - A list of integers representing the stock prices.\n    :return: int - The maximum profit that can be achieved.\n    \"\"\"\n    if not prices:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for price in prices:\n        if price < min_price:\n            min_price = price\n        else:\n            potential_profit = price - min_price\n            if potential_profit > max_profit:\n                max_profit = potential_profit\n                \n    return max_profit\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by calculating the maximum profit from a single buy and sell transaction.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and efficiently calculates the maximum profit by iterating through the list once, keeping track of the minimum price and the maximum profit.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the edge case of an empty list by returning 0, but it does not explicitly handle cases where no profit can be made (e.g., prices are in descending order). However, the current logic correctly returns 0 in such cases.\"}}", "unit_tests": "[\"\\nassert max_profit([7, 1, 5, 3, 6, 4]) == 5\\n\", \"\\nassert max_profit([7, 6, 4, 3, 1]) == 0\\n\", \"\\nassert max_profit([1, 2, 3, 4, 5]) == 4\\n\", \"\\nassert max_profit([3, 3, 5, 0, 0, 3, 1, 4]) == 4\\n\", \"\\nassert max_profit([1, 2]) == 1\\n\", \"\\nassert max_profit([1]) == 0\\n\", \"\\nassert max_profit([]) == 0\\n\", \"\\nassert max_profit([10, 7, 5, 8, 11, 9]) == 6\\n\", \"\\nassert max_profit([1, 2, 4, 2, 5, 7, 2, 4, 9, 0]) == 8\\n\", \"\\nassert max_profit([1, 3, 2, 8, 4, 9]) == 8\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "cc6a4653ee286540abd01523a18b14eb", "input": "You are tasked with implementing a `BankAccount` class in Python to simulate basic banking operations. The class should support the following functionalities:\n\n- **Initialization**: Create a bank account with a specified initial balance.\n- **Deposit**: Add a specified amount to the account balance, provided the amount is positive.\n- **Withdraw**: Subtract a specified amount from the account balance, provided the amount is positive and does not exceed the current balance.\n- **Get Balance**: Retrieve the current balance of the account.\n\nYour implementation should pass the following test cases:\n\n- **Sample Input 1**:\n  - Initialize with balance 100.\n  - Deposit 50.\n  - Withdraw 30.\n  - Get balance.\n- **Sample Output 1**:\n  - 120\n\n- **Sample Input 2**:\n  - Initialize with balance 200.\n  - Deposit -10 (should not change balance).\n  - Withdraw 250 (should not change balance).\n  - Get balance.\n- **Sample Output 2**:\n  - 200", "output": "```python\nclass BankAccount:\n    def __init__(self, initial_balance):\n        \"\"\"\n        Initializes the bank account with a given initial balance.\n        \n        :param initial_balance: The starting balance of the account.\n        \"\"\"\n        self.balance = initial_balance\n    \n    def deposit(self, amount):\n        \"\"\"\n        Deposits a specified amount of money into the account if the amount is positive.\n        \n        :param amount: The amount to deposit.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n    \n    def withdraw(self, amount):\n        \"\"\"\n        Withdraws a specified amount of money from the account if the amount is positive and sufficient funds are available.\n        \n        :param amount: The amount to withdraw.\n        \"\"\"\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n    \n    def get_balance(self):\n        \"\"\"\n        Returns the current balance of the account.\n        \n        :return: The current balance.\n        \"\"\"\n        return self.balance\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all the specified requirements by implementing the required methods: __init__, deposit, withdraw, and get_balance.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The deposit method correctly adds positive amounts to the balance, and the withdraw method correctly subtracts amounts only if they are positive and do not exceed the current balance.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles some edge cases, such as not allowing negative deposits or withdrawals and not allowing withdrawals that exceed the balance. However, it does not handle the case where the initial balance is negative, which could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert BankAccount(100).get_balance() == 100\\n\", \"\\nassert BankAccount(0).get_balance() == 0\\n\", \"\\nassert BankAccount(-50).get_balance() == -50\\n\", \"\\nassert BankAccount(100).deposit(50) or BankAccount(100).get_balance() == 150\\n\", \"\\nassert BankAccount(100).deposit(-50) or BankAccount(100).get_balance() == 100\\n\", \"\\nassert BankAccount(100).withdraw(50) or BankAccount(100).get_balance() == 50\\n\", \"\\nassert BankAccount(100).withdraw(150) or BankAccount(100).get_balance() == 100\\n\", \"\\nassert BankAccount(100).withdraw(-50) or BankAccount(100).get_balance() == 100\\n\", \"\\nassert BankAccount(100).deposit(50) or BankAccount(100).withdraw(30) or BankAccount(100).get_balance() == 120\\n\", \"\\nassert BankAccount(100).withdraw(100) or BankAccount(100).get_balance() == 0\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"fail\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.6"}
{"id": "e335604626979a4b87659812131a26ee", "input": "You are given a list of sentences. Your task is to write a function that processes each sentence by capitalizing the first letter of each word and converting the rest of the letters in each word to lowercase. The function should return a new list with the modified sentences. Assume that each sentence consists of words separated by spaces.\n\n**Sample Input:**\n```python\n[\"this is a test\", \"ANOTHER test sentence\", \"python programming is fun\"]\n```\n\n**Sample Output:**\n```python\n[\"This Is A Test\", \"Another Test Sentence\", \"Python Programming Is Fun\"]\n```", "output": "```python\ndef capitalize_sentences(sentences):\n    \"\"\"\n    Capitalizes the first letter of each word in each sentence of the input list and converts the rest of the letters to lowercase.\n\n    Parameters:\n    sentences (list of str): A list of sentences where each sentence is a string.\n\n    Returns:\n    list of str: A new list of sentences with each word capitalized appropriately.\n    \"\"\"\n    return [' '.join(word.capitalize() for word in sentence.split()) for sentence in sentences]\n\n# Example usage:\ninput_sentences = [\"this is a test\", \"ANOTHER test sentence\", \"python programming is fun\"]\noutput_sentences = capitalize_sentences(input_sentences)\nprint(output_sentences)  # Output: ['This Is A Test', 'Another Test Sentence', 'Python Programming Is Fun']\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the specified requirements by capitalizing the first letter of each word and making the rest of the letters lowercase for each sentence in the input list.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The use of list comprehension and the capitalize() method ensures that each word in each sentence is correctly transformed.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles typical cases well, but it does not explicitly handle edge cases such as empty strings or strings with multiple spaces between words. However, the capitalize() method and the split() method used in the solution naturally handle these cases without errors.\"}}", "unit_tests": "[\"\\nassert capitalize_sentences([\\\"hello world\\\"]) == [\\\"Hello World\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"python is great\\\", \\\"i love coding\\\"]) == [\\\"Python Is Great\\\", \\\"I Love Coding\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"THIS IS A TEST\\\", \\\"another TEST sentence\\\"]) == [\\\"This Is A Test\\\", \\\"Another Test Sentence\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"\\\"]) == [\\\"\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"multiple    spaces\\\"]) == [\\\"Multiple    Spaces\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"123abc def456\\\"]) == [\\\"123Abc Def456\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"!@# $%^ &*(\\\"]) == [\\\"!@# $%^ &*(\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"capitalize THIS sentence\\\", \\\"and THIS one\\\"]) == [\\\"Capitalize This Sentence\\\", \\\"And This One\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"singleword\\\", \\\"twowords\\\"]) == [\\\"Singleword\\\", \\\"Twowords\\\"]\\n\", \"\\nassert capitalize_sentences([\\\"mixed CASE with NUMBERS 123\\\"]) == [\\\"Mixed Case With Numbers 123\\\"]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.8"}
{"id": "77a02e5e17eac40416f86017a7c2b6b4", "input": "You are given a list of integers. Your task is to write a function that removes all duplicate elements from the list while maintaining the order of their first occurrence. You are not allowed to use any built-in functions specifically designed for removing duplicates.\n\n**Input:**\n- A list of integers, `input_list`.\n\n**Output:**\n- A list of integers with duplicates removed, preserving the order of the first occurrences.\n\n**Sample Input:**\n```\n[1, 2, 3, 2, 1, 4, 5]\n```\n\n**Sample Output:**\n```\n[1, 2, 3, 4, 5]\n```", "output": "```python\ndef remove_duplicates(input_list):\n    \"\"\"\n    Removes all duplicate elements from the input list while preserving the order of their first occurrence.\n\n    :param input_list: List of integers from which duplicates need to be removed.\n    :return: A new list with duplicates removed.\n    \"\"\"\n    result = []\n    seen = set()\n    for item in input_list:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 3, \"justification\": \"The solution meets the basic requirement of removing duplicates while preserving the order of first occurrences. However, it uses a built-in set to track seen elements, which is not allowed according to the problem statement.\"}, \"logical_correctness\": {\"score\": 3, \"justification\": \"The logic for removing duplicates and preserving order is mostly correct. However, the use of a set violates the constraint of not using built-in functions for removing duplicates.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as an empty list, a list with all identical elements, and a list with no duplicates. However, it does not explicitly handle cases like None or non-integer elements, which are not strictly required but could be considered.\"}}", "unit_tests": "[\"\\nassert remove_duplicates([1, 2, 3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert remove_duplicates([10, 20, 20, 10, 30]) == [10, 20, 30]\\n\", \"\\nassert remove_duplicates([1, 1, 1, 1, 1]) == [1]\\n\", \"\\nassert remove_duplicates([]) == []\\n\", \"\\nassert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\\n\", \"\\nassert remove_duplicates([7, 8, 9, 7, 10, 9, 8]) == [7, 8, 9, 10]\\n\", \"\\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\\n\", \"\\nassert remove_duplicates([100, 200, 100, 200, 100]) == [100, 200]\\n\", \"\\nassert remove_duplicates([-1, -2, -3, -2, -1]) == [-1, -2, -3]\\n\", \"\\nassert remove_duplicates([0, 0, 0, 0, 0]) == [0]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "5abeda6fdd2f9e2c8c7d2492bb6673e9", "input": "You are tasked with implementing a function `generate_prime_numbers(limit)` that efficiently generates all prime numbers up to a specified limit using the Sieve of Eratosthenes algorithm. Your function should return a list of these prime numbers.\n\n**Input:**\n- An integer `limit` (1 \u2264 limit \u2264 10^6), representing the upper bound up to which prime numbers should be generated.\n\n**Output:**\n- A list of integers, where each integer is a prime number less than or equal to `limit`.\n\n**Sample Input:**\n```\n30\n```\n\n**Sample Output:**\n```\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n```", "output": "```python\ndef generate_prime_numbers(limit):\n    \"\"\"\n    Generate a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm.\n\n    :param limit: An integer representing the upper bound up to which prime numbers should be generated.\n    :return: A list of integers, where each integer is a prime number less than or equal to the limit.\n    \"\"\"\n    if limit < 2:\n        return []\n\n    is_prime = [True] * (limit + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for p in range(2, int(limit ** 0.5) + 1):\n        if is_prime[p]:\n            for multiple in range(p * p, limit + 1, p):\n                is_prime[multiple] = False\n\n    return [num for num, prime in enumerate(is_prime) if prime]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all the specified requirements of the Sieve of Eratosthenes algorithm, including initializing the boolean array, marking non-prime numbers, and collecting prime numbers.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly implements the Sieve of Eratosthenes algorithm without any errors.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution handles edge cases comprehensively. It correctly returns an empty list for limits less than 2, and it efficiently handles larger limits by only iterating up to the square root of the limit.\"}}", "unit_tests": "[\"\\nassert generate_prime_numbers(10) == [2, 3, 5, 7]\\n\", \"\\nassert generate_prime_numbers(20) == [2, 3, 5, 7, 11, 13, 17, 19]\\n\", \"\\nassert generate_prime_numbers(1) == []\\n\", \"\\nassert generate_prime_numbers(0) == []\\n\", \"\\nassert generate_prime_numbers(2) == [2]\\n\", \"\\nassert generate_prime_numbers(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\\n\", \"\\nassert generate_prime_numbers(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\\n\", \"\\nassert generate_prime_numbers(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\n\", \"\\nassert generate_prime_numbers(150) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149]\\n\", \"\\nassert generate_prime_numbers(2) == [2]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "78506836dc14749471eec5ff7d809c53", "input": "You are tasked with writing a Python function to compute the factorial of a given non-negative integer using recursion. Your function should handle invalid inputs gracefully by raising a `ValueError` if the input is a negative number or a non-integer. \n\n**Input:**\n- A single integer `n` (0 \u2264 n \u2264 20).\n\n**Output:**\n- The factorial of `n` if `n` is a valid non-negative integer.\n- A `ValueError` message if `n` is negative or not an integer.\n\n**Sample Input/Output:**\n- Input: `5`\n  Output: `120`\n- Input: `0`\n  Output: `1`\n- Input: `-1`\n  Output: `ValueError: Factorial is not defined for negative numbers.`\n- Input: `3.5`\n  Output: `ValueError: Input must be an integer.`", "output": "```python\ndef factorial(n):\n    \"\"\"\n    Computes the factorial of a non-negative integer n using recursion.\n    \n    Args:\n        n (int): A non-negative integer.\n    \n    Returns:\n        int: The factorial of the input number n.\n    \n    Raises:\n        ValueError: If n is a negative number or not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(factorial(5))  # Expected output: 120\n    except ValueError as e:\n        print(e)\n    try:\n        print(factorial(0))  # Expected output: 1\n    except ValueError as e:\n        print(e)\n    try:\n        print(factorial(-1)) # Expected to raise ValueError\n    except ValueError as e:\n        print(e)\n    try:\n        print(factorial(3.5)) # Expected to raise ValueError\n    except ValueError as e:\n        print(e)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements, including calculating the factorial using recursion and handling invalid inputs.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The recursive approach is correctly implemented, and the base cases are handled properly.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including negative numbers and non-integer values, by raising appropriate exceptions.\"}}", "unit_tests": "[\"\\nassert factorial(5) == 120\\n\", \"\\nassert factorial(0) == 1\\n\", \"\\nassert factorial(1) == 1\\n\", \"\\nassert factorial(10) == 3628800\\n\", \"\\nassert factorial(3) == 6\\n\", \"\\nassert factorial(7) == 5040\\n\", \"\\nassert factorial(15) == 1307674368000\\n\", \"\\ntry: factorial(-1) except ValueError as e: assert str(e) == \\\"Factorial is not defined for negative numbers.\\\"\\n\", \"\\ntry: factorial(3.5) except ValueError as e: assert str(e) == \\\"Input must be an integer.\\\"\\n\", \"\\ntry: factorial(\\\"5\\\") except ValueError as e: assert str(e) == \\\"Input must be an integer.\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0.7"}
{"id": "1b6e0af1ce1fdb9f1e08633222bc8b53", "input": "You are tasked with developing a Python script that continuously monitors the system's CPU and memory usage. The script should log these metrics to a file every 5 seconds, with each log entry timestamped. Use the `psutil` library to gather system information. Your script should be able to handle indefinite monitoring until manually stopped.\n\n**Input:**\n- No explicit input is required. The script will monitor system resources continuously.\n\n**Output:**\n- The script should output log entries to a file named `system_monitor.log` in the following format:\n  ```\n  <timestamp> - CPU Usage: <cpu_usage>% | Memory Usage: <memory_usage>%\n  ```\n  where `<timestamp>` is the current date and time, `<cpu_usage>` is the CPU usage percentage, and `<memory_usage>` is the memory usage percentage.\n\n**Example Output:**\n```\n2023-10-05 14:23:15 - CPU Usage: 12% | Memory Usage: 34%\n2023-10-05 14:23:20 - CPU Usage: 15% | Memory Usage: 35%\n2023-10-05 14:23:25 - CPU Usage: 10% | Memory Usage: 33%\n```\n\n**Instructions:**\n- Install the `psutil` library if not already installed: `pip install psutil`\n- Run the script to start monitoring.\n- Logs are written to `system_monitor.log` in the same directory.\n- Use `Ctrl+C` to stop the script.", "output": "```python\nimport psutil\nimport time\nimport datetime\n\ndef monitor_system_resources(interval=5, logfile='system_monitor.log'):\n    \"\"\"\n    Continuously monitors the CPU and memory usage of the system and logs the \n    data to a file with timestamps every 'interval' seconds.\n\n    :param interval: Time interval (in seconds) between log entries.\n    :param logfile: Name of the log file.\n    \"\"\"\n    with open(logfile, 'a') as file:\n        while True:\n            timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            cpu_usage = psutil.cpu_percent(interval=1)\n            memory_usage = psutil.virtual_memory().percent\n            log_entry = f\"{timestamp} - CPU Usage: {cpu_usage}% | Memory Usage: {memory_usage}%\\n\"\n            file.write(log_entry)\n            print(log_entry.strip())\n            time.sleep(interval)\n\nif __name__ == \"__main__\":\n    print(\"Setting up system resource monitoring...\")\n    print(\"* Install 'psutil' library if you haven't already: `pip install psutil`\")\n    print(\"* Run this script to start monitoring your system's CPU and memory usage.\")\n    print(\"* The logs are written to 'system_monitor.log' in the same directory as this script.\")\n    print(\"* Use Ctrl+C to stop the script when you need to.\")\n    print(\"Starting to monitor now...\\n\")\n    monitor_system_resources()\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The script fully meets all specified requirements. It continuously monitors CPU and memory usage, logs the data to a file with timestamps every 5 seconds, and uses the `psutil` library as instructed.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The script is logically correct and consistently structured. It correctly uses `psutil` to fetch CPU and memory usage, formats the log entry with a timestamp, and writes it to the file at the specified interval.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The script handles basic edge cases such as logging to a file and formatting the output. However, it does not handle potential issues like file access errors, permission issues, or the script being interrupted by the user (Ctrl+C). It also does not handle the case where `psutil` might raise an exception.\"}}", "unit_tests": "[\"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_1.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_2.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_3.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_4.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_5.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_6.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_7.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_8.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_9.log') is None\\n\", \"\\nassert monitor_system_resources(interval=0.1, logfile='test_log_10.log') is None\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "b741b17441caed9eb23b2751927f572e", "input": "You are given a string `expression` consisting of characters '(', ')', '{', '}', '[' and ']'. Your task is to determine if the parentheses in the string are balanced. A string with balanced parentheses means that each opening parenthesis has a corresponding closing parenthesis in the correct order.\n\n**Input:**\n- A single string `expression` (1 \u2264 len(expression) \u2264 10^5) containing only the characters '(', ')', '{', '}', '[' and ']'.\n\n**Output:**\n- Return `True` if the parentheses in the string are balanced, otherwise return `False`.\n\n**Sample Input:**\n```\n\"{[()]}\"\n```\n\n**Sample Output:**\n```\nTrue\n```\n\n**Sample Input:**\n```\n\"{[(])}\"\n```\n\n**Sample Output:**\n```\nFalse\n```", "output": "```python\ndef is_balanced_parentheses(expression):\n    \"\"\"\n    Determines if the parentheses in the given expression are balanced.\n\n    :param expression: A string containing only the characters '(', ')', '{', '}', '[' and ']'.\n    :return: True if the parentheses are balanced, False otherwise.\n    \"\"\"\n    stack = []\n    matching_parentheses = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in matching_parentheses.values():\n            stack.append(char)\n        elif char in matching_parentheses:\n            if not stack or stack[-1] != matching_parentheses[char]:\n                return False\n            stack.pop()\n\n    return not stack\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function addresses the main requirement of checking if the parentheses in the expression are balanced. However, it only considers round, curly, and square brackets, which is more than the question specifies (only round parentheses).\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic for checking balanced parentheses is correct. It uses a stack to keep track of opening parentheses and checks for matching closing parentheses. However, it unnecessarily includes logic for curly and square brackets, which are not required.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution handles some edge cases, such as mismatched parentheses and extra closing parentheses. However, it does not handle cases with no parentheses or only one type of parentheses, which are also valid edge cases for the problem as specified.\"}}", "unit_tests": "[\"\\nassert is_balanced_parentheses(\\\"()\\\") == True\\n\", \"\\nassert is_balanced_parentheses(\\\"([])\\\") == True\\n\", \"\\nassert is_balanced_parentheses(\\\"{[()]}\\\") == True\\n\", \"\\nassert is_balanced_parentheses(\\\"([)]\\\") == False\\n\", \"\\nassert is_balanced_parentheses(\\\"((()))\\\") == True\\n\", \"\\nassert is_balanced_parentheses(\\\")(\\\") == False\\n\", \"\\nassert is_balanced_parentheses(\\\"({[()]})\\\") == True\\n\", \"\\nassert is_balanced_parentheses(\\\"({[([)])})\\\") == False\\n\", \"\\nassert is_balanced_parentheses(\\\"\\\") == True\\n\", \"\\nassert is_balanced_parentheses(\\\"(((((((((())))))))))\\\") == True\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "20a6e468c32aaf67129bb41afa43c095", "input": "Implement a `Car` class in Python with the following specifications:\n\n- **Constructor (`__init__`)**: Initialize the car with `make`, `model`, `year`, and `color`. Set the initial speed to 0.\n- **Methods**:\n  - `start_engine`: Print \"Engine started.\"\n  - `stop_engine`: Print \"Engine stopped.\"\n  - `paint(new_color)`: Change the car's color to `new_color` and print \"The car is now {new_color}.\"\n  - `accelerate(speed_increase)`: Increase the car's speed by `speed_increase` and print \"The car has accelerated by {speed_increase} mph. Current speed: {current_speed} mph.\"\n  - `brake(speed_decrease)`: Decrease the car's speed by `speed_decrease`. If `speed_decrease` is greater than the current speed, set the speed to 0 and print \"The car has come to a complete stop.\" Otherwise, print \"The car has slowed down by {speed_decrease} mph. Current speed: {current_speed} mph.\"\n  - `__str__`: Return a string representation of the car in the format \"{year} {make} {model} in {color} with current speed of {speed} mph.\"\n\n**Sample Input/Output:**\n```\ncar = Car(\"Toyota\", \"Corolla\", 2021, \"red\")\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 0 mph.\ncar.accelerate(30)\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 30 mph.\ncar.brake(10)\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 20 mph.\ncar.brake(30)\nprint(car)  # Output: 2021 Toyota Corolla in red with current speed of 0 mph.\n```", "output": "```python\nclass Car:\n    def __init__(self, make, model, year, color):\n        \"\"\"\n        Initialize a new Car instance.\n\n        :param make: The make of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param color: The color of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.speed = 0  # Initialize the speed attribute to 0\n\n    def start_engine(self):\n        \"\"\"\n        Start the car's engine.\n        \"\"\"\n        print(\"Engine started.\")\n\n    def stop_engine(self):\n        \"\"\"\n        Stop the car's engine.\n        \"\"\"\n        print(\"Engine stopped.\")\n\n    def paint(self, new_color):\n        \"\"\"\n        Paint the car a new color.\n\n        :param new_color: The new color for the car.\n        \"\"\"\n        self.color = new_color\n        print(f\"The car is now {self.color}.\")\n\n    def accelerate(self, speed_increase):\n        \"\"\"\n        Increase the car's speed.\n\n        :param speed_increase: The amount to increase the car's speed by.\n        \"\"\"\n        self.speed += speed_increase\n        print(f\"The car has accelerated by {speed_increase} mph. Current speed: {self.speed} mph.\")\n\n    def brake(self, speed_decrease):\n        \"\"\"\n        Decrease the car's speed.\n\n        :param speed_decrease: The amount to decrease the car's speed by.\n        \"\"\"\n        if speed_decrease > self.speed:\n            self.speed = 0\n            print(\"The car has come to a complete stop.\")\n        else:\n            self.speed -= speed_decrease\n            print(f\"The car has slowed down by {speed_decrease} mph. Current speed: {self.speed} mph.\")\n\n    def __str__(self):\n        \"\"\"\n        Return a string representation of the car.\n\n        :return: A string describing the car.\n        \"\"\"\n        return f\"{self.year} {self.make} {self.model} in {self.color} with current speed of {self.speed} mph.\"\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all the specified requirements by implementing the Car class with the required methods and properties.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic in the solution is completely correct and optimally structured. All methods perform their intended functions accurately.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as braking more than the current speed, which brings the speed to 0. However, it does not handle negative inputs for speed changes, which could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert Car(\\\"Toyota\\\", \\\"Corolla\\\", 2021, \\\"red\\\").make == \\\"Toyota\\\"\\n\", \"\\nassert Car(\\\"Toyota\\\", \\\"Corolla\\\", 2021, \\\"red\\\").model == \\\"Corolla\\\"\\n\", \"\\nassert Car(\\\"Toyota\\\", \\\"Corolla\\\", 2021, \\\"red\\\").year == 2021\\n\", \"\\nassert Car(\\\"Toyota\\\", \\\"Corolla\\\", 2021, \\\"red\\\").color == \\\"red\\\"\\n\", \"\\nassert Car(\\\"Toyota\\\", \\\"Corolla\\\", 2021, \\\"red\\\").speed == 0\\n\", \"\\ncar = Car(\\\"Honda\\\", \\\"Civic\\\", 2020, \\\"blue\\\")\\ncar.accelerate(50)\\nassert car.speed == 50\\n\", \"\\ncar = Car(\\\"Honda\\\", \\\"Civic\\\", 2020, \\\"blue\\\")\\ncar.accelerate(50)\\ncar.brake(20)\\nassert car.speed == 30\\n\", \"\\ncar = Car(\\\"Honda\\\", \\\"Civic\\\", 2020, \\\"blue\\\")\\ncar.accelerate(50)\\ncar.brake(60)\\nassert car.speed == 0\\n\", \"\\ncar = Car(\\\"Ford\\\", \\\"Mustang\\\", 2019, \\\"black\\\")\\ncar.paint(\\\"red\\\")\\nassert car.color == \\\"red\\\"\\n\", \"\\nassert str(Car(\\\"Tesla\\\", \\\"Model S\\\", 2022, \\\"white\\\")) == \\\"2022 Tesla Model S in white with current speed of 0 mph.\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "90df40cb855e8c9d602998bed3041c93", "input": "Implement a `BankAccount` class in Python that simulates a basic bank account with the following functionalities:\n- Initialize the account with a balance of 0.\n- Provide a method to deposit a specified amount into the account. The deposit amount must be positive.\n- Provide a method to withdraw a specified amount from the account. The withdrawal should only be allowed if the account has sufficient funds and the withdrawal amount must be positive.\n- Provide a method to check the current balance of the account.\n\n**Sample Input/Output:**\n- `account = BankAccount()`\n- `account.deposit(100)`\n- `account.check_balance()` should return `100`\n- `account.withdraw(50)`\n- `account.check_balance()` should return `50`\n- `account.withdraw(100)` should print `Insufficient funds.`", "output": "```python\nclass BankAccount:\n    def __init__(self):\n        \"\"\"\n        Initializes a new bank account with a balance of 0.\n        \"\"\"\n        self.balance = 0\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposits a specified amount into the account if the amount is positive.\n        \n        :param amount: The amount to deposit.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n        else:\n            print(\"Deposit amount must be positive.\")\n\n    def withdraw(self, amount):\n        \"\"\"\n        Withdraws a specified amount from the account if the amount is positive and sufficient funds are available.\n        \n        :param amount: The amount to withdraw.\n        \"\"\"\n        if amount > self.balance:\n            print(\"Insufficient funds.\")\n        elif amount < 0:\n            print(\"Withdrawal amount must be positive.\")\n        else:\n            self.balance -= amount\n\n    def check_balance(self):\n        \"\"\"\n        Returns the current balance of the account.\n        \n        :return: The current balance.\n        \"\"\"\n        return self.balance\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements: initial balance of 0, deposit and withdraw methods, check balance method, and prevention of insufficient withdrawals.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It handles deposits and withdrawals correctly, checks for positive amounts, and prevents insufficient withdrawals.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as negative deposit and withdrawal amounts and insufficient funds. However, it does not handle non-numeric inputs, which could be considered an edge case.\"}}", "unit_tests": "[\"\\nassert BankAccount().check_balance() == 0\\n\", \"\\nassert BankAccount().deposit(100) is None\\n\", \"\\nassert BankAccount().withdraw(100) is None\\n\", \"\\naccount = BankAccount(); account.deposit(100); assert account.check_balance() == 100\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(50); assert account.check_balance() == 50\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(150); assert account.check_balance() == 100\\n\", \"\\naccount = BankAccount(); account.deposit(-100); assert account.check_balance() == 0\\n\", \"\\naccount = BankAccount(); account.withdraw(-100); assert account.check_balance() == 0\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.deposit(50); assert account.check_balance() == 150\\n\", \"\\naccount = BankAccount(); account.deposit(100); account.withdraw(100); account.withdraw(100); assert account.check_balance() == 0\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "adfc186198b7a3f3407dc48bfd5b2c83", "input": "You are tasked with writing a regular expression to validate URLs. The URLs can optionally start with `http` or `https`. They should not include other protocols such as `ftp`, `mailto`, etc. The regular expression should be case-insensitive. Your solution should include a function `is_valid_url` that takes a string as input and returns `True` if the string is a valid URL according to the specified rules, and `False` otherwise.\n\n**Sample Input:**\n```\nhttp://example.com\nhttps://example.com\nexample.com\nftp://example.com\nmailto:test@example.com\n```\n\n**Sample Output:**\n```\nTrue\nTrue\nTrue\nFalse\nFalse\n```", "output": "```python\nimport re\n\ndef is_valid_url(url):\n    \"\"\"\n    Validates if the given URL is valid according to the specified rules.\n    \n    Args:\n    url (str): The URL to validate.\n    \n    Returns:\n    bool: True if the URL is valid, False otherwise.\n    \"\"\"\n    url_pattern = re.compile(r'^(https?:\\/\\/)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(:\\d+)?(\\/[^\\s]*)?$', re.IGNORECASE)\n    return url_pattern.match(url) is not None\n\n# Test the function\nprint(is_valid_url(\"http://example.com\"))    # True\nprint(is_valid_url(\"https://example.com\"))   # True\nprint(is_valid_url(\"example.com\"))           # True\nprint(is_valid_url(\"ftp://example.com\"))     # False\nprint(is_valid_url(\"mailto:test@example.com\")) # False\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirements by matching URLs with or without the protocol (http/https) and not matching URLs with other protocols like ftp, mailto, etc. It also handles case insensitivity.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The regular expression accurately matches valid URLs and excludes invalid ones as per the requirements.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases such as URLs without protocols, with ports, and with paths. However, it might not handle all possible valid URL formats or internationalized domain names comprehensively.\"}}", "unit_tests": "[\"\\nassert is_valid_url(\\\"http://example.com\\\") == True\\n\", \"\\nassert is_valid_url(\\\"https://example.com\\\") == True\\n\", \"\\nassert is_valid_url(\\\"example.com\\\") == True\\n\", \"\\nassert is_valid_url(\\\"ftp://example.com\\\") == False\\n\", \"\\nassert is_valid_url(\\\"mailto:test@example.com\\\") == False\\n\", \"\\nassert is_valid_url(\\\"http://sub.domain.co.uk\\\") == True\\n\", \"\\nassert is_valid_url(\\\"https://example.com:8080/path/to/resource\\\") == True\\n\", \"\\nassert is_valid_url(\\\"example.com/path/to/resource\\\") == True\\n\", \"\\nassert is_valid_url(\\\"http://example\\\") == False\\n\", \"\\nassert is_valid_url(\\\"https://example.c\\\") == False\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "41596e7188d759a6feffee5ee9534b81", "input": "In a graphics programming competition, you are tasked with creating a function to generate random colors for a digital art project. Implement a Python function `generate_random_color` that returns a random color in the RGB color model as a tuple of three integers, each ranging from 0 to 255. Use the `random` module to generate these integers. Your function should be able to produce different colors each time it is called.\n\n**Sample Input:**\n```\n# No input is required for this function.\n```\n\n**Sample Output:**\n```\n(123, 45, 67)  # Example output; actual output may vary.\n```", "output": "```python\nimport random\n\ndef generate_random_color():\n    \"\"\"\n    Generates a random color in the RGB color model.\n\n    Returns:\n        tuple: A tuple of three integers representing the RGB values, each ranging from 0 to 255.\n    \"\"\"\n    red = random.randint(0, 255)\n    green = random.randint(0, 255)\n    blue = random.randint(0, 255)\n    return (red, green, blue)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by generating a random color in the RGB color model as a tuple of three integers between 0 and 255 using the `random` module.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly uses `random.randint` to generate random integers within the specified range for each color component and returns them as a tuple.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The function handles the edge cases of the minimum (0) and maximum (255) values for each color component correctly, as `random.randint` includes both endpoints in its range.\"}}", "unit_tests": "[\"\\nassert isinstance(generate_random_color(), tuple)\\n\", \"\\nassert len(generate_random_color()) == 3\\n\", \"\\nassert all(isinstance(x, int) for x in generate_random_color())\\n\", \"\\nassert all(0 <= x <= 255 for x in generate_random_color())\\n\", \"\\nassert generate_random_color() != generate_random_color()\\n\", \"\\nassert generate_random_color() != (0, 0, 0) or generate_random_color() != (255, 255, 255)\\n\", \"\\nassert generate_random_color() != (128, 128, 128)\\n\", \"\\nassert generate_random_color() != (255, 0, 0) or generate_random_color() != (0, 255, 0) or generate_random_color() != (0, 0, 255)\\n\", \"\\nassert generate_random_color() != (255, 255, 0) or generate_random_color() != (0, 255, 255) or generate_random_color() != (255, 0, 255)\\n\", \"\\nassert generate_random_color() != (192, 192, 192)\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "744a50059e39e1ceb4bb89f20b4e0f66", "input": "You are given a string in `snake_case` format. Your task is to write a function `convert_snake_to_camel` that converts this string into `camelCase` format. The function should handle strings with multiple underscores and should also work for strings that are already in `camelCase` or `PascalCase`. \n\n**Input:**\n- A single string `snake_str` (1 \u2264 len(snake_str) \u2264 100) consisting of lowercase letters, uppercase letters, and underscores.\n\n**Output:**\n- A single string in `camelCase` format.\n\n**Sample Input:**\n```\nhello_world\nthis_is_a_test\nalreadyCamelCase\nPascalCase\n```\n\n**Sample Output:**\n```\nhelloWorld\nthisIsATest\nalreadyCamelCase\npascalCase\n```", "output": "```python\ndef convert_snake_to_camel(snake_str):\n    \"\"\"\n    Convert a string from snake_case to camelCase format.\n    \n    Parameters:\n    snake_str (str): The input string in snake_case format.\n    \n    Returns:\n    str: The converted string in camelCase format.\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_str\n\n# Test cases\nprint(convert_snake_to_camel('hello_world'))       # Output: helloWorld\nprint(convert_snake_to_camel('this_is_a_test'))    # Output: thisIsATest\nprint(convert_snake_to_camel('alreadyCamelCase'))  # Output: alreadyCamelCase\nprint(convert_snake_to_camel('PascalCase'))        # Output: pascalCase\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function meets the basic requirements of converting snake_case to camelCase and handles strings that are already in camelCase or PascalCase. However, it does not explicitly handle empty strings or strings with leading/trailing underscores, which could be considered edge cases.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic for converting snake_case to camelCase is correct. The function keeps the first word as is and capitalizes the first letter of the subsequent words. However, it does not handle cases where the input string might be empty or contain leading/trailing underscores, which could lead to incorrect results.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The function handles some edge cases, such as strings already in camelCase or PascalCase. However, it does not handle empty strings or strings with leading/trailing underscores, which are potential edge cases that should be considered for a more robust solution.\"}}", "unit_tests": "[\"\\nassert convert_snake_to_camel('hello_world') == 'helloWorld'\\n\", \"\\nassert convert_snake_to_camel('this_is_a_test') == 'thisIsATest'\\n\", \"\\nassert convert_snake_to_camel('alreadyCamelCase') == 'alreadyCamelCase'\\n\", \"\\nassert convert_snake_to_camel('PascalCase') == 'pascalCase'\\n\", \"\\nassert convert_snake_to_camel('multiple__underscores__here') == 'multipleUnderscoresHere'\\n\", \"\\nassert convert_snake_to_camel('singleword') == 'singleword'\\n\", \"\\nassert convert_snake_to_camel('_leading_underscore') == '_leadingUnderscore'\\n\", \"\\nassert convert_snake_to_camel('trailing_underscore_') == 'trailingUnderscore_'\\n\", \"\\nassert convert_snake_to_camel('') == ''\\n\", \"\\nassert convert_snake_to_camel('ALL_CAPS_SNAKE_CASE') == 'aLLCapsSnakeCase'\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"fail\", \"fail\", \"pass\", \"fail\"]", "average_test_score": "0.6"}
{"id": "3257fa1144761460a0083ef32bb31484", "input": "You are tasked with implementing a `Book` class to manage book information. The class should support the following operations:\n\n1. **Initialization**: Create an instance of the `Book` class with the following attributes:\n   - `title`: A string representing the title of the book.\n   - `author`: A string representing the author of the book.\n   - `year_published`: An integer representing the year the book was published.\n\n2. **Retrieve Book Information**: Implement a method to return a formatted string containing the book's title, author, and year of publication in the format: `\"Title: <title>, Author: <author>, Year: <year_published>\"`.\n\n**Sample Input/Output**:\n- Input: `Book(\"1984\", \"George Orwell\", 1949)`\n- Output: `\"Title: 1984, Author: George Orwell, Year: 1949\"`", "output": "```python\nclass Book:\n    def __init__(self, title: str, author: str, year_published: int):\n        \"\"\"\n        Initialize a new Book instance.\n\n        :param title: The title of the book.\n        :param author: The author of the book.\n        :param year_published: The year the book was published.\n        \"\"\"\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def get_book_info(self) -> str:\n        \"\"\"\n        Return a formatted string containing the book's title, author, and year of publication.\n\n        :return: A string in the format \"Title: <title>, Author: <author>, Year: <year_published>\".\n        \"\"\"\n        return f\"Title: {self.title}, Author: {self.author}, Year: {self.year_published}\"\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by implementing the `Book` class with the `__init__` method taking `title`, `author`, and `year_published` as parameters, and the `get_book_info` method returning the formatted string as required.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The class and methods are implemented as specified, and the string formatting is accurate.\"}, \"edge_case_consideration\": {\"score\": 2, \"justification\": \"Minimal consideration of unusual inputs. The solution does not handle cases where the inputs might not be of the expected types (e.g., `title` and `author` as strings, `year_published` as an integer).\"}}", "unit_tests": "[\"\\nassert Book(\\\"1984\\\", \\\"George Orwell\\\", 1949).get_book_info() == \\\"Title: 1984, Author: George Orwell, Year: 1949\\\"\\n\", \"\\nassert Book(\\\"To Kill a Mockingbird\\\", \\\"Harper Lee\\\", 1960).get_book_info() == \\\"Title: To Kill a Mockingbird, Author: Harper Lee, Year: 1960\\\"\\n\", \"\\nassert Book(\\\"The Great Gatsby\\\", \\\"F. Scott Fitzgerald\\\", 1925).get_book_info() == \\\"Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1925\\\"\\n\", \"\\nassert Book(\\\"Pride and Prejudice\\\", \\\"Jane Austen\\\", 1813).get_book_info() == \\\"Title: Pride and Prejudice, Author: Jane Austen, Year: 1813\\\"\\n\", \"\\nassert Book(\\\"Moby Dick\\\", \\\"Herman Melville\\\", 1851).get_book_info() == \\\"Title: Moby Dick, Author: Herman Melville, Year: 1851\\\"\\n\", \"\\nassert Book(\\\"War and Peace\\\", \\\"Leo Tolstoy\\\", 1869).get_book_info() == \\\"Title: War and Peace, Author: Leo Tolstoy, Year: 1869\\\"\\n\", \"\\nassert Book(\\\"The Catcher in the Rye\\\", \\\"J.D. Salinger\\\", 1951).get_book_info() == \\\"Title: The Catcher in the Rye, Author: J.D. Salinger, Year: 1951\\\"\\n\", \"\\nassert Book(\\\"The Hobbit\\\", \\\"J.R.R. Tolkien\\\", 1937).get_book_info() == \\\"Title: The Hobbit, Author: J.R.R. Tolkien, Year: 1937\\\"\\n\", \"\\nassert Book(\\\"Brave New World\\\", \\\"Aldous Huxley\\\", 1932).get_book_info() == \\\"Title: Brave New World, Author: Aldous Huxley, Year: 1932\\\"\\n\", \"\\nassert Book(\\\"Fahrenheit 451\\\", \\\"Ray Bradbury\\\", 1953).get_book_info() == \\\"Title: Fahrenheit 451, Author: Ray Bradbury, Year: 1953\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "2c3c2978c3bcfabc99d46b8deb145008", "input": "You are given a list of integers. Your task is to implement a sorting algorithm to sort the list in ascending order. You are not allowed to use any built-in sorting functions or libraries. Implement your own sorting algorithm, such as bubble sort, insertion sort, or quicksort.\n\n**Input:**\n- The first line contains an integer `n` (1 \u2264 n \u2264 1000), the number of elements in the list.\n- The second line contains `n` space-separated integers representing the list of integers to be sorted.\n\n**Output:**\n- Print the sorted list of integers in ascending order.\n\n**Sample Input:**\n```\n7\n64 34 25 12 22 11 90\n```\n\n**Sample Output:**\n```\n11 12 22 25 34 64 90\n```", "output": "```python\ndef bubble_sort(arr):\n    \"\"\"\n    Sorts a list of integers in ascending order using the bubble sort algorithm.\n\n    Parameters:\n    arr (list): The list of integers to be sorted.\n\n    Returns:\n    None: The list is sorted in place.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    my_list = list(map(int, input().strip().split()))\n    bubble_sort(my_list)\n    print(\" \".join(map(str, my_list)))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement by implementing a bubble sort algorithm to sort a list of integers in ascending order without using any built-in sorting functions or libraries.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic of the bubble sort algorithm is completely correct and consistently structured. It correctly compares adjacent elements and swaps them if they are in the wrong order, repeating this process until the list is sorted.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution handles basic cases of sorting a list of integers. However, it does not explicitly handle edge cases such as an empty list, a list with one element, or a list with all identical elements. While bubble sort would technically work for these cases, the solution does not explicitly address or test them.\"}}", "unit_tests": "[\"\\nassert bubble_sort([64, 34, 25, 12, 22, 11, 90]) is None\\n\", \"\\nassert bubble_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]\\n\", \"\\nassert bubble_sort([5, 1, 4, 2, 8]) == [1, 2, 4, 5, 8]\\n\", \"\\nassert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert bubble_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert bubble_sort([]) == []\\n\", \"\\nassert bubble_sort([1]) == [1]\\n\", \"\\nassert bubble_sort([2, 1]) == [1, 2]\\n\", \"\\nassert bubble_sort([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]\\n\", \"\\nassert bubble_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "ac23ab8eab3598b43ee4e9cc502f1012", "input": "Design and implement a Python script that sets up a basic web server using the Flask framework. The server must support two endpoints:\n1. A root endpoint (`/`) that returns a welcome message.\n2. A time endpoint (`/time`) that returns the current date and time formatted as `YYYY-MM-DD HH:MM:SS`.\n\nThe server should be capable of running locally. Your implementation should be robust and handle requests efficiently.\n\n**Sample Input/Output:**\n\n- **Request:** `GET /`\n- **Response:** `Welcome to the Simple Flask Server!`\n\n- **Request:** `GET /time`\n- **Response:** `Current Time: 2023-10-05 14:30:00` (Note: The actual time will vary based on the server's current time)", "output": "```python\nfrom flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/')\ndef welcome():\n    \"\"\"\n    Returns a welcome message when the root endpoint is accessed.\n    \n    Returns:\n        str: A welcome message.\n    \"\"\"\n    return 'Welcome to the Simple Flask Server!'\n\n@app.route('/time')\ndef current_time():\n    \"\"\"\n    Returns the current date and time formatted as 'YYYY-MM-DD HH:MM:SS'.\n    \n    Returns:\n        str: The current date and time.\n    \"\"\"\n    now = datetime.now()\n    return f'Current Time: {now.strftime(\"%Y-%m-%d %H:%M:%S\")}'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by creating a Flask web server with two routes: one for displaying a welcome message and another for displaying the current time. The server can run locally as well.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The Flask app is set up correctly with routes that return the expected responses.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution does not handle any edge cases explicitly. For example, it does not consider potential issues with the server running in a production environment or handle any exceptions that might occur. However, it does run correctly for the basic use case of displaying a welcome message and the current time.\"}}", "unit_tests": "[\"\\nassert app.name == 'flask.app'\\n\", \"\\nassert welcome() == 'Welcome to the Simple Flask Server!'\\n\", \"\\nassert 'Current Time:' in current_time()\\n\", \"\\nassert len(current_time().split(':')) == 3\\n\", \"\\nassert current_time().split()[1].count('-') == 2\\n\", \"\\nassert current_time().split()[3].count(':') == 2\\n\", \"\\nassert app.url_map.bind('').match('/') == ('welcome', {})\\n\", \"\\nassert app.url_map.bind('').match('/time') == ('current_time', {})\\n\", \"\\nassert app.url_map.is_endpoint_expecting('welcome', 'arg') == False\\n\", \"\\nassert app.url_map.is_endpoint_expecting('current_time', 'arg') == False\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "fd412f1b0ed7e8a78908d5e9850d3bac", "input": "You are given two strings `text1` and `text2`. Your task is to implement a function `find_common_words` that returns a list of common words present in both strings. The comparison should be case-insensitive and only consider alphanumeric characters. Additionally, ignore the following common stop words: 'the', 'and', 'is', 'a', 'an', 'of', 'for', 'it', 'in', 'on', 'at', 'to', 'with', 'as', 'by', 'that', 'this', 'these', 'those'. The order of words in the output list does not matter.\n\n**Sample Input:**\n```\ntext1 = \"Python is a great language for data analysis and data science\"\ntext2 = \"Data analysis is an important part of data science\"\n```\n\n**Sample Output:**\n```\n['data', 'science', 'analysis']\n```", "output": "```python\nimport re\nfrom collections import Counter\n\ndef find_common_words(text1, text2):\n    \"\"\"\n    Returns a list of common words found in both input strings, ignoring case and stop words.\n    \n    :param text1: First input string\n    :param text2: Second input string\n    :return: List of common words\n    \"\"\"\n    # Define a set of common stop words\n    stop_words = set(['the', 'and', 'is', 'a', 'an', 'of', 'for', 'it', 'in', 'on', 'at', 'to', 'with', 'as', 'by', 'that', 'this', 'these', 'those'])\n\n    # Helper function to clean and split text into words\n    def clean_text(text):\n        # Use regex to keep only alphanumeric characters and spaces, then lower case the text\n        cleaned_text = re.sub(r'[^a-zA-Z0-9\\s]', '', text).lower()\n        # Split the text into words\n        words = cleaned_text.split()\n        # Filter out stop words\n        filtered_words = [word for word in words if word not in stop_words]\n        return filtered_words\n\n    # Get words from both texts\n    words1 = clean_text(text1)\n    words2 = clean_text(text2)\n\n    # Count word occurrences in both lists\n    count1 = Counter(words1)\n    count2 = Counter(words2)\n\n    # Find common words\n    common_words = list((count1 & count2).elements())\n\n    return common_words\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements: it takes two strings as input, returns a list of common words, ignores case sensitivity, considers only alphanumeric characters, and removes common stop words.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The solution effectively cleans the input texts, removes stop words, and finds common words using the Counter intersection method.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as different cases, non-alphanumeric characters, and common stop words. However, it does not explicitly handle cases like empty strings or strings with only stop words, which could be considered edge cases.\"}}", "unit_tests": "[\"\\nassert find_common_words(\\\"Python is great\\\", \\\"Python is fun\\\") == [\\\"python\\\", \\\"is\\\"]\\n\", \"\\nassert find_common_words(\\\"Hello world\\\", \\\"world of code\\\") == [\\\"world\\\"]\\n\", \"\\nassert find_common_words(\\\"The quick brown fox\\\", \\\"The lazy brown dog\\\") == [\\\"the\\\", \\\"brown\\\"]\\n\", \"\\nassert find_common_words(\\\"Data science and data analysis\\\", \\\"Data analysis is key\\\") == [\\\"data\\\", \\\"analysis\\\"]\\n\", \"\\nassert find_common_words(\\\"This is a test\\\", \\\"This is only a test\\\") == [\\\"this\\\", \\\"is\\\", \\\"a\\\", \\\"test\\\"]\\n\", \"\\nassert find_common_words(\\\"One fish two fish\\\", \\\"Red fish blue fish\\\") == [\\\"fish\\\"]\\n\", \"\\nassert find_common_words(\\\"Stop words are the and is\\\", \\\"Remove stop words like the and is\\\") == [\\\"stop\\\", \\\"words\\\", \\\"like\\\"]\\n\", \"\\nassert find_common_words(\\\"No common words here\\\", \\\"Completely different\\\") == []\\n\", \"\\nassert find_common_words(\\\"Special $characters #should &be *ignored!\\\", \\\"Characters should be ignored\\\") == [\\\"characters\\\", \\\"should\\\", \\\"be\\\", \\\"ignored\\\"]\\n\", \"\\nassert find_common_words(\\\"UPPER and lower CASE\\\", \\\"Case should be ignored\\\") == [\\\"case\\\", \\\"should\\\", \\\"be\\\", \\\"ignored\\\"]\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"fail\", \"pass\", \"fail\", \"fail\", \"fail\", \"pass\", \"pass\", \"fail\"]", "average_test_score": "0.4"}
{"id": "a60d66841b147707ed8c0dca5b933b10", "input": "You are developing a text editor that requires highlighting all occurrences of a specific word within a given text. Your task is to implement a function `highlight_word` that accepts two parameters: a string `text` and a string `word`. The function should return a new string where each occurrence of `word` in `text` is enclosed in asterisks (*). Ensure that only whole words are highlighted, not substrings of other words.\n\n**Input:**\n- The first line contains the text `text` (1 \u2264 |text| \u2264 1000).\n- The second line contains the word `word` (1 \u2264 |word| \u2264 100).\n\n**Output:**\n- A single line containing the modified text with the specified word highlighted.\n\n**Sample Input:**\n```\nPython is a great programming language. Python is versatile.\nPython\n```\n\n**Sample Output:**\n```\n*Python* is a great programming language. *Python* is versatile.\n```", "output": "```python\nimport re\n\ndef highlight_word(text, word):\n    \"\"\"\n    Highlights all occurrences of a specific word in a given text by surrounding it with asterisks (*).\n    \n    Parameters:\n    text (str): The input text where the word needs to be highlighted.\n    word (str): The word to be highlighted in the text.\n    \n    Returns:\n    str: The modified text with the specified word highlighted.\n    \"\"\"\n    highlighted_text = re.sub(r'\\b' + re.escape(word) + r'\\b', '*' + word + '*', text)\n    return highlighted_text\n\n# Example usage\ntext = \"Python is a great programming language. Python is versatile.\"\nword = \"Python\"\nprint(highlight_word(text, word))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by highlighting all occurrences of the specified word in the text with asterisks.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct, using regex with word boundaries to ensure only whole words are matched and replaced.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles most edge cases, such as matching whole words only and using regex to escape special characters in the word. However, it does not explicitly handle cases like empty strings or very large inputs, which could be considered for robustness.\"}}", "unit_tests": "[\"\\nassert highlight_word(\\\"Python is great\\\", \\\"Python\\\") == \\\"*Python* is great\\\"\\n\", \"\\nassert highlight_word(\\\"Python is great, python is fun\\\", \\\"Python\\\") == \\\"*Python* is great, python is fun\\\"\\n\", \"\\nassert highlight_word(\\\"python is great, Python is fun\\\", \\\"python\\\") == \\\"*python* is great, *Python* is fun\\\"\\n\", \"\\nassert highlight_word(\\\"PythonPython\\\", \\\"Python\\\") == \\\"PythonPython\\\"\\n\", \"\\nassert highlight_word(\\\"Python is great. Python.\\\", \\\"Python\\\") == \\\"*Python* is great. *Python*.\\\"\\n\", \"\\nassert highlight_word(\\\"Python\\\", \\\"Python\\\") == \\\"*Python*\\\"\\n\", \"\\nassert highlight_word(\\\"Python is great\\\", \\\"python\\\") == \\\"Python is great\\\"\\n\", \"\\nassert highlight_word(\\\"Python is great\\\", \\\"is\\\") == \\\"Python *is* great\\\"\\n\", \"\\nassert highlight_word(\\\"Python is great\\\", \\\"Python is\\\") == \\\"Python is great\\\"\\n\", \"\\nassert highlight_word(\\\"\\\", \\\"Python\\\") == \\\"\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\"]", "average_test_score": "0.8"}
{"id": "aa94c4cfd6db48738cf032336f4f0df0", "input": "Implement a Python class `Car` with the following specifications:\n\n- **Attributes:**\n  - `make`: A string representing the make of the car.\n  - `model`: A string representing the model of the car.\n  - `year`: An integer representing the year the car was manufactured.\n  - `mileage`: An integer representing the mileage of the car in miles.\n  - `color`: A string representing the color of the car.\n\n- **Methods:**\n  - `__init__(self, make, model, year, mileage, color)`: Initializes a new instance of the `Car` class with the specified attributes.\n  - `__str__(self)`: Returns a string representation of the car in the format: `Car(make='make', model='model', year=year, mileage=mileage, color='color')`.\n  - `drive(self, distance)`: Increases the car's mileage by the specified distance. Raises a `ValueError` if the distance is negative.\n  - `paint(self, new_color)`: Changes the car's color to the specified new color.\n\n**Sample Input/Output:**\n```python\nmy_car = Car(\"Toyota\", \"Corolla\", 2020, 15000, \"blue\")\nprint(my_car)  # Output: Car(make='Toyota', model='Corolla', year=2020, mileage=15000, color='blue')\nmy_car.drive(300)\nprint(my_car)  # Output: Car(make='Toyota', model='Corolla', year=2020, mileage=15300, color='blue')\nmy_car.paint(\"red\")\nprint(my_car)  # Output: Car(make='Toyota', model='Corolla', year=2020, mileage=15300, color='red')\n```", "output": "```python\nclass Car:\n    def __init__(self, make, model, year, mileage, color):\n        \"\"\"\n        Initializes a new instance of the Car class.\n\n        :param make: The make of the car.\n        :param model: The model of the car.\n        :param year: The year the car was manufactured.\n        :param mileage: The mileage of the car in miles.\n        :param color: The color of the car.\n        \"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n        self.color = color\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the car.\n\n        :return: A string in the format: Car(make='make', model='model', year=year, mileage=mileage, color='color')\n        \"\"\"\n        return (f\"Car(make='{self.make}', model='{self.model}', year={self.year}, \"\n                f\"mileage={self.mileage}, color='{self.color}')\")\n\n    def drive(self, distance):\n        \"\"\"\n        Increases the car's mileage by the specified distance.\n\n        :param distance: The distance to drive.\n        :raises ValueError: If the distance is negative.\n        \"\"\"\n        if distance < 0:\n            raise ValueError(\"Distance cannot be negative\")\n        self.mileage += distance\n\n    def paint(self, new_color):\n        \"\"\"\n        Changes the car's color to the specified new color.\n\n        :param new_color: The new color of the car.\n        \"\"\"\n        self.color = new_color\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements, including the attributes and methods for the Car class.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The methods work as intended and handle invalid input for the drive method.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles the edge case of negative distance in the drive method. However, it does not handle other potential edge cases such as non-integer values for year or mileage, or invalid types for the other attributes.\"}}", "unit_tests": "[\"\\nassert str(Car(\\\"Toyota\\\", \\\"Corolla\\\", 2020, 15000, \\\"blue\\\")) == \\\"Car(make='Toyota', model='Corolla', year=2020, mileage=15000, color='blue')\\\"\\n\", \"\\nassert Car(\\\"Honda\\\", \\\"Civic\\\", 2018, 20000, \\\"red\\\").make == \\\"Honda\\\"\\n\", \"\\nassert Car(\\\"Ford\\\", \\\"Mustang\\\", 2021, 5000, \\\"black\\\").model == \\\"Mustang\\\"\\n\", \"\\nassert Car(\\\"Chevrolet\\\", \\\"Impala\\\", 2019, 12000, \\\"white\\\").year == 2019\\n\", \"\\nassert Car(\\\"Tesla\\\", \\\"Model S\\\", 2022, 0, \\\"silver\\\").mileage == 0\\n\", \"\\nassert Car(\\\"BMW\\\", \\\"X5\\\", 2017, 30000, \\\"gray\\\").color == \\\"gray\\\"\\n\", \"\\ncar = Car(\\\"Audi\\\", \\\"A4\\\", 2016, 18000, \\\"green\\\")\\ncar.drive(500)\\nassert car.mileage == 18500\\n\", \"\\ncar = Car(\\\"Mercedes\\\", \\\"C-Class\\\", 2015, 25000, \\\"brown\\\")\\ncar.paint(\\\"yellow\\\")\\nassert car.color == \\\"yellow\\\"\\n\", \"\\ncar = Car(\\\"Lamborghini\\\", \\\"Aventador\\\", 2023, 1000, \\\"orange\\\")\\ncar.drive(0)\\nassert car.mileage == 1000\\n\", \"\\ncar = Car(\\\"Porsche\\\", \\\"911\\\", 2020, 7000, \\\"blue\\\")\\ntry:\\n    car.drive(-100)\\nexcept ValueError as e:\\n    assert str(e) == \\\"Distance cannot be negative\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "53ad35480bec34a8ff8e78bdb9fb7658", "input": "You are given a list of integers. Your task is to write a function `find_largest_prime(numbers)` that identifies and returns the largest prime number in the list. If there are no prime numbers in the list, the function should return `None`. A prime number is defined as a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n**Input:**\n- A list of integers `numbers` (1 \u2264 len(numbers) \u2264 10^3), where each integer is in the range -10^6 \u2264 numbers[i] \u2264 10^6.\n\n**Output:**\n- Return the largest prime number in the list, or `None` if no prime numbers are found.\n\n**Sample Input:**\n```\n[10, 15, 3, 7, 11, 13, 4, 6]\n```\n\n**Sample Output:**\n```\n13\n```", "output": "```python\ndef is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_largest_prime(numbers):\n    \"\"\"Find the largest prime number in a list of numbers.\"\"\"\n    largest_prime = None\n    for number in numbers:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    return largest_prime\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by correctly identifying and returning the largest prime number from the list. It also returns None if no prime numbers are found.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The helper function `is_prime` accurately determines if a number is prime, and `find_largest_prime` correctly iterates through the list to find the largest prime number.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution handles various edge cases, such as lists with no prime numbers, lists with negative numbers, and lists with the smallest prime number (2). The `is_prime` function correctly identifies numbers less than or equal to 1 as non-prime.\"}}", "unit_tests": "[\"\\nassert find_largest_prime([2, 3, 5, 7, 11, 13]) == 13\\n\", \"\\nassert find_largest_prime([4, 6, 8, 10, 12]) == None\\n\", \"\\nassert find_largest_prime([17, 19, 23, 29, 31]) == 31\\n\", \"\\nassert find_largest_prime([1, 0, -1, -3, -5]) == None\\n\", \"\\nassert find_largest_prime([29, 15, 21, 33, 37]) == 37\\n\", \"\\nassert find_largest_prime([]) == None\\n\", \"\\nassert find_largest_prime([2]) == 2\\n\", \"\\nassert find_largest_prime([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 97\\n\", \"\\nassert find_largest_prime([100, 101, 102, 103, 104, 105]) == 103\\n\", \"\\nassert find_largest_prime([15, 21, 22, 25, 27, 28]) == None\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "eedda4d73ad2949c73f1844222fab12a", "input": "You are given a list of integers. Your task is to write a function `sum_even_odd` that computes the sum of all even numbers and the sum of all odd numbers in the list. The function should return a tuple with the first element being the sum of even numbers and the second element being the sum of odd numbers.\n\n**Input:**\n- A list of integers `numbers` (1 \u2264 len(numbers) \u2264 10^3), where each integer `num` satisfies -10^3 \u2264 num \u2264 10^3.\n\n**Output:**\n- A tuple `(even_sum, odd_sum)` where `even_sum` is the sum of all even numbers in the list and `odd_sum` is the sum of all odd numbers in the list.\n\n**Sample Input:**\n```\n[1, 2, 3, 4, 5]\n```\n\n**Sample Output:**\n```\n(6, 9)\n```", "output": "```python\ndef sum_even_odd(numbers):\n    \"\"\"\n    Computes the sum of even and odd numbers in a list.\n\n    Parameters:\n    numbers (list of int): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the sum of even numbers and the sum of odd numbers.\n    \"\"\"\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    odd_sum = sum(num for num in numbers if num % 2 != 0)\n    return (even_sum, odd_sum)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements by taking a list of integers as input and returning a tuple with the sum of even and odd numbers.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly identifies even and odd numbers and calculates their respective sums.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles typical cases well, but it does not explicitly handle edge cases such as an empty list or a list with negative numbers. However, the logic would still work correctly for these cases, so it is mostly robust.\"}}", "unit_tests": "[\"\\nassert sum_even_odd([1, 2, 3, 4, 5]) == (6, 9)\\n\", \"\\nassert sum_even_odd([2, 4, 6, 8, 10]) == (30, 0)\\n\", \"\\nassert sum_even_odd([1, 3, 5, 7, 9]) == (0, 25)\\n\", \"\\nassert sum_even_odd([]) == (0, 0)\\n\", \"\\nassert sum_even_odd([0]) == (0, 0)\\n\", \"\\nassert sum_even_odd([-2, -4, -6, -8, -10]) == (-30, 0)\\n\", \"\\nassert sum_even_odd([-1, -3, -5, -7, -9]) == (0, -25)\\n\", \"\\nassert sum_even_odd([-1, 2, -3, 4, -5, 6]) == (12, -9)\\n\", \"\\nassert sum_even_odd([100, 200, 300, 1, 3, 5]) == (600, 9)\\n\", \"\\nassert sum_even_odd([11, 22, 33, 44, 55, 66]) == (132, 99)\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "36f980604dacc9dc4ad8bfdbe60018fc", "input": "You are given a string `s`. Your task is to implement a function `find_longest_palindrome` that identifies and returns the longest palindromic substring within `s`. If there are multiple palindromic substrings of the same maximum length, return the one that appears first in the string. \n\n**Constraints:**\n- The length of the string `s` is between 1 and 1000, inclusive.\n- The string `s` consists of lowercase English letters.\n\n**Sample Input:**\n```\nbabad\n```\n\n**Sample Output:**\n```\nbab\n```\n\n**Sample Input:**\n```\ncbbd\n```\n\n**Sample Output:**\n```\nbb\n```", "output": "```python\ndef find_longest_palindrome(s):\n    \"\"\"\n    Finds the longest palindromic substring in the given string s.\n    \n    :param s: Input string\n    :return: Longest palindromic substring\n    \"\"\"\n    if not s:\n        return \"\"\n    \n    start, end = 0, 0\n    \n    for i in range(len(s)):\n        len1 = expand_around_center(s, i, i)\n        len2 = expand_around_center(s, i, i + 1)\n        max_len = max(len1, len2)\n        if max_len > end - start:\n            start = i - (max_len - 1) // 2\n            end = i + max_len // 2\n    \n    return s[start:end + 1]\n\ndef expand_around_center(s, left, right):\n    \"\"\"\n    Expands around the center indices left and right to find the length of the palindrome.\n    \n    :param s: Input string\n    :param left: Left index\n    :param right: Right index\n    :return: Length of the palindrome\n    \"\"\"\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return right - left - 1\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement by finding the longest palindromic substring and returning the first one if there are multiple substrings of the same maximum length.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The function `expand_around_center` correctly identifies palindromes by expanding around each character and each pair of characters, and the main function correctly updates the start and end indices of the longest palindrome found.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases, including empty strings, single-character strings, and strings with multiple palindromes of the same length. It also correctly handles cases where the longest palindrome is of odd or even length.\"}}", "unit_tests": "[\"\\nassert find_longest_palindrome(\\\"babad\\\") == \\\"bab\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"cbbd\\\") == \\\"bb\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"a\\\") == \\\"a\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"ac\\\") == \\\"a\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"racecar\\\") == \\\"racecar\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"noon high it is\\\") == \\\"noon\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"abacdfgdcaba\\\") == \\\"aba\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"aaaa\\\") == \\\"aaaa\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"\\\") == \\\"\\\"\\n\", \"\\nassert find_longest_palindrome(\\\"abcba\\\") == \\\"abcba\\\"\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.8"}
{"id": "7759a28db8a6f0a223248bb95a50539e", "input": "You are given a string `s` consisting of characters '(', ')', '[', ']', '{', and '}'. Your task is to determine if the string is balanced. A string is considered balanced if every opening bracket has a corresponding closing bracket in the correct order. For example, the string `\"{[()]}\"` is balanced, but the string `\"{[(])}\"` is not.\n\n**Input:**\n- A single string `s` (1 \u2264 |s| \u2264 10^3) containing only the characters '(', ')', '[', ']', '{', and '}'.\n\n**Output:**\n- Return `True` if the string is balanced, otherwise return `False`.\n\n**Sample Input:**\n```\n\"{[()]}\"\n```\n\n**Sample Output:**\n```\nTrue\n```\n\n**Sample Input:**\n```\n\"{[(])}\"\n```\n\n**Sample Output:**\n```\nFalse\n```", "output": "```python\ndef is_balanced(s):\n    \"\"\"\n    Determines if the input string s containing only '(', ')', '[', ']', '{', and '}' is balanced.\n    \n    :param s: A string consisting of the characters '(', ')', '[', ']', '{', and '}'.\n    :return: True if the string is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n    \n    for char in s:\n        if char in matching_bracket.values():\n            stack.append(char)\n        elif char in matching_bracket.keys():\n            if not stack or matching_bracket[char] != stack.pop():\n                return False\n        else:\n            return False\n    \n    return not stack\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function addresses the main requirement of checking if the string is balanced with parentheses, brackets, and curly braces. However, it does not handle strings that contain characters other than these brackets, which could be considered a minor gap.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic for checking balanced brackets is mostly correct. It uses a stack to keep track of opening brackets and checks for matching closing brackets. However, the function returns False when encountering non-bracket characters, which might not be the intended behavior as per the problem statement.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution handles some edge cases, such as mismatched brackets and unbalanced brackets. However, it does not handle strings with non-bracket characters gracefully, and it does not consider an empty string as balanced, which could be an edge case.\"}}", "unit_tests": "[\"\\nassert is_balanced(\\\"{[()]}\\\") == True\\n\", \"\\nassert is_balanced(\\\"{[(])}\\\") == False\\n\", \"\\nassert is_balanced(\\\"()[]{}\\\") == True\\n\", \"\\nassert is_balanced(\\\"([{}])\\\") == True\\n\", \"\\nassert is_balanced(\\\"((()))\\\") == True\\n\", \"\\nassert is_balanced(\\\"({[)]}\\\") == False\\n\", \"\\nassert is_balanced(\\\"((({{{[[[]]]}}})))\\\") == True\\n\", \"\\nassert is_balanced(\\\"((((((()))))))\\\") == True\\n\", \"\\nassert is_balanced(\\\"((((((())\\\")) == False\\n\", \"\\nassert is_balanced(\\\"\\\") == True\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\"]", "average_test_score": "0.9"}
{"id": "9a12436a46bd56ce058dbd7dc51b7e27", "input": "You are given a directory path as input. Your task is to write a Python script that lists all files and subdirectories within the specified directory using the `os` module. If the directory does not exist, your program should output an error message. \n\n**Input:**\n- A single line containing the directory path as a string.\n\n**Output:**\n- If the directory exists, print each file and subdirectory name on a new line, prefixed with \"Contents of '<directory_path>':\".\n- If the directory does not exist, print \"Error: The directory '<directory_path>' does not exist.\".\n\n**Sample Input 1:**\n```\n/path/to/existing/directory\n```\n\n**Sample Output 1:**\n```\nContents of '/path/to/existing/directory':\nfile1.txt\nsubdir1\nfile2.txt\n```\n\n**Sample Input 2:**\n```\n/nonexistent/directory\n```\n\n**Sample Output 2:**\n```\nError: The directory '/nonexistent/directory' does not exist.\n```", "output": "```python\nimport os\n\ndef list_directory_contents(path):\n    \"\"\"\n    Lists all files and subdirectories within the specified directory.\n    \n    Parameters:\n    path (str): The path to the directory to be listed.\n    \n    Returns:\n    None\n    \"\"\"\n    if not os.path.exists(path):\n        print(f\"Error: The directory '{path}' does not exist.\")\n        return\n    \n    try:\n        contents = os.listdir(path)\n        print(f\"Contents of '{path}':\")\n        for item in contents:\n            print(item)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Replace 'your_directory_path' with the path you want to check\nlist_directory_contents('your_directory_path')\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The script fully meets all specified requirements. It reads a directory, lists all files and subdirectories, uses the `os` module, and handles the case where the directory does not exist.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It checks if the directory exists, lists its contents, and handles exceptions gracefully.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The script handles the case where the directory does not exist and catches general exceptions. However, it could be improved by handling specific exceptions and considering other edge cases like permission issues or invalid paths.\"}}", "unit_tests": "[\"\\nassert list_directory_contents(\\\"/nonexistent_directory\\\") is None\\n\", \"\\nassert list_directory_contents(\\\"\\\") is None\\n\", \"\\nassert list_directory_contents(\\\"/\\\") is None\\n\", \"\\nassert list_directory_contents(os.getcwd()) is None\\n\", \"\\nassert list_directory_contents(os.path.dirname(os.path.abspath(__file__))) is None\\n\", \"\\nassert list_directory_contents(\\\"/tmp\\\") is None\\n\", \"\\nassert list_directory_contents(\\\"/usr\\\") is None\\n\", \"\\nassert list_directory_contents(\\\"/var/log\\\") is None\\n\", \"\\nassert list_directory_contents(os.path.expanduser(\\\"~\\\")) is None\\n\", \"\\nassert list_directory_contents(os.path.join(os.path.expanduser(\\\"~\\\"), \\\"Documents\\\")) is None\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "e51fd4574fa180dc05cf67c07b01b525", "input": "You are given a list of integers. Your task is to write a function that returns a new list with all consecutive duplicate elements removed. The order of the remaining elements should be the same as in the original list.\n\n**Input:**\n- A list of integers `nums` (0 \u2264 len(nums) \u2264 10^5), where each integer is in the range [-10^9, 10^9].\n\n**Output:**\n- A list of integers with consecutive duplicates removed.\n\n**Sample Input:**\n```\n[1, 2, 2, 3, 3, 3, 4]\n```\n\n**Sample Output:**\n```\n[1, 2, 3, 4]\n```", "output": "```python\ndef remove_consecutive_duplicates(nums):\n    \"\"\"\n    Removes consecutive duplicate elements from the input list.\n\n    :param nums: List of integers\n    :return: List of integers with consecutive duplicates removed\n    \"\"\"\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    \n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    \n    return result\n\n# Example usage\ninput_list = [1, 2, 2, 3, 3, 3, 4]\nprint(remove_consecutive_duplicates(input_list))  # Output: [1, 2, 3, 4]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by removing consecutive duplicates from the list and returning the expected result.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently handles the task of removing consecutive duplicates without any issues.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the edge case of an empty list correctly. However, it does not explicitly handle non-integer elements in the list, which could be considered an edge case if the input is not guaranteed to be a list of integers.\"}}", "unit_tests": "[\"\\nassert remove_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\\n\", \"\\nassert remove_consecutive_duplicates([1, 1, 1, 1, 1]) == [1]\\n\", \"\\nassert remove_consecutive_duplicates([]) == []\\n\", \"\\nassert remove_consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\\n\", \"\\nassert remove_consecutive_duplicates([5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == [5, 4, 3, 2, 1]\\n\", \"\\nassert remove_consecutive_duplicates([1]) == [1]\\n\", \"\\nassert remove_consecutive_duplicates([1, 2, 1, 2, 1]) == [1, 2, 1, 2, 1]\\n\", \"\\nassert remove_consecutive_duplicates([1, 1, 2, 2, 3, 3, 2, 2, 1, 1]) == [1, 2, 3, 2, 1]\\n\", \"\\nassert remove_consecutive_duplicates([1, 2, 3, 2, 3, 4, 5, 4, 5]) == [1, 2, 3, 2, 3, 4, 5, 4, 5]\\n\", \"\\nassert remove_consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == [1, 2, 3, 4]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "32ecbcc08e8bdd546e5478b9a831d923", "input": "You are given a dictionary `user_profiles` where each key is a unique username and each value is another dictionary containing user details such as `email`, `age`, and `city`. Your task is to implement a function `update_email` that updates the `email` field for a specified user. The function should accept three parameters: `user_profiles`, `username`, and `new_email`. If the `username` does not exist in the `user_profiles`, the function should raise a `KeyError` with a message indicating the username was not found.\n\n**Sample Input:**\n```python\nuser_profiles = {\n    'john_doe': {'email': 'john@example.com', 'age': 30, 'city': 'New York'},\n    'jane_smith': {'email': 'jane@example.com', 'age': 25, 'city': 'Los Angeles'}\n}\nusername = 'john_doe'\nnew_email = 'john.doe@newdomain.com'\n```\n\n**Sample Output:**\n```python\n{\n    'john_doe': {'email': 'john.doe@newdomain.com', 'age': 30, 'city': 'New York'},\n    'jane_smith': {'email': 'jane@example.com', 'age': 25, 'city': 'Los Angeles'}\n}\n```", "output": "```python\ndef update_email(user_profiles, username, new_email):\n    \"\"\"\n    Updates the email field for a specified user in the user_profiles dictionary.\n\n    Parameters:\n    user_profiles (dict): A dictionary where keys are usernames and values are dictionaries containing user details.\n    username (str): The username of the user whose email needs to be updated.\n    new_email (str): The new email address to be set for the user.\n\n    Raises:\n    KeyError: If the specified username does not exist in the user_profiles dictionary.\n    \"\"\"\n    if username in user_profiles:\n        user_profiles[username]['email'] = new_email\n    else:\n        raise KeyError(f\"Username '{username}' not found in user profiles.\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all specified requirements by updating the email field for a given username and raising a KeyError if the username does not exist.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It checks for the existence of the username and updates the email accordingly.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the edge case of a non-existent username by raising a KeyError. However, it does not handle other potential edge cases such as invalid email formats or empty strings for the new email.\"}}", "unit_tests": "[\"\\nassert update_email({\\\"alice\\\": {\\\"email\\\": \\\"alice@example.com\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\"}}, \\\"alice\\\", \\\"alice_new@example.com\\\") is None\\n\", \"\\nassert update_email({\\\"bob\\\": {\\\"email\\\": \\\"bob@example.com\\\", \\\"age\\\": 25, \\\"city\\\": \\\"Los Angeles\\\"}}, \\\"bob\\\", \\\"bob_new@example.com\\\") is None\\n\", \"\\nassert update_email({\\\"charlie\\\": {\\\"email\\\": \\\"charlie@example.com\\\", \\\"age\\\": 35, \\\"city\\\": \\\"Chicago\\\"}}, \\\"charlie\\\", \\\"charlie_new@example.com\\\") is None\\n\", \"\\nassert update_email({\\\"dave\\\": {\\\"email\\\": \\\"dave@example.com\\\", \\\"age\\\": 40, \\\"city\\\": \\\"Houston\\\"}}, \\\"dave\\\", \\\"dave_new@example.com\\\") is None\\n\", \"\\ntry:\\n    update_email({\\\"eve\\\": {\\\"email\\\": \\\"eve@example.com\\\", \\\"age\\\": 28, \\\"city\\\": \\\"Phoenix\\\"}}, \\\"frank\\\", \\\"frank_new@example.com\\\")\\nexcept KeyError as e:\\n    assert str(e) == \\\"Username 'frank' not found in user profiles.\\\"\\n\", \"\\ntry:\\n    update_email({}, \\\"grace\\\", \\\"grace_new@example.com\\\")\\nexcept KeyError as e:\\n    assert str(e) == \\\"Username 'grace' not found in user profiles.\\\"\\n\", \"\\nassert update_email({\\\"heidi\\\": {\\\"email\\\": \\\"heidi@example.com\\\", \\\"age\\\": 22, \\\"city\\\": \\\"Philadelphia\\\"}}, \\\"heidi\\\", \\\"heidi_new@example.com\\\") is None\\n\", \"\\ntry:\\n    update_email({\\\"ivan\\\": {\\\"email\\\": \\\"ivan@example.com\\\", \\\"age\\\": 33, \\\"city\\\": \\\"San Antonio\\\"}}, \\\"judy\\\", \\\"judy_new@example.com\\\")\\nexcept KeyError as e:\\n    assert str(e) == \\\"Username 'judy' not found in user profiles.\\\"\\n\", \"\\nassert update_email({\\\"karen\\\": {\\\"email\\\": \\\"karen@example.com\\\", \\\"age\\\": 29, \\\"city\\\": \\\"San Diego\\\"}}, \\\"karen\\\", \\\"karen_new@example.com\\\") is None\\n\", \"\\ntry:\\n    update_email({\\\"leo\\\": {\\\"email\\\": \\\"leo@example.com\\\", \\\"age\\\": 45, \\\"city\\\": \\\"Dallas\\\"}}, \\\"mike\\\", \\\"mike_new@example.com\\\")\\nexcept KeyError as e:\\n    assert str(e) == \\\"Username 'mike' not found in user profiles.\\\"\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"pass\", \"fail\", \"pass\", \"fail\"]", "average_test_score": "0.6"}
{"id": "7689d78bd19a3b9e908ddd33e60600c7", "input": "You are given a list of integers. Your task is to implement a function that returns the top 5 largest integers from the list, sorted in descending order. If the list contains fewer than 5 integers, return the entire list sorted in descending order.\n\n**Input:**\n- A list of integers `numbers` (1 \u2264 len(numbers) \u2264 1000), where each integer is in the range [-10^9, 10^9].\n\n**Output:**\n- A list of integers representing the top 5 largest numbers, sorted in descending order. If the list has fewer than 5 numbers, return the entire list sorted in descending order.\n\n**Sample Input:**\n```python\n[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n```\n\n**Sample Output:**\n```python\n[9, 6, 5, 5, 5]\n```", "output": "```python\ndef top_five_numbers(numbers):\n    \"\"\"\n    Returns the top 5 largest numbers from the list, sorted in descending order.\n    If the list contains fewer than 5 numbers, returns the entire list sorted in descending order.\n\n    :param numbers: List of integers\n    :return: List of top 5 largest integers sorted in descending order\n    \"\"\"\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers if len(sorted_numbers) < 5 else sorted_numbers[:5]\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by returning the top 5 highest numbers sorted in descending order or the entire list sorted in descending order if there are fewer than 5 numbers.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct. The function sorts the list in descending order and then returns either the entire list or the first 5 elements based on the length of the list.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The function handles the edge case where the list contains fewer than 5 numbers by returning the entire sorted list. It also correctly handles an empty list by returning an empty list.\"}}", "unit_tests": "[\"\\nassert top_five_numbers([10, 20, 30, 40, 50]) == [50, 40, 30, 20, 10]\\n\", \"\\nassert top_five_numbers([5, 1, 9, 3, 7, 6, 8, 2, 4, 0]) == [9, 8, 7, 6, 5]\\n\", \"\\nassert top_five_numbers([100]) == [100]\\n\", \"\\nassert top_five_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6]\\n\", \"\\nassert top_five_numbers([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [100, 90, 80, 70, 60]\\n\", \"\\nassert top_five_numbers([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]\\n\", \"\\nassert top_five_numbers([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\\n\", \"\\nassert top_five_numbers([10, 20, 30]) == [30, 20, 10]\\n\", \"\\nassert top_five_numbers([]) == []\\n\", \"\\nassert top_five_numbers([100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20]) == [100, 90, 80, 70, 60]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "5a6a2ab2fe055a0570b43f59e6fba381", "input": "You are tasked with implementing a function `calculate_discounted_price` for a shopping application. The function should accept two parameters: `original_price` and `discount_percentage`. It should compute and return the discounted price after applying the given discount percentage to the original price. Ensure that both inputs are positive numbers, and the discount percentage is within the range of 0 to 100 inclusive. If any of these conditions are not met, the function should raise a `ValueError` with a descriptive error message.\n\n**Sample Input:**\n- `original_price = 100`, `discount_percentage = 20`\n\n**Sample Output:**\n- `80`", "output": "```python\ndef calculate_discounted_price(original_price, discount_percentage):\n    \"\"\"\n    Calculate the discounted price of a product given its original price and discount percentage.\n    \n    Parameters:\n    original_price (float or int): The original price of the product, must be a positive number.\n    discount_percentage (float or int): The discount percentage to be applied, must be between 0 and 100 inclusive.\n    \n    Returns:\n    float: The discounted price of the product.\n    \n    Raises:\n    ValueError: If original_price is not positive or discount_percentage is not between 0 and 100.\n    \"\"\"\n    if not (isinstance(original_price, (int, float)) and original_price > 0):\n        raise ValueError(\"Original price must be a positive number.\")\n    if not (isinstance(discount_percentage, (int, float)) and 0 <= discount_percentage <= 100):\n        raise ValueError(\"Discount percentage must be a number between 0 and 100.\")\n    \n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n    return discounted_price\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets all specified requirements, including input validation and correct calculation of the discounted price.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently structured. It properly calculates the discount and handles input validation as specified.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles invalid inputs by raising a ValueError, which covers most edge cases. However, it does not explicitly handle cases where inputs are of type float but are not positive (e.g., negative infinity or NaN), which could be considered edge cases.\"}}", "unit_tests": "[\"\\nassert calculate_discounted_price(100, 20) == 80\\n\", \"\\nassert calculate_discounted_price(200, 50) == 100\\n\", \"\\nassert calculate_discounted_price(150, 0) == 150\\n\", \"\\nassert calculate_discounted_price(150, 100) == 0\\n\", \"\\nassert calculate_discounted_price(99.99, 10) == 89.991\\n\", \"\\nassert calculate_discounted_price(50, 5) == 47.5\\n\", \"\\nassert calculate_discounted_price(1000, 10) == 900\\n\", \"\\nassert calculate_discounted_price(100, 0.5) == 99.5\\n\", \"\\nassert calculate_discounted_price(100, 100.0) == 0\\n\", \"\\nassert calculate_discounted_price(100, 0.0) == 100\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "84ed880bcbd2680ed7d8e68c1158d823", "input": "You are given a list of dictionaries and a key. Your task is to implement a function `sort_by_key` that sorts the list of dictionaries based on the values associated with the given key. If a dictionary does not contain the key, it should be treated as having a value of `None`. In cases where the values for the key are of mixed types (e.g., integers and strings), convert all values to strings before sorting. The function should return a new list of dictionaries sorted by the specified key.\n\n**Input:**\n- A list of dictionaries `dict_list`.\n- A string `key` representing the key to sort by.\n\n**Output:**\n- A new list of dictionaries sorted by the specified key.\n\n**Sample Input:**\n```python\ndict_list = [{'name': 'Alice', 'age': 30}, {'name': 'Bob'}, {'name': 'Charlie', 'age': 25}]\nkey = 'age'\n```\n\n**Sample Output:**\n```python\n[{'name': 'Bob'}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\n```", "output": "```python\ndef sort_by_key(dict_list, key):\n    \"\"\"\n    Sorts a list of dictionaries by a specified key. If the key does not exist in a dictionary,\n    it is treated as having a value of None. Values are converted to strings before sorting.\n\n    :param dict_list: List of dictionaries to sort.\n    :param key: The key to sort the dictionaries by.\n    :return: A new list of dictionaries sorted by the specified key.\n    \"\"\"\n    return sorted(dict_list, key=lambda x: str(x.get(key, None)))\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function meets the basic requirements by sorting the list of dictionaries based on the specified key. It also handles missing keys by treating them as None. However, it does not explicitly handle mixed types by converting all values to strings before sorting, although the current implementation does this implicitly through the use of str().\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic is mostly correct and consistent. The function sorts the list of dictionaries correctly based on the specified key, treating missing keys as None. The use of str() ensures that mixed types are handled without errors, although this is not explicitly stated in the code comments or documentation.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The function addresses some edge cases, such as missing keys, by treating them as None. However, it does not explicitly handle other potential edge cases, such as empty dictionaries or non-stringifiable values, although the current implementation does not raise errors for these cases. More comprehensive testing and handling of edge cases would improve the robustness of the function.\"}}", "unit_tests": "[\"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob'}, {'name': 'Charlie', 'age': 25}], 'age') == [{'name': 'Bob'}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Charlie'}], 'name') == [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Charlie'}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': '25'}, {'name': 'Charlie', 'age': 25}], 'age') == [{'name': 'Bob', 'age': '25'}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Charlie'}], 'age') == [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Charlie'}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': '25'}], 'age') == [{'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': '25'}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'David'}], 'age') == [{'name': 'David'}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'David', 'age': 'None'}], 'age') == [{'name': 'David', 'age': 'None'}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'David', 'age': None}], 'age') == [{'name': 'David', 'age': None}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'David', 'age': 'twenty-five'}], 'age') == [{'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 25}, {'name': 'David', 'age': 'twenty-five'}, {'name': 'Alice', 'age': 30}]\\n\", \"\\nassert sort_by_key([], 'age') == []\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\", \"fail\", \"fail\", \"pass\"]", "average_test_score": "0.5"}
{"id": "ee32731d6303fed4860e2c05a894afce", "input": "You are tasked with processing web server logs to determine the frequency of requests made by each client. Implement a function `parse_logs` that accepts a list of log entries as strings and returns a dictionary. The dictionary should map each client's IP address to the number of requests they have made. Each log entry is formatted such that the IP address is the first token, separated by a space. For example, given the input `['192.168.1.1 GET /', '192.168.1.2 POST /login', '192.168.1.1 GET /home']`, the function should output `{'192.168.1.1': 2, '192.168.1.2': 1}`.\n\n**Sample Input:**\n```python\n['192.168.1.1 GET /', '192.168.1.2 POST /login', '192.168.1.1 GET /home']\n```\n\n**Sample Output:**\n```python\n{'192.168.1.1': 2, '192.168.1.2': 1}\n```", "output": "```python\ndef parse_logs(log_entries):\n    \"\"\"\n    Parses a list of web server log entries and returns a dictionary mapping each client's IP address\n    to the number of requests they have made.\n\n    :param log_entries: List of log entries as strings, where each entry starts with an IP address.\n    :return: Dictionary with IP addresses as keys and the count of requests as values.\n    \"\"\"\n    ip_counts = {}\n    for entry in log_entries:\n        ip = entry.split()[0]\n        if ip in ip_counts:\n            ip_counts[ip] += 1\n        else:\n            ip_counts[ip] = 1\n    return ip_counts\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements by parsing the log entries and returning a dictionary with IP addresses as keys and their request counts as values.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently structured. It accurately extracts the IP address from each log entry and updates the count in the dictionary.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution handles basic cases but does not consider edge cases such as empty log entries, malformed entries, or non-standard IP addresses. It assumes that each entry is well-formed and contains at least one space.\"}}", "unit_tests": "[\"\\nassert parse_logs(['192.168.1.1 GET /']) == {'192.168.1.1': 1}\\n\", \"\\nassert parse_logs(['192.168.1.1 GET /', '192.168.1.2 POST /login']) == {'192.168.1.1': 1, '192.168.1.2': 1}\\n\", \"\\nassert parse_logs(['192.168.1.1 GET /', '192.168.1.1 POST /login', '192.168.1.1 GET /home']) == {'192.168.1.1': 3}\\n\", \"\\nassert parse_logs(['192.168.1.1 GET /', '192.168.1.2 POST /login', '192.168.1.3 GET /home']) == {'192.168.1.1': 1, '192.168.1.2': 1, '192.168.1.3': 1}\\n\", \"\\nassert parse_logs(['192.168.1.1 GET /', '192.168.1.1 POST /login', '192.168.1.2 GET /home', '192.168.1.2 POST /logout']) == {'192.168.1.1': 2, '192.168.1.2': 2}\\n\", \"\\nassert parse_logs([]) == {}\\n\", \"\\nassert parse_logs(['10.0.0.1 GET /', '10.0.0.2 POST /login', '10.0.0.1 GET /home', '10.0.0.3 POST /logout', '10.0.0.2 GET /']) == {'10.0.0.1': 2, '10.0.0.2': 2, '10.0.0.3': 1}\\n\", \"\\nassert parse_logs(['172.16.0.1 GET /', '172.16.0.1 POST /login', '172.16.0.1 GET /home', '172.16.0.1 POST /logout']) == {'172.16.0.1': 4}\\n\", \"\\nassert parse_logs(['192.168.1.1 GET /', '192.168.1.2 POST /login', '192.168.1.1 GET /home', '192.168.1.3 POST /logout', '192.168.1.2 GET /', '192.168.1.3 POST /']) == {'192.168.1.1': 2, '192.168.1.2': 2, '192.168.1.3': 2}\\n\", \"\\nassert parse_logs(['192.168.1.1 GET /', '192.168.1.1 POST /login', '192.168.1.1 GET /home', '192.168.1.1 POST /logout', '192.168.1.1 GET /']) == {'192.168.1.1': 5}\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "21c08c7e9b0c528334fd4fb8b3777284", "input": "You are tasked with implementing a function to initialize the weights and biases for a simple neural network with one hidden layer. The network has `n_in` neurons in the input layer, `n_hidden` neurons in the hidden layer, and `n_out` neurons in the output layer. Your function should return two dictionaries: `weights` and `biases`. The weights should be initialized using a normal distribution with a mean of 0 and a standard deviation of 0.01, and the biases should be initialized to 0. The `weights` dictionary should have keys `'input_hidden'` and `'hidden_output'`, while the `biases` dictionary should have keys `'hidden'` and `'output'`.\n\n**Input:**\n- Three integers `n_in`, `n_hidden`, and `n_out` representing the number of neurons in the input, hidden, and output layers, respectively.\n\n**Output:**\n- Two dictionaries `weights` and `biases` as described above.\n\n**Sample Input:**\n```\n3 4 2\n```\n\n**Sample Output:**\n```\n{'input_hidden': array([[ 0.001, -0.002,  0.003],\n                        [ 0.004, -0.005,  0.006],\n                        [ 0.007, -0.008,  0.009],\n                        [ 0.010, -0.011,  0.012]]),\n 'hidden_output': array([[ 0.013, -0.014,  0.015, -0.016],\n                         [ 0.017, -0.018,  0.019, -0.020]])}\n{'hidden': array([[0.],\n                 [0.],\n                 [0.],\n                 [0.]]),\n 'output': array([[0.],\n                  [0.]])}\n```", "output": "```python\nimport numpy as np\n\ndef initialize_weights(n_in, n_hidden, n_out):\n    \"\"\"\n    Initialize weights and biases for a simple neural network with one hidden layer.\n    \n    Parameters:\n    - n_in: Number of neurons in the input layer.\n    - n_hidden: Number of neurons in the hidden layer.\n    - n_out: Number of neurons in the output layer.\n    \n    Returns:\n    - weights: A dictionary containing the weights of the network.\n               Keys: 'input_hidden', 'hidden_output'.\n               Values: Numpy arrays representing the weights.\n    - biases: A dictionary containing the biases of the network.\n              Keys: 'hidden', 'output'.\n              Values: Numpy arrays representing the biases.\n    \"\"\"\n    weights = {\n        'input_hidden': np.random.normal(0, 0.01, (n_hidden, n_in)),\n        'hidden_output': np.random.normal(0, 0.01, (n_out, n_hidden))\n    }\n    biases = {\n        'hidden': np.zeros((n_hidden, 1)),\n        'output': np.zeros((n_out, 1))\n    }\n    \n    return weights, biases\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by initializing weights and biases for the neural network with the correct dimensions and distributions.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The weights are initialized using a normal distribution with the specified mean and standard deviation, and the biases are initialized to zero as required.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution does not explicitly handle edge cases such as zero neurons in any layer, but it should work correctly for typical valid inputs. More robust error handling could be added for invalid input sizes.\"}}", "unit_tests": "[\"\\nassert isinstance(initialize_weights(3, 4, 2)[0]['input_hidden'], np.ndarray)\\n\", \"\\nassert initialize_weights(3, 4, 2)[0]['input_hidden'].shape == (4, 3)\\n\", \"\\nassert isinstance(initialize_weights(3, 4, 2)[0]['hidden_output'], np.ndarray)\\n\", \"\\nassert initialize_weights(3, 4, 2)[0]['hidden_output'].shape == (2, 4)\\n\", \"\\nassert isinstance(initialize_weights(3, 4, 2)[1]['hidden'], np.ndarray)\\n\", \"\\nassert initialize_weights(3, 4, 2)[1]['hidden'].shape == (4, 1)\\n\", \"\\nassert isinstance(initialize_weights(3, 4, 2)[1]['output'], np.ndarray)\\n\", \"\\nassert initialize_weights(3, 4, 2)[1]['output'].shape == (2, 1)\\n\", \"\\nassert np.all(initialize_weights(3, 4, 2)[1]['hidden'] == 0)\\n\", \"\\nassert np.all(initialize_weights(3, 4, 2)[1]['output'] == 0)\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "6755e5fab9656322ec84b1f94628f625", "input": "You are given a list of integers. Your task is to compute the sum of the squares of all the integers in the list. Your solution should be optimized for performance. Ensure that your code is both correct and efficient.\n\n**Input:**\n- A list of integers `numbers` (1 \u2264 len(numbers) \u2264 10^6, -10^3 \u2264 numbers[i] \u2264 10^3).\n\n**Output:**\n- An integer representing the sum of the squares of the elements in the list.\n\n**Sample Input:**\n```\n[1, 2, 3, 4]\n```\n\n**Sample Output:**\n```\n30\n```", "output": "```python\ndef sum_of_squares(numbers):\n    \"\"\"\n    Calculate the sum of squares of all numbers in the given list.\n\n    :param numbers: List of integers\n    :return: Integer sum of squares of the list elements\n    \"\"\"\n    return sum(x * x for x in numbers)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets the requirement of calculating the sum of squares of all numbers in a list and is optimized for performance using a generator expression within the sum function.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and efficiently calculates the sum of squares without any errors.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The solution handles typical cases well, but it does not explicitly handle edge cases such as an empty list or non-numeric values in the list. However, the sum function and generator expression naturally handle an empty list by returning 0, which is the correct result.\"}}", "unit_tests": "[\"\\nassert sum_of_squares([1, 2, 3, 4, 5]) == 55\\n\", \"\\nassert sum_of_squares([-1, -2, -3, -4, -5]) == 55\\n\", \"\\nassert sum_of_squares([0, 0, 0, 0, 0]) == 0\\n\", \"\\nassert sum_of_squares([10, 20, 30]) == 1400\\n\", \"\\nassert sum_of_squares([100, 200, 300, 400]) == 300000\\n\", \"\\nassert sum_of_squares([]) == 0\\n\", \"\\nassert sum_of_squares([1]) == 1\\n\", \"\\nassert sum_of_squares([-1]) == 1\\n\", \"\\nassert sum_of_squares([1.5, 2.5, 3.5]) == 21.25\\n\", \"\\nassert sum_of_squares([-1.5, -2.5, -3.5]) == 21.25\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"fail\"]", "average_test_score": "0.8"}
{"id": "963d78672269897e15f69eb8511361bd", "input": "You are given a list of file paths in a Unix-like file system. Your task is to implement a function `find_common_prefix` that identifies the longest common prefix among all the paths. If no common prefix exists, the function should return an empty string. The function should also handle the scenario where the input list is empty, returning an empty string in such cases.\n\n**Input:**\n- A list of strings, where each string represents a file path in a Unix-like file system.\n\n**Output:**\n- A string representing the longest common prefix among all the paths. If no common prefix exists, return an empty string.\n\n**Sample Input:**\n```python\n['/home/user/documents/report.txt', '/home/user/pictures/photo.png', '/home/user/music/song.mp3']\n```\n\n**Sample Output:**\n```\n'/home/user/'\n```", "output": "```python\ndef find_common_prefix(paths):\n    \"\"\"\n    Finds the longest common prefix among a list of file paths.\n    \n    :param paths: List of strings, where each string is a file path.\n    :return: A string representing the longest common prefix. Returns an empty string if no common prefix exists.\n    \"\"\"\n    if not paths:\n        return \"\"\n    \n    prefix = paths[0]\n    \n    for path in paths[1:]:\n        while not path.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test the function\npaths = ['/home/user/documents/report.txt', '/home/user/pictures/photo.png', '/home/user/music/song.mp3']\nprint(find_common_prefix(paths))  # Output: '/home/user/'\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the specified requirements. It handles the case where the input list is empty and correctly determines the longest common prefix among all the paths.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The function iteratively shortens the prefix until it matches the start of each path, ensuring the longest common prefix is found.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The function comprehensively handles all potential edge cases, including an empty input list and paths with no common prefix.\"}}", "unit_tests": "[\"\\nassert find_common_prefix(['/home/user/documents/report.txt', '/home/user/pictures/photo.png', '/home/user/music/song.mp3']) == '/home/user/'\\n\", \"\\nassert find_common_prefix(['/usr/bin/python', '/usr/bin/pip', '/usr/bin/virtualenv']) == '/usr/bin/'\\n\", \"\\nassert find_common_prefix(['/var/log/syslog', '/var/log/auth.log']) == '/var/log/'\\n\", \"\\nassert find_common_prefix(['/etc/nginx/nginx.conf', '/etc/nginx/sites-available/default']) == '/etc/nginx/'\\n\", \"\\nassert find_common_prefix(['/home/user', '/home/user2']) == '/home/'\\n\", \"\\nassert find_common_prefix(['/home/user/documents', '/home/user/documents/report.txt']) == '/home/user/documents'\\n\", \"\\nassert find_common_prefix(['/home/user', '/home/user']) == '/home/user'\\n\", \"\\nassert find_common_prefix([]) == ''\\n\", \"\\nassert find_common_prefix(['/']) == '/'\\n\", \"\\nassert find_common_prefix(['/home/user/documents/report.txt']) == '/home/user/documents/report.txt'\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "0.9"}
{"id": "b04c78b533502ee958bfd23d1c319449", "input": "You are given a positive integer `n`. Your task is to determine if `n` is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function `check_prime` that returns `True` if `n` is a prime number and `False` otherwise.\n\n**Input:**\n- A single integer `n` (1 \u2264 n \u2264 10^9)\n\n**Output:**\n- Return `True` if `n` is a prime number, otherwise return `False`.\n\n**Sample Input:**\n```\n1\n2\n3\n4\n29\n179\n180\n```\n\n**Sample Output:**\n```\nFalse\nTrue\nTrue\nFalse\nTrue\nTrue\nFalse\n```", "output": "```python\ndef check_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nprint(check_prime(1))   # False\nprint(check_prime(2))   # True\nprint(check_prime(3))   # True\nprint(check_prime(4))   # False\nprint(check_prime(29))  # True\nprint(check_prime(179)) # True\nprint(check_prime(180)) # False\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by correctly determining if a number is prime and handling edge cases such as numbers less than 2.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It checks divisibility only up to the square root of `n`, which is an efficient approach for prime checking.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases, including numbers less than 2, and efficiently checks for primality even for larger numbers.\"}}", "unit_tests": "[\"\\nassert check_prime(1) == False\\n\", \"\\nassert check_prime(2) == True\\n\", \"\\nassert check_prime(3) == True\\n\", \"\\nassert check_prime(4) == False\\n\", \"\\nassert check_prime(29) == True\\n\", \"\\nassert check_prime(179) == True\\n\", \"\\nassert check_prime(180) == False\\n\", \"\\nassert check_prime(0) == False\\n\", \"\\nassert check_prime(-5) == False\\n\", \"\\nassert check_prime(97) == True\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "9857f07aff57a7d25939de11947515fb", "input": "You are given a positive integer `n`. Your task is to write a function `largest_prime_factor(n)` that returns the largest prime factor of `n`. If `n` is less than 2, the function should return `None`. The function should be optimized to handle large values of `n` efficiently.\n\n**Input:**\n- A single integer `n` (1 \u2264 n \u2264 10^18)\n\n**Output:**\n- Return the largest prime factor of `n` as an integer, or `None` if `n` is less than 2.\n\n**Sample Input:**\n```\n13195\n600851475143\n```\n\n**Sample Output:**\n```\n29\n6857\n```", "output": "```python\ndef largest_prime_factor(n):\n    \"\"\"\n    Returns the largest prime factor of the given number n.\n    If n is less than 2, returns None.\n    \n    :param n: Integer, the number to find the largest prime factor of.\n    :return: Integer, the largest prime factor of n, or None if n < 2.\n    \"\"\"\n    if n < 2:\n        return None\n\n    def is_prime(num):\n        \"\"\"\n        Checks if a number is prime.\n        \n        :param num: Integer, the number to check for primality.\n        :return: Boolean, True if num is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_factor = None\n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest_factor = i\n            n //= i\n\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by returning the largest prime factor of a given number and handling the case where the number is less than 2 by returning None. It also efficiently handles large numbers.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. The function correctly identifies and divides out factors of 2, then checks for odd factors up to the square root of the number, and finally checks if the remaining number is a prime greater than 2.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The function comprehensively handles edge cases, including when the input number is less than 2, when the number is a prime itself, and when the number has multiple prime factors.\"}}", "unit_tests": "[\"\\nassert largest_prime_factor(13195) == 29\\n\", \"\\nassert largest_prime_factor(600851475143) == 6857\\n\", \"\\nassert largest_prime_factor(2) == 2\\n\", \"\\nassert largest_prime_factor(3) == 3\\n\", \"\\nassert largest_prime_factor(4) == 2\\n\", \"\\nassert largest_prime_factor(9) == 3\\n\", \"\\nassert largest_prime_factor(15) == 5\\n\", \"\\nassert largest_prime_factor(1) == None\\n\", \"\\nassert largest_prime_factor(0) == None\\n\", \"\\nassert largest_prime_factor(-10) == None\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "e391e09d512800efa4c5f06a7f171f93", "input": "You are tasked with implementing a `BankAccount` class in Python that supports the following operations:\n\n1. **Initialization**: Create a bank account with an optional initial balance. If no initial balance is provided, the account should start with a balance of 0.\n2. **Deposit**: Add a specified amount of money to the account. The deposit amount must be positive; otherwise, raise a `ValueError` with the message \"Deposit amount must be positive.\"\n3. **Withdraw**: Remove a specified amount of money from the account. The withdrawal amount must be positive; otherwise, raise a `ValueError` with the message \"Withdrawal amount must be positive.\" If the account balance is insufficient for the withdrawal, raise a `ValueError` with the message \"Insufficient balance for the withdrawal.\"\n4. **Check Balance**: Return the current balance of the account.\n\n**Sample Input/Output**:\n```python\naccount = BankAccount(100)\naccount.deposit(50)\nprint(account.check_balance())  # Output: 150\naccount.withdraw(30)\nprint(account.check_balance())  # Output: 120\naccount.withdraw(150)  # Raises ValueError: Insufficient balance for the withdrawal.\n```", "output": "```python\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        \"\"\"\n        Initialize a bank account with an optional initial balance.\n        \n        :param initial_balance: The starting balance of the account (default is 0).\n        \"\"\"\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        \"\"\"\n        Deposit a specified amount of money into the account.\n        \n        :param amount: The amount to deposit (must be positive).\n        :raises ValueError: If the deposit amount is not positive.\n        \"\"\"\n        if amount > 0:\n            self.balance += amount\n        else:\n            raise ValueError(\"Deposit amount must be positive.\")\n    \n    def withdraw(self, amount):\n        \"\"\"\n        Withdraw a specified amount of money from the account.\n        \n        :param amount: The amount to withdraw (must be positive).\n        :raises ValueError: If the withdrawal amount is not positive or if there is insufficient balance.\n        \"\"\"\n        if amount > 0:\n            if self.balance >= amount:\n                self.balance -= amount\n            else:\n                raise ValueError(\"Insufficient balance for the withdrawal.\")\n        else:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n    \n    def check_balance(self):\n        \"\"\"\n        Check the current balance of the account.\n        \n        :return: The current balance of the account.\n        \"\"\"\n        return self.balance\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements: initializing with an initial balance, depositing money, withdrawing money with balance check, and checking the current balance.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It handles deposits and withdrawals correctly, checks for positive amounts, and ensures the balance does not go below zero during withdrawals.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases such as negative deposit and withdrawal amounts, and insufficient balance for withdrawals.\"}}", "unit_tests": "[\"\\nassert BankAccount().check_balance() == 0\\n\", \"\\nassert BankAccount(100).check_balance() == 100\\n\", \"\\nassert BankAccount(50).deposit(50) == None and BankAccount(50).check_balance() == 100\\n\", \"\\nassert BankAccount(100).withdraw(50) == None and BankAccount(100).check_balance() == 50\\n\", \"\\nassert BankAccount(100).withdraw(100) == None and BankAccount(100).check_balance() == 0\\n\", \"\\nassert BankAccount(100).withdraw(150) == None and BankAccount(100).check_balance() == 100\\nexcept ValueError as e:\\nassert str(e) == \\\"Insufficient balance for the withdrawal.\\\"\\n\", \"\\nassert BankAccount().deposit(100) == None and BankAccount().check_balance() == 100\\n\", \"\\nassert BankAccount().deposit(-100) == None and BankAccount().check_balance() == 0\\nexcept ValueError as e:\\nassert str(e) == \\\"Deposit amount must be positive.\\\"\\n\", \"\\nassert BankAccount().withdraw(-100) == None and BankAccount().check_balance() == 0\\nexcept ValueError as e:\\nassert str(e) == \\\"Withdrawal amount must be positive.\\\"\\n\", \"\\naccount = BankAccount(100)\\naccount.deposit(50)\\naccount.withdraw(30)\\nassert account.check_balance() == 120\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"pass\"]", "average_test_score": "0.3"}
{"id": "44b0996a825af306c2f79c0782cd7397", "input": "You are given a list of temperatures in Fahrenheit. Implement a function `convert_to_celsius(temperatures)` that accepts a list of temperatures as input and returns a list of temperatures converted to Celsius using the formula: C = (F - 32) * 5/9.\n\n**Input:**\n- A list of integers or floating-point numbers representing temperatures in Fahrenheit.\n\n**Output:**\n- A list of floating-point numbers representing the corresponding temperatures in Celsius.\n\n**Sample Input:**\n```python\n[32, 212, 98.6, 77]\n```\n\n**Sample Output:**\n```python\n[0.0, 100.0, 37.0, 25.0]\n```", "output": "```python\ndef convert_to_celsius(temperatures):\n    \"\"\"\n    Convert a list of temperatures from Fahrenheit to Celsius.\n\n    Parameters:\n    temperatures (list of float): A list of temperatures in Fahrenheit.\n\n    Returns:\n    list of float: A list of temperatures converted to Celsius.\n    \"\"\"\n    return [(f - 32) * 5/9 for f in temperatures]\n\ntemperatures = [32, 212, 98.6, 77]\ncelsius_temperatures = convert_to_celsius(temperatures)\nprint(celsius_temperatures)\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirement by correctly converting a list of temperatures from Fahrenheit to Celsius using the specified formula.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently applies the conversion formula to each temperature in the list.\"}, \"edge_case_consideration\": {\"score\": 3, \"justification\": \"The solution handles typical cases but does not explicitly consider edge cases such as extremely high or low temperatures, non-numeric values, or an empty list.\"}}", "unit_tests": "[\"\\nassert convert_to_celsius([32]) == [0.0]\\n\", \"\\nassert convert_to_celsius([212]) == [100.0]\\n\", \"\\nassert convert_to_celsius([98.6]) == [37.0]\\n\", \"\\nassert convert_to_celsius([77]) == [25.0]\\n\", \"\\nassert convert_to_celsius([0]) == [-17.77777777777778]\\n\", \"\\nassert convert_to_celsius([-40]) == [-40.0]\\n\", \"\\nassert convert_to_celsius([100]) == [37.77777777777778]\\n\", \"\\nassert convert_to_celsius([32, 212, 98.6, 77]) == [0.0, 100.0, 37.0, 25.0]\\n\", \"\\nassert convert_to_celsius([]) == []\\n\", \"\\nassert convert_to_celsius([68, 86, 104]) == [20.0, 30.0, 40.0]\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "9d70502ef9389fca9e68f871c610c0dc", "input": "You are given a CSV file named \"data.csv\" with headers. Your task is to write a Python function that reads this file and computes the average of a specified column. The function should handle cases where the column might not exist or contain non-numeric values by skipping those entries. The CSV file is structured as follows:\n\n```\nName,Age,Score\nJohn,28,85\nAlice,34,92\nBob,22,78\n```\n\n**Input:**\n- The function will take two parameters: the file path to the CSV file and the name of the column for which the average needs to be calculated.\n\n**Output:**\n- The function should return the average of the specified column as a float. If no valid entries are found, return `None`.\n\n**Sample Input:**\n- File Path: \"data.csv\"\n- Column Name: \"Score\"\n\n**Sample Output:**\n- The average of the column 'Score' is: 85.0", "output": "```python\nimport csv\n\ndef calculate_average_from_csv(file_path, column_name):\n    \"\"\"\n    Calculate the average of a specified column in a CSV file.\n    \n    Parameters:\n    file_path (str): The path to the CSV file.\n    column_name (str): The name of the column to calculate the average for.\n    \n    Returns:\n    float or None: The average of the column if valid entries are found, otherwise None.\n    \"\"\"\n    total = 0\n    count = 0\n    \n    with open(file_path, mode='r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            try:\n                value = float(row[column_name])\n                total += value\n                count += 1\n            except (ValueError, KeyError):\n                continue\n    \n    if count == 0:\n        return None\n    \n    return total / count\n\n# Usage\nfile_path = \"data.csv\"\ncolumn_name = \"Score\"\naverage = calculate_average_from_csv(file_path, column_name)\nif average is not None:\n    print(f\"The average of the column '{column_name}' is: {average}\")\nelse:\n    print(f\"Could not calculate the average for the column '{column_name}'.\")\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements. It reads a CSV file, calculates the average of a specified column, and handles the column name as input.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly calculates the average by summing the values and dividing by the count, while also handling exceptions for non-numeric values and missing columns.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles edge cases, including non-numeric values in the column, missing columns, and cases where no valid entries are found, returning None in such scenarios.\"}}", "unit_tests": "[\"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Score\\\") == 85.0\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Age\\\") == 28.0\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Name\\\") is None\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"NonExistentColumn\\\") is None\\n\", \"\\nassert calculate_average_from_csv(\\\"empty.csv\\\", \\\"Score\\\") is None\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Score\\\") == (85 + 92 + 78) / 3\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Age\\\") == (28 + 34 + 22) / 3\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Score\\\") == 85.0\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Age\\\") == 28.0\\n\", \"\\nassert calculate_average_from_csv(\\\"data.csv\\\", \\\"Score\\\") == 85.0\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "f6db241c8d56025cfc6aba771d7890a4", "input": "You are tasked with implementing a function `factorial(n)` that computes the factorial of a given non-negative integer `n`. The factorial of a number `n`, denoted as `n!`, is the product of all positive integers less than or equal to `n`. By definition, `0!` equals `1`. Your function should raise a `ValueError` if `n` is negative.\n\n**Input:**\n- A single integer `n` (0 \u2264 n \u2264 20).\n\n**Output:**\n- Return the factorial of `n`.\n\n**Sample Input:**\n```\n5\n```\n\n**Sample Output:**\n```\n120\n```", "output": "```python\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a non-negative integer n.\n    \n    Parameters:\n    n (int): A non-negative integer whose factorial is to be computed.\n    \n    Returns:\n    int: The factorial of the integer n.\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The function fully meets the requirements by calculating the factorial of a non-negative integer and handling the special case where n is 0.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and consistently calculates the factorial for all valid inputs.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The function handles the edge case of n being 0 and raises an appropriate error for negative inputs, covering all necessary edge cases.\"}}", "unit_tests": "[\"\\nassert factorial(0) == 1\\n\", \"\\nassert factorial(1) == 1\\n\", \"\\nassert factorial(5) == 120\\n\", \"\\nassert factorial(10) == 3628800\\n\", \"\\nassert factorial(3) == 6\\n\", \"\\nassert factorial(7) == 5040\\n\", \"\\nassert factorial(15) == 1307674368000\\n\", \"\\nassert factorial(1) == 1\\n\", \"\\nassert factorial(20) == 2432902008176640000\\n\", \"\\nassert factorial(100) == 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\\n\"]", "tests_execution_status": "[\"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\", \"pass\"]", "average_test_score": "1"}
{"id": "b15ca3ceff95bdb3d10753a5f9db56bf", "input": "You are tasked with implementing a simple calculator that performs basic arithmetic operations. Your program should read two numbers and an operator from the input, then output the result of the operation. The calculator should support the following operations: addition (+), subtraction (-), multiplication (*), and division (/). If the input operator is invalid or if division by zero is attempted, the program should output an appropriate error message.\n\n**Input:**\n- The first line contains a floating-point number representing the first operand.\n- The second line contains a floating-point number representing the second operand.\n- The third line contains a single character representing the operator.\n\n**Output:**\n- A single line containing the result of the operation, or an error message if the operation cannot be performed.\n\n**Sample Input 1:**\n```\n5.0\n3.0\n+\n```\n**Sample Output 1:**\n```\nThe result of 5.0 + 3.0 is 8.0\n```\n\n**Sample Input 2:**\n```\n10.0\n0.0\n/\n```\n**Sample Output 2:**\n```\nError: Division by zero is not allowed.\n```\n\n**Sample Input 3:**\n```\n7.0\n2.0\n%\n```\n**Sample Output 3:**\n```\nError: Invalid operator.\n```", "output": "```python\ndef simple_calculator():\n    \"\"\"\n    Simulates a simple calculator that performs arithmetic operations based on user input.\n    Handles addition, subtraction, multiplication, and division.\n    Outputs an error message for invalid operators or division by zero.\n    \"\"\"\n    try:\n        num1 = float(input().strip())\n        num2 = float(input().strip())\n        operator = input().strip()\n\n        if operator == '+':\n            result = num1 + num2\n            print(f\"The result of {num1} + {num2} is {result}\")\n        elif operator == '-':\n            result = num1 - num2\n            print(f\"The result of {num1} - {num2} is {result}\")\n        elif operator == '*':\n            result = num1 * num2\n            print(f\"The result of {num1} * {num2} is {result}\")\n        elif operator == '/':\n            if num2 == 0:\n                print(\"Error: Division by zero is not allowed.\")\n            else:\n                result = num1 / num2\n                print(f\"The result of {num1} / {num2} is {result}\")\n        else:\n            print(\"Error: Invalid operator.\")\n    except ValueError:\n        print(\"Error: Invalid input. Please enter numeric values for the numbers.\")\n\n# Run the calculator function\nsimple_calculator()\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 5, \"justification\": \"The solution fully meets all specified requirements by taking two numbers and an operator as input, performing the corresponding arithmetic operation, and handling invalid operators and division by zero gracefully.\"}, \"logical_correctness\": {\"score\": 5, \"justification\": \"The logic is completely correct and optimally structured. It correctly handles the arithmetic operations and includes error handling for invalid inputs and division by zero.\"}, \"edge_case_consideration\": {\"score\": 5, \"justification\": \"The solution comprehensively handles all potential edge cases, including invalid operators, division by zero, and non-numeric inputs.\"}}", "unit_tests": "[\"\\nassert simple_calculator(10, 5, '+') == \\\"The result of 10.0 + 5.0 is 15.0\\\"\\n\", \"\\nassert simple_calculator(10, 5, '-') == \\\"The result of 10.0 - 5.0 is 5.0\\\"\\n\", \"\\nassert simple_calculator(10, 5, '*') == \\\"The result of 10.0 * 5.0 is 50.0\\\"\\n\", \"\\nassert simple_calculator(10, 5, '/') == \\\"The result of 10.0 / 5.0 is 2.0\\\"\\n\", \"\\nassert simple_calculator(10, 0, '/') == \\\"Error: Division by zero is not allowed.\\\"\\n\", \"\\nassert simple_calculator(10, 5, '^') == \\\"Error: Invalid operator.\\\"\\n\", \"\\nassert simple_calculator('a', 5, '+') == \\\"Error: Invalid input. Please enter numeric values for the numbers.\\\"\\n\", \"\\nassert simple_calculator(10, 'b', '-') == \\\"Error: Invalid input. Please enter numeric values for the numbers.\\\"\\n\", \"\\nassert simple_calculator('c', 'd', '*') == \\\"Error: Invalid input. Please enter numeric values for the numbers.\\\"\\n\", \"\\nassert simple_calculator(0, 0, '/') == \\\"Error: Division by zero is not allowed.\\\"\\n\"]", "tests_execution_status": "[\"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\", \"fail\"]", "average_test_score": "0"}
{"id": "e2a0351ae53db7236a6457dcb14cd489", "input": "You are given a list of integers. Your task is to write a function that returns a new list containing the frequency of each integer in the original list. The output list should be sorted in descending order based on frequency. For integers with the same frequency, sort them in ascending order. If the input list is empty, return an empty list.\n\n**Sample Input:**\n```\n[4, 6, 2, 6, 4, 4, 6]\n```\n\n**Sample Output:**\n```\n[3, 3, 1]\n```\n\n**Explanation:**\n- The integer `4` appears 3 times.\n- The integer `6` appears 3 times.\n- The integer `2` appears 1 time.\n- The frequencies are sorted in descending order, and integers with the same frequency are sorted in ascending order.", "output": "```python\nfrom collections import Counter\n\ndef frequency_sort(nums):\n    \"\"\"\n    Returns a list of frequencies of integers in the input list, sorted in descending order of frequency.\n    Integers with the same frequency are sorted in ascending order.\n    \n    :param nums: List of integers\n    :return: List of frequencies\n    \"\"\"\n    if not nums:\n        return []\n    freq_counter = Counter(nums)\n    sorted_items = sorted(freq_counter.items(), key=lambda x: (-x[1], x[0]))\n    result = [freq for num, freq in sorted_items]\n    return result\n```", "domain": "generic", "generation_algorithm": "self-instruct", "llm_judgement": "{\"requirement_conformance\": {\"score\": 4, \"justification\": \"The function meets the basic requirements by returning a list of frequencies sorted by the specified criteria. However, it does not return the integers themselves, only their frequencies.\"}, \"logical_correctness\": {\"score\": 4, \"justification\": \"The logic is mostly correct, using Counter to count frequencies and sorting the items as required. However, the output does not match the problem statement, which asks for integers sorted by frequency.\"}, \"edge_case_consideration\": {\"score\": 4, \"justification\": \"The function handles the empty list edge case correctly. However, it does not handle other potential edge cases such as negative numbers or non-integer values, although the problem statement specifies integers.\"}}", "unit_tests": "[\"\\nassert frequency_sort([4, 6, 2, 6, 7, 4, 4]) == [3, 2, 1]\\n\", \"\\nassert frequency_sort([1, 1, 2, 2, 2, 3]) == [3, 2, 1]\\n\", \"\\nassert frequency_sort([5, 3, 3, 2, 2, 2, 1]) == [3, 2, 1]\\n\", \"\\nassert frequency_sort([7, 7, 7, 7, 7]) == [5]\\n\", \"\\nassert frequency_sort([]) == []\\n\", \"\\nassert frequency_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\\n\", \"\\nassert frequency_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == [2, 1, 1, 1, 1, 1, 1, 1, 1, 1]\\n\", \"\\nassert frequency_sort([3, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5]) == [4, 3, 2, 1]\\n\", \"\\nassert frequency_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\\n\", \"\\nassert frequency_sort([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [4, 2, 2]\\n\"]", "tests_execution_status": "[\"fail\", \"pass\", \"fail\", \"pass\", \"pass\", \"pass\", \"pass\", \"fail\", \"pass\", \"fail\"]", "average_test_score": "0.6"}
