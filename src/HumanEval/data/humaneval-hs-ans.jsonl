{"task_id": "Haskell/0", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (has_close_elements [1.0, 2.0, 3.9, 4.0, 5.0, 2.2] 0.3 == True)\n    check (has_close_elements [1.0, 2.0, 3.9, 4.0, 5.0, 2.2] 0.05 == False)\n    check (has_close_elements [1.0, 2.0, 5.9, 4.0, 5.0]       0.95 == True)\n    check (has_close_elements [1.0, 2.0, 5.9, 4.0, 5.0]       0.8  == False)\n    check (has_close_elements [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] 0.1  == True)\n    check (has_close_elements [1.1, 2.2, 3.1, 4.1, 5.1]       1.0  == True)\n    check (has_close_elements [1.1, 2.2, 3.1, 4.1, 5.1]       0.5  == False)\n"}
{"task_id": "Haskell/1", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (separate_paren_groups \"(()()) ((())) () ((())()())\" == [\"(()())\",\"((()))\",\"()\",\"((())()())\"])\n    check (separate_paren_groups \"() (()) ((())) (((())))\"      == [\"()\",\"(())\",\"((()))\",\"(((())))\"])\n    check (separate_paren_groups \"(()(())((())))\"             == [\"(()(())((())))\"])\n    check (separate_paren_groups \"( ) (( )) (( )( ))\"           == [\"()\",\"(())\",\"(()())\"])\n"}
{"task_id": "Haskell/2", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (truncate_number 3.5 == 0.5)\n    check (abs (truncate_number 1.33   - 0.33 ) < 1e-6)\n    check (abs (truncate_number 123.456 - 0.456) < 1e-6)\n"}
{"task_id": "Haskell/3", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (below_zero []                         == False)\n    check (below_zero [1, 2, -3, 1, 2, -3]       == False)\n    check (below_zero [1, 2, -4, 5, 6]           == True)\n    check (below_zero [1, -1, 2, -2, 5, -5, 4, -4] == False)\n    check (below_zero [1, -1, 2, -2, 5, -5, 4, -5] == True)\n    check (below_zero [1, -2, 2, -2, 5, -5, 4, -4] == True)\n"}
{"task_id": "Haskell/4", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (abs (mean_absolute_deviation [1.0,2.0,3.0]       - 2.0/3.0) < 1e-6)\n    check (abs (mean_absolute_deviation [1.0,2.0,3.0,4.0]   - 1.0     ) < 1e-6)\n    check (abs (mean_absolute_deviation [1.0,2.0,3.0,4.0,5.0] - 6.0/5.0) < 1e-6)\n"}
{"task_id": "Haskell/5", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (intersperse []       7 == [])\n    check (intersperse [5,6,3,2] 8 == [5,8,6,8,3,8,2])\n    check (intersperse [2,2,2]   2 == [2,2,2,2,2])\n"}
{"task_id": "Haskell/6", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (parse_nested_parens \"(()()) ((())) () ((())()())\" == [2,3,1,3])\n    check (parse_nested_parens \"() (()) ((())) (((())))\"      == [1,2,3,4])\n    check (parse_nested_parens \"(()(())((())))\"             == [4])\n"}
{"task_id": "Haskell/7", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (filter_by_substring []                          \"john\" == [])\n    check (filter_by_substring [\"xxx\",\"asd\",\"xxy\",\"john doe\",\"xxxAAA\",\"xxx\"] \"xxx\" == [\"xxx\",\"xxxAAA\",\"xxx\"])\n    check (filter_by_substring [\"xxx\",\"asd\",\"aaaxxy\",\"john doe\",\"xxxAAA\",\"xxx\"] \"xx\"  == [\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"])\n    check (filter_by_substring [\"grunt\",\"trumpet\",\"prune\",\"gruesome\"]    \"run\" == [\"grunt\",\"prune\"])\n"}
{"task_id": "Haskell/8", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sum_product []       == (0,1))\n    check (sum_product [1,1,1]  == (3,1))\n    check (sum_product [100,0]  == (100,0))\n    check (sum_product [3,5,7]  == (15,105))\n    check (sum_product [10]     == (10,10))\n"}
{"task_id": "Haskell/9", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (rolling_max []                  == [])\n    check (rolling_max [1,2,3,4]           == [1,2,3,4])\n    check (rolling_max [4,3,2,1]           == [4,4,4,4])\n    check (rolling_max [3,2,3,100,3]       == [3,3,3,100,100])\n"}
{"task_id": "Haskell/10", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (make_palindrome \"\" == \"\")\n    check (make_palindrome \"x\" == \"x\")\n    check (make_palindrome \"xyz\" == \"xyzyx\")\n    check (make_palindrome \"xyx\" == \"xyx\")\n    check (make_palindrome \"jerry\" == \"jerryrrej\")\n"}
{"task_id": "Haskell/11", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (string_xor \"111000\" \"101010\" == \"010010\")\n    check (string_xor \"1\" \"1\"         == \"0\")\n    check (string_xor \"0101\" \"0000\"   == \"0101\")\n"}
{"task_id": "Haskell/12", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (longest [] == Nothing)\n    check (longest [\"x\",\"y\",\"z\"] == Just \"x\")\n    check (longest [\"x\",\"yyy\",\"zzzz\",\"www\",\"kkkk\",\"abc\"] == Just \"zzzz\")\n"}
{"task_id": "Haskell/13", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (greatest_common_divisor 3 7   == 1)\n    check (greatest_common_divisor 10 15 == 5)\n    check (greatest_common_divisor 49 14 == 7)\n    check (greatest_common_divisor 144 60 == 12)\n"}
{"task_id": "Haskell/14", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (all_prefixes \"\"      == [])\n    check (all_prefixes \"asdfgh\" == [\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"])\n    check (all_prefixes \"WWW\"    == [\"W\",\"WW\",\"WWW\"])\n"}
{"task_id": "Haskell/15", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (string_sequence 0  == \"0\")\n    check (string_sequence 3  == \"0 1 2 3\")\n    check (string_sequence 10 == \"0 1 2 3 4 5 6 7 8 9 10\")\n"}
{"task_id": "Haskell/16", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (count_distinct_characters \"\"                  == 0)\n    check (count_distinct_characters \"abcde\"             == 5)\n    check (count_distinct_characters (\"abcde\" ++ \"cade\" ++ \"CADE\") == 5)\n    check (count_distinct_characters \"aaaaAAAAaaaa\"      == 1)\n    check (count_distinct_characters \"Jerry jERRY JeRRRY\" == 5)\n"}
{"task_id": "Haskell/17", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (parse_music \"\"                       == [])\n    check (parse_music \"o o o o\"                == [4,4,4,4])\n    check (parse_music \".| .| .| .|\"             == [1,1,1,1])\n    check (parse_music \"o| o| .| .| o o o o\"     == [2,2,1,1,4,4,4,4])\n    check (parse_music \"o| .| o| .| o o| o o|\"     == [2,1,2,1,4,2,4,2])\n"}
{"task_id": "Haskell/18", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (how_many_times \"\"          \"x\"    == 0)\n    check (how_many_times \"xyxyxyx\"  \"x\"    == 4)\n    check (how_many_times \"cacacacac\" \"cac\"  == 4)\n    check (how_many_times \"john doe\"  \"john\" == 1)\n"}
{"task_id": "Haskell/19", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sort_numbers \"\"                                        == \"\")\n    check (sort_numbers \"three\"                                   == \"three\")\n    check (sort_numbers \"three five nine\"                         == \"three five nine\")\n    check (sort_numbers \"five zero four seven nine eight\"         == \"zero four five seven eight nine\")\n    check (sort_numbers \"six five four three two one zero\"        == \"zero one two three four five six\")\n"}
{"task_id": "Haskell/20", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (find_closest_elements [1.0,2.0,3.9,4.0,5.0,2.2] == (3.9,4.0))\n    check (find_closest_elements [1.0,2.0,5.9,4.0,5.0] == (5.0,5.9))\n    check (find_closest_elements [1.0,2.0,3.0,4.0,5.0,2.2] == (2.0,2.2))\n    check (find_closest_elements [1.0,2.0,3.0,4.0,5.0,2.0] == (2.0,2.0))\n    check (find_closest_elements [1.1,2.2,3.1,4.1,5.1] == (2.2,3.1))\n"}
{"task_id": "Haskell/21", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (rescale_to_unit [2.0,49.9] == [0.0,1.0])\n    check (rescale_to_unit [100.0,49.9] == [1.0,0.0])\n    check (rescale_to_unit [1.0,2.0,3.0,4.0,5.0] == [0.0,0.25,0.5,0.75,1.0])\n    check (rescale_to_unit [2.0,1.0,5.0,3.0,4.0] == [0.25,0.0,1.0,0.5,0.75])\n    check (rescale_to_unit [12.0,11.0,15.0,13.0,14.0] == [0.25,0.0,1.0,0.5,0.75])\n"}
{"task_id": "Haskell/23", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (strlen \"\" == 0)\n    check (strlen \"x\" == 1)\n    check (strlen \"asdasnakj\" == 9)\n"}
{"task_id": "Haskell/24", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (largest_divisor 3 == 1)\n    check (largest_divisor 7 == 1)\n    check (largest_divisor 10 == 5)\n    check (largest_divisor 100 == 50)\n    check (largest_divisor 49 == 7)\n"}
{"task_id": "Haskell/25", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (factorize 2 == [2])\n    check (factorize 4 == [2,2])\n    check (factorize 8 == [2,2,2])\n    check (factorize (3*19) == [3,19])\n    check (factorize (3*19*3*19) == [3,3,19,19])\n    check (factorize (3*19*3*19*3*19) == [3,3,3,19,19,19])\n    check (factorize (3*19*19*19) == [3,19,19,19])\n    check (factorize (3*2*3) == [2,3,3])\n"}
{"task_id": "Haskell/26", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (remove_duplicates [] == [])\n    check (remove_duplicates [1,2,3,4] == [1,2,3,4])\n    check (remove_duplicates [1,2,3,2,4,3,5] == [1,4,5])\n"}
{"task_id": "Haskell/27", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (flip_case \"\" == \"\")\n    check (flip_case \"Hello!\" == \"hELLO!\")\n    check (flip_case \"These violent delights have violent ends\" == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n"}
{"task_id": "Haskell/28", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (concatenate [] == \"\")\n    check (concatenate [\"x\",\"y\",\"z\"] == \"xyz\")\n    check (concatenate [\"x\",\"y\",\"z\",\"w\",\"k\"] == \"xyzwk\")\n"}
{"task_id": "Haskell/29", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (filter_by_prefix [] \"john\" == [])\n    check (filter_by_prefix [\"xxx\",\"asd\",\"xxy\",\"john doe\",\"xxxAAA\",\"xxx\"] \"xxx\" == [\"xxx\",\"xxxAAA\",\"xxx\"])\n"}
{"task_id": "Haskell/30", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (get_positive [-1,-2,4,5,6] == [4,5,6])\n    check (get_positive [5,3,-5,2,3,3,9,0,123,1,-10] == [5,3,2,3,3,9,123,1])\n    check (get_positive [-1,-2] == [])\n    check (get_positive [] == [])\n"}
{"task_id": "Haskell/31", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_prime 6 == False)\n    check (is_prime 101 == True)\n    check (is_prime 11 == True)\n    check (is_prime 13441 == True)\n    check (is_prime 61 == True)\n    check (is_prime 4 == False)\n    check (is_prime 1 == False)\n    check (is_prime 5 == True)\n    check (is_prime 17 == True)\n    check (is_prime (5*17) == False)\n    check (is_prime (11*7) == False)\n    check (is_prime (13441*19) == False)\n"}
{"task_id": "Haskell/32", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (roundTo (find_zero [1,2]) 2 == -0.5)\n    check (roundTo (find_zero [-6,11,-6,1]) 2 == 1.0)\n"}
{"task_id": "Haskell/33", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sort_third [1,2,3] == [1,2,3])\n    check (sort_third [5,6,3,4,8,9,2] == [2,6,3,4,8,9,5])\n    check (sort_third [5,8,-12,4,23,2,3,11,12,-10] == [ -12,8,3,4,23,2,3,11,12,-10])\n"}
{"task_id": "Haskell/34", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (unique [5,3,5,2,3,3,9,0,123] == [0,2,3,5,9,123])\n"}
{"task_id": "Haskell/35", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (max_element [1,2,3] == 3)\n    check (max_element [5,3,-5,2,-3,3,9,0,124,1,-10] == 124)\n"}
{"task_id": "Haskell/36", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (fizz_buzz 50  == 0)\n    check (fizz_buzz 78  == 2)\n    check (fizz_buzz 79  == 3)\n    check (fizz_buzz 100 == 3)\n"}
{"task_id": "Haskell/37", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sort_even [1,2,3] == [1,2,3])\n    check (sort_even [5,3,-5,2,-3,3,9,0,123,1,-10] == [-10,3,-5,2,-3,3,5,0,9,1,123])\n    check (sort_even [5,8,-12,4,23,2,3,11,12,-10] == [-12,8,3,4,5,2,12,11,23,-10])\n"}
{"task_id": "Haskell/38", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (encode_cyclic \"\"    == \"\")\n    check (encode_cyclic \"abc\" == \"bca\")\n    check (encode_cyclic \"abcd\" == \"bcad\")\n    check (encode_cyclic \"abcdef\" == \"bcaefd\")\n"}
{"task_id": "Haskell/39", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (prime_fib 1 == 2)\n    check (prime_fib 2 == 3)\n    check (prime_fib 3 == 5)\n    check (prime_fib 4 == 13)\n    check (prime_fib 5 == 89)\n    check (prime_fib 6 == 233)\n    check (prime_fib 7 == 1597)\n"}
{"task_id": "Haskell/40", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (triples_sum_to_zero [1,3,5,0] == False)\n    check (triples_sum_to_zero [1,3,5,-1] == False)\n    check (triples_sum_to_zero [1,3,-2,1] == True)\n    check (triples_sum_to_zero [1,2,3,7] == False)\n    check (triples_sum_to_zero [1,2,5,7] == False)\n    check (triples_sum_to_zero [2,4,-5,3,9,7] == True)\n    check (triples_sum_to_zero [1] == False)\n    check (triples_sum_to_zero [1,3,5,-100] == False)\n    check (triples_sum_to_zero [100,3,5,-100] == False)"}  
{"task_id": "Haskell/41", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (car_race_collision 2 == 4)\n    check (car_race_collision 3 == 9)\n    check (car_race_collision 4 == 16)\n    check (car_race_collision 8 == 64)\n    check (car_race_collision 10 == 100)"}  
{"task_id": "Haskell/42", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (incr_list [] == [])\n    check (incr_list [3,2,1] == [4,3,2])\n    check (incr_list [5,2,5,2,3,3,9,0,123] == [6,3,6,3,4,4,10,1,124])"}  
{"task_id": "Haskell/43", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (pairs_sum_to_zero [1,3,5,0] == False)\n    check (pairs_sum_to_zero [1,3,-2,1] == False)\n    check (pairs_sum_to_zero [1,2,3,7] == False)\n    check (pairs_sum_to_zero [2,4,-5,3,5,7] == True)\n    check (pairs_sum_to_zero [1] == False)\n    check (pairs_sum_to_zero [-3,9,-1,3,2,30] == True)\n    check (pairs_sum_to_zero [-3,9,-1,3,2,31] == True)\n    check (pairs_sum_to_zero [-3,9,-1,4,2,30] == False)\n    check (pairs_sum_to_zero [-3,9,-1,4,2,31] == False)"}  
{"task_id": "Haskell/44", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (change_base 8 3 == \"22\")\n    check (change_base 9 3 == \"100\")\n    check (change_base 234 2 == \"11101010\")\n    check (change_base 16 2 == \"10000\")\n    check (change_base 8 2 == \"1000\")\n    check (change_base 7 2 == \"111\")"}  
{"task_id": "Haskell/45", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (triangle_area 5 3 == 7.5)\n    check (triangle_area 2 2 == 2.0)\n    check (triangle_area 10 8 == 40.0)"}  
{"task_id": "Haskell/46", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (fib4 5 == 4)\n    check (fib4 8 == 28)\n    check (fib4 10 == 104)\n    check (fib4 12 == 386)"}  
{"task_id": "Haskell/47", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (median [3,1,2,4,5] == 3.0)\n    check (median [-10,4,6,1000,10,20] == 8.0)\n    check (median [5] == 5.0)\n    check (median [6,5] == 5.5)\n    check (median [8,1,3,9,9,2,7] == 7.0)"}  
{"task_id": "Haskell/48", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_palindrome \"\" == True)\n    check (is_palindrome \"aba\" == True)\n    check (is_palindrome \"aaaaa\" == True)\n    check (is_palindrome \"zbcd\" == False)\n    check (is_palindrome \"xywyx\" == True)\n    check (is_palindrome \"xywyz\" == False)\n    check (is_palindrome \"xywzx\" == False)"}  
{"task_id": "Haskell/49", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (modp 3 5 == 3)\n    check (modp 1101 101 == 2)\n    check (modp 0 101 == 1)\n    check (modp 3 11 == 8)\n    check (modp 100 101 == 1)\n    check (modp 30 5 == 4)\n    check (modp 31 5 == 3)"}
{"task_id": "Haskell/50", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (encode_shift \"\" == \"\")\n    check (encode_shift \"abcxyz\" == \"fgh cde\" {- wraparound: 'x'->'c','y'->'d','z'->'e' -})\n    check (encode_shift \"hello\" == \"mjqqt\")"}
{"task_id": "Haskell/51", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (remove_vowels \"\" == \"\")\n    check (remove_vowels \"abcdef\\nghijklm\" == \"bcdf\\nghjklm\")\n    check (remove_vowels \"abcdef\" == \"bcdf\")\n    check (remove_vowels \"aaaaa\" == \"\")\n    check (remove_vowels \"aaBAA\" == \"B\")\n    check (remove_vowels \"zbcd\" == \"zbcd\")"}
{"task_id": "Haskell/52", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (below_threshold [1,2,4,10] 100)\n    check (not $ below_threshold [1,20,4,10] 5)\n    check (below_threshold [1,20,4,10] 21)\n    check (below_threshold [1,8,4,10] 11)\n    check (not $ below_threshold [1,8,4,10] 10)"}
{"task_id": "Haskell/53", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (add 0 1 == 1)\n    check (add 2 3 == 5)\n    check (add 5 7 == 12)\n    check (add 100 200 == 300)"}
{"task_id": "Haskell/54", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n    check (same_chars \"abcd\" \"dddddddabc\")\n    check (not $ same_chars \"eabcd\" \"dddddddabc\")\n    check (not $ same_chars \"abcd\" \"dddddddabcf\")"}  
{"task_id": "Haskell/55", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (fib 0 == 0)\n    check (fib 1 == 1)\n    check (fib 2 == 1)\n    check (fib 10 == 55)\n    check (fib 12 == 144)"}
{"task_id": "Haskell/56", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (not $ correct_bracketing \"<\")\n    check (correct_bracketing \"<>\")\n    check (correct_bracketing \"<<><>>\")\n    check (not $ correct_bracketing \"><<>\")\n    check (not $ correct_bracketing \"<<<>\")"}
{"task_id": "Haskell/57", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (monotonic [1,2,4,20])\n    check (not $ monotonic [1,20,4,10])\n    check (monotonic [4,1,0,-10])\n    check (monotonic [9,9,9])"}
{"task_id": "Haskell/58", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (common [1,4,3,34,653,2,5] [5,7,1,5,9,653,121] == [1,5,653])\n    check (common [5,3,2,8] [3,2] == [2,3])\n    check (common [4,3,2,8] [] == [])"}
{"task_id": "Haskell/59", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (largest_prime_factor 15 == 5)\n    check (largest_prime_factor 27 == 3)\n    check (largest_prime_factor 63 == 7)\n    check (largest_prime_factor 330 == 11)\n    check (largest_prime_factor 13195 == 29)\n    check (largest_prime_factor 2048 == 2)"}
{"task_id": "Haskell/60", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sum_to_n 1 == 1)\n    check (sum_to_n 6 == 21)\n    check (sum_to_n 11 == 66)\n    check (sum_to_n 30 == 465)\n    check (sum_to_n 100 == 5050)"}
{"task_id": "Haskell/61", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (correct_bracketing \"()\" == True)\n    check (correct_bracketing \"(()())\" == True)\n    check (correct_bracketing \"()()(()())()\" == True)\n    check (correct_bracketing \"()()((()()())())(()()(()))\" == True)\n    check (correct_bracketing \"((()())))\" == False)\n    check (correct_bracketing \")(()\" == False)\n    check (correct_bracketing \"(\" == False)"}
{"task_id": "Haskell/62", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (derivative [3,1,2,4,5] == [1,4,12,20])\n    check (derivative [1,2,3] == [2,6])\n    check (derivative [3,2,1] == [2,2])\n    check (derivative [3,2,1,0,4] == [2,2,0,16])\n    check (derivative [1] == [])"}
{"task_id": "Haskell/63", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (fibfib 1 == 0)\n    check (fibfib 2 == 1)\n    check (fibfib 5 == 4)\n    check (fibfib 8 == 24)\n    check (fibfib 10 == 81)\n    check (fibfib 12 == 274)\n    check (fibfib 14 == 927)"}
{"task_id": "Haskell/64", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (vowels_count \"\" == 0)\n    check (vowels_count \"abcde\" == 2)\n    check (vowels_count \"ACEDY\" == 3)\n    check (vowels_count \"Alone\" == 3)\n    check (vowels_count \"key\" == 2)"}
{"task_id": "Haskell/65", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (circular_shift 100 2 == \"001\")\n    check (circular_shift 12 2 == \"12\")\n    check (circular_shift 97 8 == \"79\")\n    check (circular_shift 12 1 == \"21\")"}
{"task_id": "Haskell/66", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (digitSum \"\" == 0)\n    check (digitSum \"abAB\" == 131)\n    check (digitSum \"abcCd\" == 67)\n    check (digitSum \"helloE\" == 69)\n    check (digitSum \"woArBld\" == 131)"}
{"task_id": "Haskell/67", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (fruit_distribution \"5 apples and 6 oranges\" 19 == 8)\n    check (fruit_distribution \"5 apples and 6 oranges\" 21 == 10)\n    check (fruit_distribution \"0 apples and 1 oranges\" 3 == 2)\n    check (fruit_distribution \"2 apples and 3 oranges\" 100 == 95)\n    check (fruit_distribution \"2 apples and 3 oranges\" 5 == 0)\n    check (fruit_distribution \"1 apples and 100 oranges\" 120 == 19)"}
{"task_id": "Haskell/68", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (pluck [4,2,3] == [2,1])\n    check (pluck [1,2,3] == [2,1])\n    check (pluck [] == [])\n    check (pluck [5,0,3,0,4,2] == [0,1])\n    check (pluck [7,6,7,1] == [6,1])\n    check (pluck [7,9,7,1] == [])"}
{"task_id": "Haskell/69", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (search [4,1,2,2,3,1] == 2)\n    check (search [1,2,2,3,3,3,4,4,4] == 3)\n    check (search [5,5,4,4,4] == -1)\n    check (search [5,5,5,5,1] == 1)\n    check (search [4,1,4,1,4,4] == 4)\n    check (search [3,3] == -1)\n    check (search [2,3,3,2,2] == 2)"}
{"task_id":"Haskell/70","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (strange_sort_list [1, 2, 3, 4] == [1, 4, 2, 3])\n    check (strange_sort_list [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7])\n    check (strange_sort_list [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3])\n    check (strange_sort_list [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7])\n    check (strange_sort_list [5, 5, 5, 5] == [5, 5, 5, 5])\n    check (strange_sort_list [] == [])\n    check (strange_sort_list [1, 2, 3, 4, 5, 6, 7, 8] == [1, 8, 2, 7, 3, 6, 4, 5])\n    check (strange_sort_list [0, 2, 2, 2, 5, 5, -5, -5] == [-5, 5, -5, 5, 0, 2, 2, 2])\n    check (strange_sort_list [111111] == [111111])\n"}
{"task_id":"Haskell/71","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (triangle_area 3 4 5 == 6.0)\n    check (triangle_area 1 2 10 == -1)\n    check (triangle_area 4 8 5 == 8.18)\n    check (triangle_area 2 2 2 == 1.73)\n    check (triangle_area 1 2 3 == -1)\n    check (triangle_area 10 5 7 == 16.25)\n    check (triangle_area 2 6 3 == -1)\n    check (triangle_area 1 1 1 == 0.43)\n    check (triangle_area 2 2 10 == -1)\n"}
{"task_id":"Haskell/72","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (will_it_fly [3, 2, 3] 9 == True)\n    check (will_it_fly [1, 2] 5 == False)\n    check (will_it_fly [3] 5 == True)\n    check (will_it_fly [3, 2, 3] 1 == False)\n    check (will_it_fly [1, 2, 3] 6 == False)\n    check (will_it_fly [5] 5 == True)\n"}
{"task_id":"Haskell/73","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (smallest_change [1, 2, 3, 5, 4, 7, 9, 6] == 4)\n    check (smallest_change [1, 2, 3, 4, 3, 2, 2] == 1)\n    check (smallest_change [1, 4, 2] == 1)\n    check (smallest_change [1, 4, 4, 2] == 1)\n    check (smallest_change [1, 2, 3, 2, 1] == 0)\n    check (smallest_change [3, 1, 1, 3] == 0)\n    check (smallest_change [1] == 0)\n    check (smallest_change [0, 1] == 1)\n"}
{"task_id":"Haskell/74","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (total_match [] [] == [])\n    check (total_match [\"hi\", \"admin\"] [\"hi\", \"hi\"] == [\"hi\", \"hi\"])\n    check (total_match [\"hi\", \"admin\"] [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"])\n    check (total_match [\"4\"] [\"1\", \"2\", \"3\", \"4\", \"5\"] == [\"4\"])\n    check (total_match [\"hi\", \"admin\"] [\"hI\", \"Hi\"] == [\"hI\", \"Hi\"])\n    check (total_match [\"hi\", \"admin\"] [\"hI\", \"hi\", \"hi\"] == [\"hI\", \"hi\", \"hi\"])\n    check (total_match [\"hi\", \"admin\"] [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"])\n    check (total_match [] [\"this\"] == [])\n    check (total_match [\"this\"] [] == [])\n"}
{"task_id":"Haskell/75","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_multiply_prime 5 == False)\n    check (is_multiply_prime 30 == True)\n    check (is_multiply_prime 8 == True)\n    check (is_multiply_prime 10 == False)\n    check (is_multiply_prime 125 == True)\n    check (is_multiply_prime (3 * 5 * 7) == True)\n    check (is_multiply_prime (3 * 6 * 7) == False)\n    check (is_multiply_prime (9 * 9 * 9) == False)\n    check (is_multiply_prime (11 * 9 * 9) == False)\n    check (is_multiply_prime (11 * 13 * 7) == True)\n"}
{"task_id":"Haskell/76","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_simple_power 1 4 == True)\n    check (is_simple_power 2 2 == True)\n    check (is_simple_power 8 2 == True)\n    check (is_simple_power 3 2 == False)\n    check (is_simple_power 3 1 == False)\n    check (is_simple_power 5 3 == False)\n    check (is_simple_power 16 2 == True)\n    check (is_simple_power 143214 16 == False)\n    check (is_simple_power 4 2 == True)\n    check (is_simple_power 9 3 == True)\n    check (is_simple_power 16 4 == True)\n    check (is_simple_power 24 2 == False)\n    check (is_simple_power 128 4 == False)\n    check (is_simple_power 12 6 == False)\n    check (is_simple_power 1 1 == True)\n    check (is_simple_power 1 12 == True)\n"}
{"task_id":"Haskell/77","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (iscube 1 == True)\n    check (iscube 2 == False)\n    check (iscube (-1) == True)\n    check (iscube 64 == True)\n    check (iscube 180 == False)\n    check (iscube 1000 == True)\n    check (iscube 0 == True)\n    check (iscube 1729 == False)\n"}
{"task_id":"Haskell/78","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (hex_key \"AB\" == 1)\n    check (hex_key \"1077E\" == 2)\n    check (hex_key \"ABED1A33\" == 4)\n    check (hex_key \"2020\" == 2)\n    check (hex_key \"123456789ABCDEF0\" == 6)\n    check (hex_key \"112233445566778899AABBCCDDEEFF00\" == 12)\n    check (hex_key \"\" == 0)\n"}
{"task_id":"Haskell/79","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (decimal_to_binary 0 == \"db0db\")\n    check (decimal_to_binary 32 == \"db100000db\")\n    check (decimal_to_binary 103 == \"db1100111db\")\n    check (decimal_to_binary 15 == \"db1111db\")\n"}
{"task_id":"Haskell/80","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_happy \"a\" == False)\n    check (is_happy \"aa\" == False)\n    check (is_happy \"abcd\" == True)\n    check (is_happy \"aabb\" == False)\n    check (is_happy \"adb\" == True)\n    check (is_happy \"xyy\" == False)\n    check (is_happy \"iopaxpoi\" == True)\n    check (is_happy \"iopaxioi\" == False)\n"}
{"task_id":"Haskell/81","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (numerical_letter_grade [4.0,3,1.7,2,3.5] == [\"A+\",\"B\",\"C-\",\"C\",\"A-\"])\n    check (numerical_letter_grade [1.2]       == [\"D+\"])\n    check (numerical_letter_grade [0.5]       == [\"D-\"])\n    check (numerical_letter_grade [0.0]       == [\"E\"])\n    check (numerical_letter_grade [1,0.3,1.5,2.8,3.3] == [\"D\",\"D-\",\"C-\",\"B\",\"B+\"])\n    check (numerical_letter_grade [0,0.7]     == [\"E\",\"D-\"])\n"}
{"task_id":"Haskell/82","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (prime_length \"Hello\"    == True)\n    check (prime_length \"abcdcba\"  == True)\n    check (prime_length \"kittens\"  == True)\n    check (prime_length \"orange\"   == False)\n    check (prime_length \"wow\"      == True)\n    check (prime_length \"world\"    == True)\n    check (prime_length \"MadaM\"    == True)\n    check (prime_length \"Wow\"      == True)\n    check (prime_length \"\"         == False)\n    check (prime_length \"HI\"       == True)\n    check (prime_length \"go\"       == True)\n    check (prime_length \"gogo\"     == False)\n    check (prime_length \"aaaaaaaaaaaaaaa\" == False)\n    check (prime_length \"Madam\"    == True)\n    check (prime_length \"M\"        == False)\n    check (prime_length \"0\"        == False)\n"}
{"task_id":"Haskell/83","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (starts_one_ends 1 == 1)\n    check (starts_one_ends 2 == 18)\n    check (starts_one_ends 3 == 180)\n    check (starts_one_ends 4 == 1800)\n    check (starts_one_ends 5 == 18000)\n"}
{"task_id":"Haskell/84","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (solve 1000 == \"1\")\n    check (solve 150  == \"110\")\n    check (solve 147  == \"1100\")\n    check (solve 333  == \"1001\")\n    check (solve 963  == \"10010\")\n"}
{"task_id":"Haskell/85","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (add [4,88]        == 88)\n    check (add [4,5,6,7,2,122]== 122)\n    check (add [4,0,6,7]     == 0)\n    check (add [4,4,6,8]     == 12)\n"}
{"task_id":"Haskell/86","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (anti_shuffle \"Hi\"                                   == \"Hi\")\n    check (anti_shuffle \"hello\"                                == \"ehllo\")\n    check (anti_shuffle \"number\"                               == \"bemnru\")\n    check (anti_shuffle \"abcd\"                                 == \"abcd\")\n    check (anti_shuffle \"Hello World!!!\"                      == \"Hello !!!Wdlor\")\n    check (anti_shuffle \"\"                                     == \"\")\n    check (anti_shuffle \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n"}
{"task_id":"Haskell/87","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (get_row [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0,0),(1,4),(1,0),(2,5),(2,0)])\n    check (get_row (replicate 6 [1,2,3,4,5,6]) 2           == [(0,1),(1,1),(2,1),(3,1),(4,1),(5,1)])\n    check (get_row [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,1,3,4,5,6],[1,2,1,4,5,6],[1,2,3,1,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0,0),(1,0),(2,1),(2,0),(3,2),(3,0),(4,3),(4,0),(5,4),(5,0),(6,5),(6,0)])\n    check (get_row [] 1                                        == [])\n    check (get_row [[1]] 2                                    == [])\n    check (get_row [[],[1],[1,2,3]] 3                         == [(2,2)])\n"}
{"task_id":"Haskell/88","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sort_array []               == [])\n    check (sort_array [5]              == [5])\n    check (sort_array [2,4,3,0,1,5]    == [0,1,2,3,4,5])\n    check (sort_array [2,4,3,0,1,5,6]  == [6,5,4,3,2,1,0])\n    check (sort_array [2,1]            == [1,2])\n    check (sort_array [15,42,87,32,11,0] == [0,11,15,32,42,87])\n    check (sort_array [21,14,23,11]    == [23,21,14,11])\n"}
{"task_id":"Haskell/89","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (encrypt \"hi\"                                            == \"lm\")\n    check (encrypt \"asdfghjkl\"                                     == \"ewhjklnop\")\n    check (encrypt \"gf\"                                            == \"kj\")\n    check (encrypt \"et\"                                            == \"ix\")\n    check (encrypt \"faewfawefaewg\"                                == \"jeiajeaijeiak\")\n    check (encrypt \"hellomyfriend\"                                == \"lippsqcjvmirh\")\n    check (encrypt \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\" == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    check (encrypt \"a\"                                             == \"e\")\n"}
{"task_id":"Haskell/90","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (next_smallest [1,2,3,4,5] == Just 2)\n    check (next_smallest [5,1,4,3,2] == Just 2)\n    check (next_smallest [] == Nothing)\n    check (next_smallest [1,1] == Nothing)\n    check (next_smallest [1,1,1,1,0] == Just 1)\n    check (next_smallest [-35,34,12,-45] == Just (-35))\n"}  
{"task_id":"Haskell/91","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_bored \"Hello world\" == 0)\n    check (is_bored \"Is the sky blue?\" == 0)\n    check (is_bored \"I love It !\" == 1)\n    check (is_bored \"bIt\" == 0)\n    check (is_bored \"I feel good today. I will be productive. will kill It\" == 2)\n    check (is_bored \"You and I are going for a walk\" == 0)\n"}  
{"task_id":"Haskell/92","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (any_int 2 3 1 == True)\n    check (any_int 2.5 2 3 == False)\n    check (any_int 1.5 5 3.5 == False)\n    check (any_int 2 6 2 == False)\n    check (any_int 4 2 2 == True)\n    check (any_int 2.2 2.2 2.2 == False)\n    check (any_int (-4) 6 2 == True)\n    check (any_int 2 1 1 == True)\n    check (any_int 3 4 7 == True)\n    check (any_int 3.0 4 7 == False)\n"}  
{"task_id":"Haskell/93","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (encode \"test\" == \"TGST\")\n    check (encode \"Mudasir\" == \"mWDCSKR\")\n    check (encode \"YES\" == \"ygs\")\n    check (encode \"This is a message\" == \"tHKS KS C MGSSCGG\")\n    check (encode \"I DoNt KnOw WhAt tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\")\n"}  
{"task_id":"Haskell/94","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (skjkasdkd [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] == 10)\n    check (skjkasdkd [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] == 25)\n    check (skjkasdkd [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] == 13)\n    check (skjkasdkd [0,724,32,71,99,32,6,0,5,91,83,0,5,6] == 11)\n    check (skjkasdkd [0,81,12,3,1,21] == 3)\n    check (skjkasdkd [0,8,1,2,1,7] == 7)\n    check (skjkasdkd [8191] == 19)\n    check (skjkasdkd [8191,123456,127,7] == 19)\n    check (skjkasdkd [127,97,8192] == 10)\n"}  
{"task_id":"Haskell/95","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (check_dict_case [(\"p\",\"pineapple\"),(\"b\",\"banana\")] == True)\n    check (check_dict_case [(\"p\",\"pineapple\"),(\"A\",\"banana\"),(\"B\",\"banana\")] == False)\n    check (check_dict_case [(\"p\",\"pineapple\"),(\"8\",\"banana\"),(\"a\",\"apple\")] == False)\n    check (check_dict_case [(\"Name\",\"John\"),(\"Age\",\"36\"),(\"City\",\"Houston\")] == False)\n    check (check_dict_case [(\"STATE\",\"NC\"),(\"ZIP\",\"12345\")] == True)\n    check (check_dict_case [] == False)\n"}  
{"task_id":"Haskell/96","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (count_up_to 5 == [2,3])\n    check (count_up_to 6 == [2,3,5])\n    check (count_up_to 7 == [2,3,5])\n    check (count_up_to 10 == [2,3,5,7])\n    check (count_up_to 0 == [])\n    check (count_up_to 22 == [2,3,5,7,11,13,17,19])\n    check (count_up_to 1 == [])\n    check (count_up_to 18 == [2,3,5,7,11,13,17])\n    check (count_up_to 47 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43])\n    check (count_up_to 101 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n"}  
{"task_id":"Haskell/97","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (multiply 148 412 == 16)\n    check (multiply 19 28 == 72)\n    check (multiply 2020 1851 == 0)\n    check (multiply 14 (-15) == 20)\n    check (multiply 76 67 == 42)\n    check (multiply 17 27 == 49)\n    check (multiply 0 1 == 0)\n    check (multiply 0 0 == 0)\n"}  
{"task_id":"Haskell/98","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (count_upper \"aBCdEf\" == 1)\n    check (count_upper \"abcdefg\" == 0)\n    check (count_upper \"dBBE\" == 0)\n    check (count_upper \"B\" == 0)\n    check (count_upper \"U\" == 1)\n    check (count_upper \"\" == 0)\n    check (count_upper \"EEEE\" == 2)\n"}  
{"task_id":"Haskell/99","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (closest_integer \"10\" == 10)\n    check (closest_integer \"14.5\" == 15)\n    check (closest_integer \"-15.5\" == -16)\n    check (closest_integer \"15.3\" == 15)\n    check (closest_integer \"0\" == 0)\n"}  
{"task_id":"Haskell/100","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (make_a_pile 3 == [3,5,7])\n    check (make_a_pile 4 == [4,6,8,10])\n    check (make_a_pile 5 == [5,7,9,11,13])\n    check (make_a_pile 6 == [6,8,10,12,14,16])\n    check (make_a_pile 8 == [8,10,12,14,16,18,20,22])\n"}  
{"task_id":"Haskell/101","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (words_string \"Hi, my name is John\" == [\"Hi\",\"my\",\"name\",\"is\",\"John\"])\n    check (words_string \"One, two, three, four, five, six\" == [\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"])\n    check (words_string \"\" == [])\n    check (words_string \"ahmed     , gamal\" == [\"ahmed\",\"gamal\"])"}  
{"task_id":"Haskell/102","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (choose_num 12 15 == 14)\n    check (choose_num 13 12 == -1)\n    check (choose_num 33 12354 == 12354)\n    check (choose_num 5234 5233 == -1)\n    check (choose_num 6 29 == 28)\n    check (choose_num 27 10 == -1)\n    check (choose_num 7 7 == -1)\n    check (choose_num 546 546 == 546)"}  
{"task_id":"Haskell/103","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    case rounded_avg 1 5 of\n      Right s -> check (s == \"0b11\")\n      _       -> error \"Failed\"\n    case rounded_avg 7 5 of\n      Left (-1) -> return ()\n      _         -> error \"Failed\"\n    case rounded_avg 10 20 of\n      Right s -> check (s == \"0b1111\")\n      _       -> error \"Failed\"\n    case rounded_avg 20 33 of\n      Right s -> check (s == \"0b11010\")\n      _       -> error \"Failed\""}  
{"task_id":"Haskell/104","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (unique_digits [15,33,1422,1] == [1,15,33])\n    check (unique_digits [152,323,1422,10] == [])\n    check (unique_digits [12345,2033,111,151] == [111,151])\n    check (unique_digits [135,103,31] == [31,135])"}  
{"task_id":"Haskell/105","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (by_length [2,1,1,4,5,8,2,3] == [\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"])\n    check (by_length [] == [])\n    check (by_length [1,-1,55] == [\"One\"])\n    check (by_length [1,-1,3,2] == [\"Three\",\"Two\",\"One\"])\n    check (by_length [9,4,8] == [\"Nine\",\"Eight\",\"Four\"])"}  
{"task_id":"Haskell/106","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (f 5 == [1,2,6,24,15])\n    check (f 7 == [1,2,6,24,15,720,28])\n    check (f 1 == [1])\n    check (f 3 == [1,2,6])"}  
{"task_id":"Haskell/107","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (even_odd_palindrome 123 == (8,13))\n    check (even_odd_palindrome 12 == (4,6))\n    check (even_odd_palindrome 3 == (1,2))\n    check (even_odd_palindrome 63 == (6,8))\n    check (even_odd_palindrome 25 == (5,6))\n    check (even_odd_palindrome 19 == (4,6))\n    check (even_odd_palindrome 9 == (4,5))\n    check (even_odd_palindrome 1 == (0,1))"}  
{"task_id":"Haskell/108","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (count_nums [] == 0)\n    check (count_nums [-1,11,-11] == 1)\n    check (count_nums [1,1,2] == 3)\n    check (count_nums [1,1,2,-2,3,4,5] == 6)\n    check (count_nums [1,6,9,-6,0,1,5] == 5)\n    check (count_nums [1,100,98,-7,1,-1] == 4)\n    check (count_nums [12,23,34,-45,-56,0] == 5)\n    check (count_nums [-0,1] == 1)\n    check (count_nums [1] == 1)"}  
{"task_id":"Haskell/109","test":"-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (move_one_ball [3,4,5,1,2] == True)\n    check (move_one_ball [3,5,10,1,2] == True)\n    check (move_one_ball [4,3,1,2] == False)\n    check (move_one_ball [3,5,4,1,2] == False)\n    check (move_one_ball [] == True)"}  
{"task_id": "Haskell/110", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (exchange [1,2,3,4] [1,2,3,4] == \"YES\")\n    check (exchange [1,2,3,4] [1,5,3,4] == \"NO\")\n    check (exchange [1,2,3,4] [2,1,4,3] == \"YES\")\n    check (exchange [5,7,3]   [2,6,4]   == \"YES\")\n    check (exchange [5,7,3]   [2,6,3]   == \"NO\")\n    check (exchange [3,2,6,1,8,9] [3,5,5,1,1,1] == \"NO\")\n    check (exchange [100,200] [200,200] == \"YES\")\n"}
{"task_id": "Haskell/111", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (histogram \"a b b a\"     == [('a',2),('b',2)])\n    check (histogram \"a b c a b\"   == [('a',2),('b',2)])\n    check (histogram \"a b c d g\"   == [('a',1),('b',1),('c',1),('d',1),('g',1)])\n    check (histogram \"r t g\"       == [('r',1),('t',1),('g',1)])\n    check (histogram \"b b b b a\"   == [('b',4)])\n    check (histogram \"\"            == [])\n    check (histogram \"a\"           == [('a',1)])\n"}
{"task_id": "Haskell/112", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (reverse_delete \"abcde\"      \"ae\" == (\"bcd\",False))\n    check (reverse_delete \"abcdef\"     \"b\"  == (\"acdef\",False))\n    check (reverse_delete \"abcdedcba\"  \"ab\" == (\"cdedc\",True))\n    check (reverse_delete \"dwik\"       \"w\"  == (\"dik\",False))\n    check (reverse_delete \"a\"          \"a\"  == (\"\",True))\n    check (reverse_delete \"abcdedcba\"  \"\"   == (\"abcdedcba\",True))\n    check (reverse_delete \"abcdedcba\"  \"v\"  == (\"abcdedcba\",True))\n    check (reverse_delete \"vabba\"      \"v\"  == (\"abba\",True))\n    check (reverse_delete \"mamma\"      \"mia\"== (\"\",True))\n"}
{"task_id": "Haskell/113", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (odd_count [\"1234567\"]               == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n    check (odd_count [\"3\",\"11111111\"]        == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n    check (odd_count [\"271\",\"137\",\"314\"]    == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\",\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\n    check (odd_count []                         == [])\n"}
{"task_id": "Haskell/114", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (minSubArraySum [2,3,4,1,2,4]           == 1)\n    check (minSubArraySum [-1,-2,-3]              == -6)\n    check (minSubArraySum [-1,-2,-3,2,-10]       == -14)\n    check (minSubArraySum [-9999999999999999]     == -9999999999999999)\n    check (minSubArraySum [0,10,20,1000000]       == 0)\n    check (minSubArraySum [-1,-2,-3,10,-5]       == -6)\n    check (minSubArraySum [100,-1,-2,-3,10,-5]    == -6)\n    check (minSubArraySum [10,11,13,8,3,4]        == 3)\n    check (minSubArraySum [100,-33,32,-1,0,-2]    == -33)\n    check (minSubArraySum [-10]                   == -10)\n    check (minSubArraySum [7]                     == 7)\n    check (minSubArraySum [1,-1]                  == -1)\n"}
{"task_id": "Haskell/115", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (max_fill [[0,0,1,0],[0,1,0,0],[1,1,1,1]]    1 == 6)\n    check (max_fill [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2 == 5)\n    check (max_fill [[0,0,0],[0,0,0]]                 5 == 0)\n    check (max_fill [[1,1,1,1],[1,1,1,1]]              2 == 4)\n    check (max_fill [[1,1,1,1],[1,1,1,1]]              9 == 2)\n"}
{"task_id": "Haskell/116", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sort_array [1,5,2,3,4]               == [1,2,4,3,5])\n    check (sort_array [-2,-3,-4,-5,-6]          == [-4,-2,-6,-5,-3])\n    check (sort_array [1,0,2,3,4]               == [0,1,2,4,3])\n    check (sort_array []                        == [])\n    check (sort_array [2,5,77,4,5,3,5,7,2,3,4]  == [2,2,4,4,3,3,5,5,5,7,77])\n    check (sort_array [3,6,44,12,32,5]          == [32,3,5,6,12,44])\n    check (sort_array [2,4,8,16,32]             == [2,4,8,16,32])\n"}
{"task_id": "Haskell/117", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (select_words \"Mary had a little lamb\" 4 == [\"little\"] )\n    check (select_words \"Mary had a little lamb\" 3 == [\"Mary\",\"lamb\"])                \n    check (select_words \"simple white space\"    2 == [] )\n    check (select_words \"Hello world\"           4 == [\"world\"])                      \n    check (select_words \"Uncle sam\"             3 == [\"Uncle\"])                      \n    check (select_words \"\"                      4 == [] )\n    check (select_words \"a b c d e f\"           1 == [\"b\",\"c\",\"d\",\"f\"])        \n"}
{"task_id": "Haskell/118", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (get_closest_vowel \"yogurt\" == \"u\")\n    check (get_closest_vowel \"full\"   == \"u\")\n    check (get_closest_vowel \"easy\"   == \"\")\n    check (get_closest_vowel \"eAsy\"   == \"\")\n    check (get_closest_vowel \"ali\"    == \"\")\n    check (get_closest_vowel \"bad\"    == \"a\")\n    check (get_closest_vowel \"most\"   == \"o\")\n    check (get_closest_vowel \"ab\"     == \"\")\n    check (get_closest_vowel \"ba\"     == \"\")\n    check (get_closest_vowel \"quick\"  == \"\")\n    check (get_closest_vowel \"anime\"  == \"i\")\n    check (get_closest_vowel \"Asia\"   == \"\")\n    check (get_closest_vowel \"Above\"  == \"o\")\n"}
{"task_id": "Haskell/119", "test": "\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (match_parens [\"()(\",\")\"]        == \"Yes\")\n    check (match_parens [\")\",\")\"]          == \"No\")\n    check (match_parens [\"(()(())\",\"())())\"] == \"No\")\n    check (match_parens [\")())\",\"(()()(\"]  == \"Yes\")\n    check (match_parens [\"(())))\",\"(()())((\"] == \"Yes\")\n    check (match_parens [\"()\",\"())\"]       == \"No\")\n    check (match_parens [\"(()(\",\"()))()\"] == \"Yes\")\n    check (match_parens [\"(((()\",\"((())\"]   == \"No\")\n    check (match_parens [\")(()\",\"(()(\"]   == \"No\")\n    check (match_parens [\")(\",\")(\"]       == \"No\")\n    check (match_parens [\"(\",\")\"]          == \"Yes\")\n    check (match_parens [\")\",\"(\"]          == \"Yes\")\n"}
{"task_id":"Haskell/120","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (maximumK [-3,-4,5] 3 == [-4,-3,5])\n    check (maximumK [4,-4,4] 2 == [4,4])\n    check (maximumK [-3,2,1,2,-1,-2,1] 1 == [2])\n    check (maximumK [123,-123,20,0,1,2,-3] 3 == [2,20,123])\n    check (maximumK [-123,20,0,1,2,-3] 4 == [0,1,2,20])\n    check (maximumK [5,15,0,3,-13,-8,0] 7 == [-13,-8,0,0,3,5,15])\n    check (maximumK [-1,0,2,5,3,-10] 2 == [3,5])\n    check (maximumK [1,0,5,-7] 1 == [5])\n    check (maximumK [4,-4] 2 == [-4,4])\n    check (maximumK [-10,10] 2 == [-10,10])\n    check (maximumK [1,2,3,-23,243,-400,0] 0 == [])\n"}
{"task_id":"Haskell/121","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (solution [5,8,7,1] == 12)\n    check (solution [3,3,3,3,3] == 9)\n    check (solution [30,13,24,321] == 0)\n    check (solution [5,9] == 5)\n    check (solution [2,4,8] == 0)\n    check (solution [30,13,23,32] == 23)\n    check (solution [3,13,2,9] == 3)\n"}
{"task_id":"Haskell/122","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (add_elements [1,-2,-3,41,57,76,87,88,99] 3 == -4)\n    check (add_elements [111,121,3,4000,5,6] 2 == 0)\n    check (add_elements [11,21,3,90,5,6,7,8,9] 4 == 125)\n    check (add_elements [111,21,3,4000,5,6,7,8,9] 4 == 24)\n    check (add_elements [1] 1 == 1)\n"}
{"task_id":"Haskell/123","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (get_odd_collatz 14 == [1,5,7,11,13,17])\n    check (get_odd_collatz 5 == [1,5])\n    check (get_odd_collatz 12 == [1,3,5])\n    check (get_odd_collatz 1 == [1])\n"}
{"task_id":"Haskell/124","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (valid_date \"03-11-2000\" == True)\n    check (valid_date \"15-01-2012\" == False)\n    check (valid_date \"04-0-2040\" == False)\n    check (valid_date \"06-04-2020\" == True)\n    check (valid_date \"01-01-2007\" == True)\n    check (valid_date \"03-32-2011\" == False)\n    check (valid_date \"\" == False)\n    check (valid_date \"04-31-3000\" == False)\n    check (valid_date \"06-06-2005\" == True)\n    check (valid_date \"21-31-2000\" == False)\n    check (valid_date \"04-12-2003\" == True)\n    check (valid_date \"04122003\" == False)\n    check (valid_date \"20030412\" == False)\n    check (valid_date \"2003-04\" == False)\n    check (valid_date \"2003-04-12\" == False)\n    check (valid_date \"04-2003\" == False)\n"}
{"task_id":"Haskell/125","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (split_words \"Hello world!\" == Right [\"Hello\",\"world!\"])\n    check (split_words \"Hello,world!\" == Right [\"Hello\",\"world!\"])\n    check (split_words \"Hello world,!\" == Right [\"Hello\",\"world,!\"])\n    check (split_words \"Hello,Hello,world !\" == Right [\"Hello,Hello,world\",\"!\"])\n    check (split_words \"abcdef\" == Left 3)\n    check (split_words \"aaabb\" == Left 2)\n    check (split_words \"aaaBb\" == Left 1)\n    check (split_words \"\" == Left 0)\n"}
{"task_id":"Haskell/126","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_sorted [] == True)\n    check (is_sorted [5] == True)\n    check (is_sorted [1,2,3,4,5] == True)\n    check (is_sorted [1,3,2,4,5] == False)\n    check (is_sorted [1,2,3,4,5,6] == True)\n    check (is_sorted [1,2,3,4,5,6,7] == True)\n    check (is_sorted [1,3,2,4,5,6,7] == False)\n    check (is_sorted [1,2,2,3,3,4] == True)\n    check (is_sorted [1,2,2,2,3,4] == False)\n    check (is_sorted [1,2,3,3,3,4] == False)\n    check (is_sorted [3,2,1] == False)\n    check (is_sorted [1,2,3,4] == True)\n"}
{"task_id":"Haskell/127","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (intersection (1,2) (2,3) == \"NO\")\n    check (intersection (-1,1) (0,4) == \"NO\")\n    check (intersection (-3,-1) (-5,5) == \"YES\")\n    check (intersection (-2,2) (-4,0) == \"YES\")\n    check (intersection (-11,2) (-1,-1) == \"NO\")\n    check (intersection (1,2) (3,5) == \"NO\")\n    check (intersection (1,2) (1,2) == \"NO\")\n    check (intersection (-2,-2) (-3,-2) == \"NO\")\n"}
{"task_id":"Haskell/128","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (prod_signs [1,2,2,-4] == Just (-9))\n    check (prod_signs [0,1] == Just 0)\n    check (prod_signs [1,1,1,2,3,-1,1] == Just (-10))\n    check (prod_signs [] == Nothing)\n    check (prod_signs [2,4,1,2,-1,-1,9] == Just 20)\n    check (prod_signs [-1,1,-1,1] == Just 4)\n    check (prod_signs [-1,1,1,1] == Just (-4))\n    check (prod_signs [-1,1,1,0] == Just 0)\n"}
{"task_id":"Haskell/129","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (minPath [[1,2,3],[4,5,6],[7,8,9]] 3 == [1,2,1])\n    check (minPath [[5,9,3],[4,1,6],[7,8,2]] 1 == [1])\n    check (minPath [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] 4 == [1,2,1,2])\n    check (minPath [[6,4,13,10],[5,7,12,1],[3,16,11,15],[8,14,9,2]] 7 == [1,10,1,10,1,10,1])\n    check (minPath [[8,14,9,2],[6,4,13,15],[5,7,1,12],[3,10,11,16]] 5 == [1,7,1,7,1])\n    check (minPath [[11,8,7,2],[5,16,14,4],[9,3,15,6],[12,13,10,1]] 9 == [1,6,1,6,1,6,1,6,1])\n    check (minPath [[12,13,10,1],[9,3,15,6],[5,16,14,4],[11,8,7,2]] 12 == [1,6,1,6,1,6,1,6,1,6,1,6])\n    check (minPath [[2,7,4],[3,1,5],[6,8,9]] 8 == [1,3,1,3,1,3,1,3])\n    check (minPath [[6,1,5],[3,8,9],[2,7,4]] 8 == [1,5,1,5,1,5,1,5])\n    check (minPath [[1,2],[3,4]] 10 == [1,2,1,2,1,2,1,2,1,2])\n    check (minPath [[1,3],[3,2]] 10 == [1,3,1,3,1,3,1,3,1,3])\n"}
{"task_id":"Haskell/130","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (tri 3 == [1,3,2,8])\n    check (tri 4 == [1,3,2,8,3])\n    check (tri 5 == [1,3,2,8,3,15])\n    check (tri 6 == [1,3,2,8,3,15,4])\n    check (tri 7 == [1,3,2,8,3,15,4,24])\n    check (tri 8 == [1,3,2,8,3,15,4,24,5])\n    check (tri 9 == [1,3,2,8,3,15,4,24,5,35])\n    check (tri 20 == [1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11])\n    check (tri 0 == [1])\n    check (tri 1 == [1,3])\n"}
{"task_id":"Haskell/131","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (digits 5 == 5)\n    check (digits 54 == 5)\n    check (digits 120 == 1)\n    check (digits 5014 == 5)\n    check (digits 98765 == 315)\n    check (digits 5576543 == 2625)\n    check (digits 2468 == 0)\n"}
{"task_id":"Haskell/132","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_nested \"[[]]\" == True)\n    check (is_nested \"[]]]]]]][[[[[]\" == False)\n    check (is_nested \"[][]\" == False)\n    check (is_nested \"[]\" == False)\n    check (is_nested \"[[][]]\" == True)\n    check (is_nested \"[[]][[\" == True)\n    check (is_nested \"\" == False)\n    check (is_nested \"[[[[]]]]\" == True)\n    check (is_nested \"[][][[]]\" == True)\n    check (is_nested \"[]]\" == False)\n"}
{"task_id":"Haskell/133","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (sum_squares [1.0,2.0,3.0] == 14)\n    check (sum_squares [1.0,3.0,5.0,7.0] == 84)\n    check (sum_squares [1.4,4.2,0.0] == 29)\n    check (sum_squares [-2.4,1.0,1.0] == 6)\n    check (sum_squares [100.0,1.0,15.0,2.0] == 10230)\n    check (sum_squares [10000.0,10000.0] == 200000000)\n    check (sum_squares [-1.4,4.6,6.3] == 75)\n    check (sum_squares [-1.4,17.9,18.9,19.9] == 1086)\n    check (sum_squares [0.0] == 0)\n    check (sum_squares [-1.0] == 1)\n    check (sum_squares [-1.0,1.0,0.0] == 2)\n"}
{"task_id":"Haskell/134","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (check_if_last_char_is_a_letter \"\" == False)\n    check (check_if_last_char_is_a_letter \"apple\" == False)\n    check (check_if_last_char_is_a_letter \"apple pi e\" == True)\n    check (check_if_last_char_is_a_letter \"apple pi e \" == False)\n    check (check_if_last_char_is_a_letter \"A\" == True)\n    check (check_if_last_char_is_a_letter \"Pumpkin pie \" == False)\n    check (check_if_last_char_is_a_letter \"Pumpkin pie 1\" == False)\n"}
{"task_id":"Haskell/135","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (can_arrange [1,2,4,3,5] == 3)\n    check (can_arrange [1,2,4,5] == -1)\n    check (can_arrange [1,4,2,5,6,7,8,9,10] == 2)\n    check (can_arrange [4,8,5,7,3] == 4)\n    check (can_arrange [] == -1)\n"}
{"task_id":"Haskell/136","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (largest_smallest_integers [2,4,1,3,5,7]   == (Nothing,Just 1))\n    check (largest_smallest_integers [2,4,1,3,5,7,0] == (Nothing,Just 1))\n    check (largest_smallest_integers [1,3,2,4,5,6,-2] == (Just (-2),Just 1))\n    check (largest_smallest_integers [4,5,3,6,2,7,-7] == (Just (-7),Just 2))\n    check (largest_smallest_integers [7,3,8,4,9,2,5,-9] == (Just (-9),Just 2))\n    check (largest_smallest_integers []               == (Nothing,Nothing))\n    check (largest_smallest_integers [0]              == (Nothing,Nothing))\n    check (largest_smallest_integers [-1,-3,-5,-6]    == (Just (-1),Nothing))\n    check (largest_smallest_integers [-1,-3,-5,-6,0]  == (Just (-1),Nothing))\n    check (largest_smallest_integers [-6,-4,-4,-3,1]  == (Just (-3),Just 1))\n    check (largest_smallest_integers [-6,-4,-4,-3,-100,1] == (Just (-3),Just 1))\n"}
{"task_id":"Haskell/137","test":"\n\n-- Test suite (requires Either3 and constructors IntNumber, FloatNumber, StringNumber)\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (compare_one (IntNumber 1) (IntNumber 2)         == Just (IntNumber 2))\n    check (compare_one (IntNumber 1) (FloatNumber 2.5)     == Just (FloatNumber 2.5))\n    check (compare_one (IntNumber 1) (StringNumber \"2,3\") == Just (StringNumber \"2,3\"))\n    check (compare_one (StringNumber \"5,1\") (StringNumber \"6\") == Just (StringNumber \"6\"))\n    check (compare_one (StringNumber \"1\") (IntNumber 1)   == Nothing)\n"}
{"task_id":"Haskell/138","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (is_equal_to_sum_even 4  == False)\n    check (is_equal_to_sum_even 6  == False)\n    check (is_equal_to_sum_even 8  == True)\n    check (is_equal_to_sum_even 10 == True)\n    check (is_equal_to_sum_even 11 == False)\n    check (is_equal_to_sum_even 12 == True)\n    check (is_equal_to_sum_even 13 == False)\n    check (is_equal_to_sum_even 16 == True)\n"}
{"task_id":"Haskell/139","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (special_factorial 4 == 288)\n    check (special_factorial 5 == 34560)\n    check (special_factorial 7 == 125411328000)\n    check (special_factorial 1 == 1)\n"}
{"task_id":"Haskell/140","test":"\n-- Test suite for fix_spaces\nimport Test.HUnit\n\ntests = TestList [\n  \"no spaces\" ~: fix_spaces \"Example\" ~?= \"Example\",\n  \"single trailing space\" ~: fix_spaces \"Mudasir Hanif \" ~?= \"Mudasir_Hanif_\",\n  \"double spaces between words\" ~: fix_spaces \"Yellow Yellow  Dirty  Fellow\" ~?= \"Yellow_Yellow__Dirty__Fellow\",\n  \"three spaces in middle\" ~: fix_spaces \"Exa   mple\" ~?= \"Exa-mple\",\n  \"leading and mixed spaces\" ~: fix_spaces \"   Exa 1 2 2 mple\" ~?= \"-Exa_1_2_2_mple\"\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/141","test":"\n-- Test suite for file_name_check\nimport Test.HUnit\n\ntests = TestList [\n  \"valid txt\"        ~: file_name_check \"example.txt\"  ~?= \"Yes\",\n  \"starts with digit\"~: file_name_check \"1example.dll\" ~?= \"No\",\n  \"unknown ext\"      ~: file_name_check \"s1sdf3.asd\"    ~?= \"No\",\n  \"single letter\"    ~: file_name_check \"K.dll\"        ~?= \"Yes\",\n  \"three digits\"     ~: file_name_check \"MY16FILE3.exe\"~?= \"Yes\",\n  \"four digits\"      ~: file_name_check \"His12FILE94.exe\"~?= \"No\",\n  \"starts underscore\"~: file_name_check \"_Y.txt\"       ~?= \"No\",\n  \"multiple dots\"    ~: file_name_check \"final..txt\"   ~?= \"No\",\n  \"no dot\"           ~: file_name_check \"final132\"     ~?= \"No\",\n  \"empty name\"       ~: file_name_check \".txt\"          ~?= \"No\"\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/142","test":"\n-- Test suite for sum_squares\nimport Test.HUnit\n\ntests = TestList [\n  \"simple list\"      ~: sum_squares [1,2,3]              ~?= 6,\n  \"all ones\"         ~: sum_squares [1,1,1,1,1,1,1,1,1]  ~?= 9,\n  \"negative mix\"     ~: sum_squares [-1,-5,2,-1,-5]      ~?= (-126),\n  \"single zero\"      ~: sum_squares [0]                   ~?= 0,\n  \"mixed large\"      ~: sum_squares [-56,-99,1,0,-2]      ~?= 3030\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/143","test":"\n-- Test suite for words_in_sentence\nimport Test.HUnit\n\ntests = TestList [\n  \"example 1\"        ~: words_in_sentence \"This is a test\"                   ~?= \"is\",\n  \"example 2\"        ~: words_in_sentence \"lets go for swimming\"           ~?= \"go for\",\n  \"multiple words\"   ~: words_in_sentence \"there is no place available here\" ~?= \"there is no place\",\n  \"mixed case\"       ~: words_in_sentence \"Hi I am Hussein\"               ~?= \"Hi am Hussein\",\n  \"all primes\"       ~: words_in_sentence \"go for it\"                      ~?= \"go for it\",\n  \"none prime\"       ~: words_in_sentence \"here\"                          ~?= \"\",\n  \"one prime\"        ~: words_in_sentence \"here is\"                       ~?= \"is\"\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/144","test":"\n-- Test suite for simplify\nimport Test.HUnit\n\ntests = TestList [\n  \"true case\"        ~: simplify \"1/5\" \"5/1\"    ~?= True,\n  \"false case\"       ~: simplify \"1/6\" \"2/1\"    ~?= False,\n  \"true case 2\"      ~: simplify \"5/1\" \"3/1\"    ~?= True,\n  \"false case 2\"     ~: simplify \"7/10\" \"10/2\" ~?= False,\n  \"mixed lengths\"    ~: simplify \"2/10\" \"50/10\"~?= True,\n  \"equal fractions\"  ~: simplify \"1/5\" \"1/5\"    ~?= False\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/145","test":"\n-- Test suite for order_by_points\nimport Test.HUnit\n\ntests = TestList [\n  \"basic mix\"        ~: order_by_points [1,11,-1,-11,-12]                     ~?= [-1,-11,1,-12,11],\n  \"empty\"            ~: order_by_points []                                      ~?= [],\n  \"long list\"        ~: order_by_points [1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46] ~?=\n                                                    [0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457],\n  \"negatives\"        ~: order_by_points [1,-11,-32,43,54,-98,2,-3]               ~?= [-3,-32,-98,-11,1,2,43,54]\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/146","test":"\n-- Test suite for specialFilter\nimport Test.HUnit\n\ntests = TestList [\n  \"none qualify\"     ~: specialFilter [5,-2,1,-5]           ~?= 0,\n  \"one qualify\"      ~: specialFilter [15,-73,14,-15]       ~?= 1,\n  \"two qualify\"      ~: specialFilter [33,-2,-3,45,21,109]   ~?= 2,\n  \"four qualify\"     ~: specialFilter [43,-12,93,125,121,109]~?= 4,\n  \"edge single\"      ~: specialFilter [1]                    ~?= 0,\n  \"empty\"            ~: specialFilter []                     ~?= 0\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/147","test":"\n-- Test suite for get_max_triples\nimport Test.HUnit\n\ntests = TestList [\n  \"n=5\"              ~: get_max_triples 5   ~?= 1,\n  \"n=6\"              ~: get_max_triples 6   ~?= 4,\n  \"n=10\"             ~: get_max_triples 10  ~?= 36,\n  \"n=100\"            ~: get_max_triples 100 ~?= 53361\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/148","test":"\n-- Test suite for bf\nimport Test.HUnit\n\ntests = TestList [\n  \"gw Jupiter->Neptune\" ~: bf \"Jupiter\" \"Neptune\" ~?= [\"Saturn\",\"Uranus\"],\n  \"ew Earth->Mercury\"   ~: bf \"Earth\" \"Mercury\"   ~?= [\"Venus\"],\n  \"range Mercury->Uranus\" ~: bf \"Mercury\" \"Uranus\" ~?=\n                              [\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"],\n  \"reverse Neptune->Venus\" ~: bf \"Neptune\" \"Venus\" ~?=\n                              [\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"],\n  \"same planet\"         ~: bf \"Earth\" \"Earth\"       ~?= [],\n  \"invalid name\"        ~: bf \"Jupiter\" \"Pluto\"    ~?= []\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/149","test":"\n-- Test suite for sorted_list_sum\nimport Test.HUnit\n\ntests = TestList [\n  \"single even lengths\"  ~: sorted_list_sum [\"aa\",\"a\",\"aaa\"]           ~?= [\"aa\"],\n  \"mixed list\"           ~: sorted_list_sum [\"school\",\"AI\",\"asdf\",\"b\"] ~?=\n                               [\"AI\",\"asdf\",\"school\"],\n  \"all odd lengths\"      ~: sorted_list_sum [\"d\",\"b\",\"c\",\"a\"]         ~?= [],\n  \"duplicates and mix\"   ~: sorted_list_sum [\"aaaa\",\"bbbb\",\"dd\",\"cc\"] ~?=\n                               [\"cc\",\"dd\",\"aaaa\",\"bbbb\"]\n]\n\nmain = runTestTT tests >>= print\n"}
{"task_id":"Haskell/150","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (x_or_y 7 34 12 == 34)\n    check (x_or_y 15 8 5 == 5)\n    check (x_or_y 3 33 5212 == 33)\n    check (x_or_y 1259 3 52 == 3)\n    check (x_or_y 7919 (-1) 12 == -1)\n    check (x_or_y 3609 1245 583 == 583)\n    check (x_or_y 91 56 129 == 129)\n    check (x_or_y 6 34 1234 == 1234)\n    check (x_or_y 1 2 0 == 0)\n    check (x_or_y 2 2 0 == 2)\n"}
{"task_id":"Haskell/151","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (double_the_difference [] == 0)\n    check (double_the_difference [5,4] == 25)\n    check (double_the_difference [-10,-20,-30] == 0)\n    check (double_the_difference [-1,-2,8] == 0)\n    check (double_the_difference [3,5] == 34)\n    check (double_the_difference [-99,-97..99] == 166650)\n"}
{"task_id":"Haskell/152","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (compare' [1,2,3,4,5,1] [1,2,3,4,2,-2] == [0,0,0,0,3,3])\n    check (compare' [0,5,0,0,0,4] [4,1,1,0,0,-2] == [4,4,1,0,0,6])\n    check (compare' [0,0,0,0,0,0] [0,0,0,0,0,0] == [0,0,0,0,0,0])\n    check (compare' [1,2,3] [-1,-2,-3] == [2,4,6])\n    check (compare' [1,2,3,5] [-1,2,3,4] == [2,0,0,1])\n"}
{"task_id":"Haskell/153","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (strongest_extension \"Watashi\" [\"tEN\",\"niNE\",\"eIGHt8OKe\"] == \"Watashi.eIGHt8OKe\")\n    check (strongest_extension \"Boku123\" [\"nani\",\"NazeDa\",\"YEs.WeCaNe\",\"32145tggg\"] == \"Boku123.YEs.WeCaNe\")\n    check (strongest_extension \"__YESIMHERE\" [\"t\",\"eMptY\",\"nothing\",\"zeR00\",\"NuLl__\",\"123NoooneB321\"] == \"__YESIMHERE.NuLl__\")\n    check (strongest_extension \"K\" [\"Ta\",\"TAR\",\"t234An\",\"cosSo\"] == \"K.TAR\")\n    check (strongest_extension \"__HAHA\" [\"Tab\",\"123\",\"781345\",\"-_-\"] == \"__HAHA.123\")\n    check (strongest_extension \"YameRore\" [\"HhAas\",\"okIWILL123\",\"WorkOut\",\"Fails\",\"-_-\"] == \"YameRore.okIWILL123\")\n    check (strongest_extension \"finNNalLLly\" [\"Die\",\"NowW\",\"Wow\",\"WoW\"] == \"finNNalLLly.WoW\")\n    check (strongest_extension \"_\" [\"Bb\",\"91245\"] == \"_.Bb\")\n    check (strongest_extension \"Sp\" [\"671235\",\"Bb\"] == \"Sp.671235\")\n"}
{"task_id":"Haskell/154","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (cycpattern_check \"xyzw\" \"xyw\" == False)\n    check (cycpattern_check \"yello\" \"ell\" == True)\n    check (cycpattern_check \"whattup\" \"ptut\" == False)\n    check (cycpattern_check \"efef\" \"fee\" == True)\n    check (cycpattern_check \"abab\" \"aabb\" == False)\n    check (cycpattern_check \"winemtt\" \"tinem\" == True)\n"}
{"task_id":"Haskell/155","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (even_odd_count 7 == (0,1))\n    check (even_odd_count (-78) == (1,1))\n    check (even_odd_count 3452 == (2,2))\n    check (even_odd_count 346211 == (3,3))\n    check (even_odd_count (-345821) == (3,3))\n    check (even_odd_count (-2) == (1,0))\n    check (even_odd_count (-45347) == (2,3))\n    check (even_odd_count 0 == (1,0))\n"}
{"task_id":"Haskell/156","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (int_to_mini_roman 19 == \"xix\")\n    check (int_to_mini_roman 152 == \"clii\")\n    check (int_to_mini_roman 251 == \"ccli\")\n    check (int_to_mini_roman 426 == \"cdxxvi\")\n    check (int_to_mini_roman 500 == \"d\")\n    check (int_to_mini_roman 1 == \"i\")\n    check (int_to_mini_roman 4 == \"iv\")\n    check (int_to_mini_roman 43 == \"xliii\")\n    check (int_to_mini_roman 90 == \"xc\")\n    check (int_to_mini_roman 94 == \"xciv\")\n    check (int_to_mini_roman 532 == \"dxxxii\")\n    check (int_to_mini_roman 900 == \"cm\")\n    check (int_to_mini_roman 994 == \"cmxciv\")\n    check (int_to_mini_roman 1000 == \"m\")\n"}
{"task_id":"Haskell/157","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (right_angle_triangle 3 4 5 == True)\n    check (right_angle_triangle 1 2 3 == False)\n    check (right_angle_triangle 10 6 8 == True)\n    check (right_angle_triangle 2 2 2 == False)\n    check (right_angle_triangle 7 24 25 == True)\n    check (right_angle_triangle 10 5 7 == False)\n    check (right_angle_triangle 5 12 13 == True)\n    check (right_angle_triangle 15 8 17 == True)\n    check (right_angle_triangle 48 55 73 == True)\n    check (right_angle_triangle 1 1 1 == False)\n    check (right_angle_triangle 2 2 10 == False)\n"}
{"task_id":"Haskell/158","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (find_max [\"name\",\"of\",\"string\"] == \"string\")\n    check (find_max [\"name\",\"enam\",\"game\"] == \"enam\")\n    check (find_max [\"aaaaaaa\",\"bb\",\"cc\"] == \"aaaaaaa\")\n    check (find_max [\"abc\",\"cba\"] == \"abc\")\n    check (find_max [\"play\",\"this\",\"game\",\"of\",\"footbott\"] == \"footbott\")\n    check (find_max [\"we\",\"are\",\"gonna\",\"rock\"] == \"gonna\")\n    check (find_max [\"we\",\"are\",\"a\",\"mad\",\"nation\"] == \"nation\")\n    check (find_max [\"this\",\"is\",\"a\",\"prrk\"] == \"this\")\n    check (find_max [\"b\"] == \"b\")\n    check (find_max [\"play\",\"play\",\"play\"] == \"play\")\n"}
{"task_id":"Haskell/159","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (eat 5 6 10 == [11,4])\n    check (eat 4 8 9 == [12,1])\n    check (eat 1 10 10 == [11,0])\n    check (eat 2 11 5 == [7,0])\n    check (eat 4 5 7 == [9,2])\n    check (eat 4 5 1 == [5,0])\n"}
{"task_id":"Haskell/160","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (do_algebra [\"**\",\"*\",\"+\"] [2,3,4,5] == 37)\n    check (do_algebra [\"+\",\"*\",\"-\"] [2,3,4,5] == 9)\n    check (do_algebra [\"//\",\"*\"] [7,3,4] == 8)\n"}
{"task_id":"Haskell/161","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (solve \"AsDf\" == \"aSdF\")\n    check (solve \"1234\" == \"4321\")\n    check (solve \"ab\" == \"AB\")\n    check (solve \"#a@C\" == \"#A@c\")\n    check (solve \"#AsdfW^45\" == \"#aSDFw^45\")\n    check (solve \"#6@2\" == \"2@6#\")\n    check (solve \"#$a^D\" == \"#$A^d\")\n    check (solve \"#ccc\" == \"#CCC\")\n"}
{"task_id":"Haskell/162","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (string_to_md5 \"Hello world\" == Just \"3e25960a79dbc69b674cd4ec67a72c62\")\n    check (string_to_md5 \"\" == Nothing)\n    check (string_to_md5 \"A B C\" == Just \"0ef78513b0cb8cef12743f5aeb35f888\")\n    check (string_to_md5 \"password\" == Just \"5f4dcc3b5aa765d61d8327deb882cf99\")\n"}
{"task_id":"Haskell/163","test":"\n\n-- Test suite\ncheck :: Bool -> IO ()\ncheck True  = return ()\ncheck False = error \"Test failed\"\n\nmain :: IO ()\nmain = do\n    check (generate_integers 2 10 == [2,4,6,8])\n    check (generate_integers 10 2 == [2,4,6,8])\n    check (generate_integers 132 2 == [2,4,6,8])\n    check (generate_integers 17 89 == [])\n"}
